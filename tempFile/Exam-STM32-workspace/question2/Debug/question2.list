
question2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800354c  0800354c  0001354c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035e4  080035e4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080035e4  080035e4  000135e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035ec  080035ec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035ec  080035ec  000135ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035f0  080035f0  000135f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080035f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004028  20000010  08003604  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004038  08003604  00024038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5bc  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201a  00000000  00000000  0002c5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0002e618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a10  00000000  00000000  0002f0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162e2  00000000  00000000  0002fb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c439  00000000  00000000  00045de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d1e0  00000000  00000000  0005221b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df3fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b38  00000000  00000000  000df44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003534 	.word	0x08003534

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08003534 	.word	0x08003534

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <vApplicationGetIdleTaskMemory+0x30>)
 80004fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	2000002c 	.word	0x2000002c
 8000514:	20000080 	.word	0x20000080

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b5b0      	push	{r4, r5, r7, lr}
 800051a:	b096      	sub	sp, #88	; 0x58
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 facd 	bl	8000abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f84b 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 f8db 	bl	80006e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052a:	f000 f8af 	bl	800068c <MX_USART2_UART_Init>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <main+0x8c>)
 8000530:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000534:	461d      	mov	r5, r3
 8000536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800053a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800053e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000542:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f001 fd7c 	bl	8002046 <osThreadCreate>
 800054e:	4603      	mov	r3, r0
 8000550:	4a15      	ldr	r2, [pc, #84]	; (80005a8 <main+0x90>)
 8000552:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <main+0x94>)
 8000556:	f107 0420 	add.w	r4, r7, #32
 800055a:	461d      	mov	r5, r3
 800055c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000560:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000564:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000568:	f107 0320 	add.w	r3, r7, #32
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f001 fd69 	bl	8002046 <osThreadCreate>
 8000574:	4603      	mov	r3, r0
 8000576:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <main+0x98>)
 8000578:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <main+0x9c>)
 800057c:	1d3c      	adds	r4, r7, #4
 800057e:	461d      	mov	r5, r3
 8000580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f001 fd58 	bl	8002046 <osThreadCreate>
 8000596:	4603      	mov	r3, r0
 8000598:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <main+0xa0>)
 800059a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800059c:	f001 fd4c 	bl	8002038 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80005a0:	e7fe      	b.n	80005a0 <main+0x88>
 80005a2:	bf00      	nop
 80005a4:	08003570 	.word	0x08003570
 80005a8:	200002d4 	.word	0x200002d4
 80005ac:	0800358c 	.word	0x0800358c
 80005b0:	200002d8 	.word	0x200002d8
 80005b4:	080035a8 	.word	0x080035a8
 80005b8:	200002dc 	.word	0x200002dc

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 ffaa 	bl	8003524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b27      	ldr	r3, [pc, #156]	; (8000684 <SystemClock_Config+0xc8>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a26      	ldr	r2, [pc, #152]	; (8000684 <SystemClock_Config+0xc8>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <SystemClock_Config+0xc8>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b21      	ldr	r3, [pc, #132]	; (8000688 <SystemClock_Config+0xcc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a20      	ldr	r2, [pc, #128]	; (8000688 <SystemClock_Config+0xcc>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <SystemClock_Config+0xcc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000620:	2310      	movs	r3, #16
 8000622:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000624:	2302      	movs	r3, #2
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000628:	2300      	movs	r3, #0
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800062c:	2308      	movs	r3, #8
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000630:	2350      	movs	r3, #80	; 0x50
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000638:	2304      	movs	r3, #4
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fd87 	bl	8001154 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800064c:	f000 f95c 	bl	8000908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2102      	movs	r1, #2
 800066c:	4618      	mov	r0, r3
 800066e:	f000 ffe9 	bl	8001644 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000678:	f000 f946 	bl	8000908 <Error_Handler>
  }
}
 800067c:	bf00      	nop
 800067e:	3750      	adds	r7, #80	; 0x50
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <MX_USART2_UART_Init+0x50>)
 8000694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 8000698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800069c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f001 f9de 	bl	8001a84 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ce:	f000 f91b 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000290 	.word	0x20000290
 80006dc:	40004400 	.word	0x40004400

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a2c      	ldr	r2, [pc, #176]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b2a      	ldr	r3, [pc, #168]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a25      	ldr	r2, [pc, #148]	; (80007b0 <MX_GPIO_Init+0xd0>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2120      	movs	r1, #32
 800076a:	4812      	ldr	r0, [pc, #72]	; (80007b4 <MX_GPIO_Init+0xd4>)
 800076c:	f000 fcbe 	bl	80010ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000776:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	480c      	ldr	r0, [pc, #48]	; (80007b8 <MX_GPIO_Init+0xd8>)
 8000788:	f000 fb14 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800078c:	2320      	movs	r3, #32
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_GPIO_Init+0xd4>)
 80007a4:	f000 fb06 	bl	8000db4 <HAL_GPIO_Init>

}
 80007a8:	bf00      	nop
 80007aa:	3728      	adds	r7, #40	; 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020000 	.word	0x40020000
 80007b8:	40020800 	.word	0x40020800

080007bc <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		if (stage == 0) {
 80007c4:	4b16      	ldr	r3, [pc, #88]	; (8000820 <StartDefaultTask+0x64>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d105      	bne.n	80007d8 <StartDefaultTask+0x1c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2120      	movs	r1, #32
 80007d0:	4814      	ldr	r0, [pc, #80]	; (8000824 <StartDefaultTask+0x68>)
 80007d2:	f000 fc8b 	bl	80010ec <HAL_GPIO_WritePin>
 80007d6:	e7f5      	b.n	80007c4 <StartDefaultTask+0x8>
		} else {
			if (start == 1 && delay < 2250) {
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <StartDefaultTask+0x6c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d109      	bne.n	80007f4 <StartDefaultTask+0x38>
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <StartDefaultTask+0x70>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f640 02c9 	movw	r2, #2249	; 0x8c9
 80007e8:	4293      	cmp	r3, r2
 80007ea:	dc03      	bgt.n	80007f4 <StartDefaultTask+0x38>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007ec:	2120      	movs	r1, #32
 80007ee:	480d      	ldr	r0, [pc, #52]	; (8000824 <StartDefaultTask+0x68>)
 80007f0:	f000 fc95 	bl	800111e <HAL_GPIO_TogglePin>
			}

			if (delay < 2250)
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <StartDefaultTask+0x70>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f640 02c9 	movw	r2, #2249	; 0x8c9
 80007fc:	4293      	cmp	r3, r2
 80007fe:	dc08      	bgt.n	8000812 <StartDefaultTask+0x56>
				HAL_Delay(2250 - delay);
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <StartDefaultTask+0x70>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f5c3 630c 	rsb	r3, r3, #2240	; 0x8c0
 8000808:	330a      	adds	r3, #10
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f9c8 	bl	8000ba0 <HAL_Delay>
 8000810:	e7d8      	b.n	80007c4 <StartDefaultTask+0x8>
			else
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000812:	2201      	movs	r2, #1
 8000814:	2120      	movs	r1, #32
 8000816:	4803      	ldr	r0, [pc, #12]	; (8000824 <StartDefaultTask+0x68>)
 8000818:	f000 fc68 	bl	80010ec <HAL_GPIO_WritePin>
		if (stage == 0) {
 800081c:	e7d2      	b.n	80007c4 <StartDefaultTask+0x8>
 800081e:	bf00      	nop
 8000820:	2000028c 	.word	0x2000028c
 8000824:	40020000 	.word	0x40020000
 8000828:	20000284 	.word	0x20000284
 800082c:	20000280 	.word	0x20000280

08000830 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 8000838:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083c:	4817      	ldr	r0, [pc, #92]	; (800089c <StartTask02+0x6c>)
 800083e:	f000 fc3d 	bl	80010bc <HAL_GPIO_ReadPin>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1f7      	bne.n	8000838 <StartTask02+0x8>
			start = 1;
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <StartTask02+0x70>)
 800084a:	2201      	movs	r2, #1
 800084c:	601a      	str	r2, [r3, #0]
			action = 0;
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <StartTask02+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
			delay += 500;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <StartTask02+0x78>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800085c:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <StartTask02+0x78>)
 800085e:	6013      	str	r3, [r2, #0]
			if (stage == 5) {
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <StartTask02+0x7c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b05      	cmp	r3, #5
 8000866:	d106      	bne.n	8000876 <StartTask02+0x46>
				stage = 0;
 8000868:	4b10      	ldr	r3, [pc, #64]	; (80008ac <StartTask02+0x7c>)
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
				delay = 0;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <StartTask02+0x78>)
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	e004      	b.n	8000880 <StartTask02+0x50>
			} else {
				stage++;
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <StartTask02+0x7c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <StartTask02+0x7c>)
 800087e:	6013      	str	r3, [r2, #0]
			}
			while (1) {
				HAL_Delay(100);
 8000880:	2064      	movs	r0, #100	; 0x64
 8000882:	f000 f98d 	bl	8000ba0 <HAL_Delay>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 8000886:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088a:	4804      	ldr	r0, [pc, #16]	; (800089c <StartTask02+0x6c>)
 800088c:	f000 fc16 	bl	80010bc <HAL_GPIO_ReadPin>
 8000890:	4603      	mov	r3, r0
 8000892:	2b01      	cmp	r3, #1
 8000894:	d000      	beq.n	8000898 <StartTask02+0x68>
				HAL_Delay(100);
 8000896:	e7f3      	b.n	8000880 <StartTask02+0x50>
					break;
 8000898:	bf00      	nop
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 800089a:	e7cd      	b.n	8000838 <StartTask02+0x8>
 800089c:	40020800 	.word	0x40020800
 80008a0:	20000284 	.word	0x20000284
 80008a4:	20000288 	.word	0x20000288
 80008a8:	20000280 	.word	0x20000280
 80008ac:	2000028c 	.word	0x2000028c

080008b0 <StartTask03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;)

	{
		action++;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <StartTask03+0x48>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	3301      	adds	r3, #1
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <StartTask03+0x48>)
 80008c0:	6013      	str	r3, [r2, #0]
		if (action == 15) {
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <StartTask03+0x48>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2b0f      	cmp	r3, #15
 80008c8:	d10d      	bne.n	80008e6 <StartTask03+0x36>
			action = 0;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <StartTask03+0x48>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2120      	movs	r1, #32
 80008d4:	4809      	ldr	r0, [pc, #36]	; (80008fc <StartTask03+0x4c>)
 80008d6:	f000 fc09 	bl	80010ec <HAL_GPIO_WritePin>
			start = 0;
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <StartTask03+0x50>)
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
			delay = 0;
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <StartTask03+0x54>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(1000);
 80008e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ea:	f000 f959 	bl	8000ba0 <HAL_Delay>
		osDelay(1);
 80008ee:	2001      	movs	r0, #1
 80008f0:	f001 fbf5 	bl	80020de <osDelay>
		action++;
 80008f4:	e7e0      	b.n	80008b8 <StartTask03+0x8>
 80008f6:	bf00      	nop
 80008f8:	20000288 	.word	0x20000288
 80008fc:	40020000 	.word	0x40020000
 8000900:	20000284 	.word	0x20000284
 8000904:	20000280 	.word	0x20000280

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000910:	e7fe      	b.n	8000910 <Error_Handler+0x8>
	...

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_MspInit+0x54>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	4a11      	ldr	r2, [pc, #68]	; (8000968 <HAL_MspInit+0x54>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000928:	6453      	str	r3, [r2, #68]	; 0x44
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <HAL_MspInit+0x54>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <HAL_MspInit+0x54>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <HAL_MspInit+0x54>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <HAL_MspInit+0x54>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	210f      	movs	r1, #15
 8000956:	f06f 0001 	mvn.w	r0, #1
 800095a:	f000 fa02 	bl	8000d62 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a19      	ldr	r2, [pc, #100]	; (80009f0 <HAL_UART_MspInit+0x84>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d12b      	bne.n	80009e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <HAL_UART_MspInit+0x88>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	4a17      	ldr	r2, [pc, #92]	; (80009f4 <HAL_UART_MspInit+0x88>)
 8000998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099c:	6413      	str	r3, [r2, #64]	; 0x40
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a10      	ldr	r2, [pc, #64]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009c6:	230c      	movs	r3, #12
 80009c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d6:	2307      	movs	r3, #7
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <HAL_UART_MspInit+0x8c>)
 80009e2:	f000 f9e7 	bl	8000db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	; 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40004400 	.word	0x40004400
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020000 	.word	0x40020000

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <NMI_Handler+0x4>

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f000 f898 	bl	8000b60 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a30:	f002 f8d8 	bl	8002be4 <xTaskGetSchedulerState>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d001      	beq.n	8000a3e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a3a:	f002 fb15 	bl	8003068 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <SystemInit+0x20>)
 8000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4e:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <SystemInit+0x20>)
 8000a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a6c:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a6e:	490e      	ldr	r1, [pc, #56]	; (8000aa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a70:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a84:	4c0b      	ldr	r4, [pc, #44]	; (8000ab4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a92:	f7ff ffd7 	bl	8000a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a96:	f002 fd21 	bl	80034dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9a:	f7ff fd3d 	bl	8000518 <main>
  bx  lr    
 8000a9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000aac:	080035f4 	.word	0x080035f4
  ldr r2, =_sbss
 8000ab0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ab4:	20004038 	.word	0x20004038

08000ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC_IRQHandler>
	...

08000abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <HAL_Init+0x40>)
 8000ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <HAL_Init+0x40>)
 8000ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <HAL_Init+0x40>)
 8000ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f000 f931 	bl	8000d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aea:	200f      	movs	r0, #15
 8000aec:	f000 f808 	bl	8000b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af0:	f7ff ff10 	bl	8000914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023c00 	.word	0x40023c00

08000b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_InitTick+0x54>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_InitTick+0x58>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4619      	mov	r1, r3
 8000b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f93b 	bl	8000d9a <HAL_SYSTICK_Config>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00e      	b.n	8000b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	d80a      	bhi.n	8000b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b34:	2200      	movs	r2, #0
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	f000 f911 	bl	8000d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b40:	4a06      	ldr	r2, [pc, #24]	; (8000b5c <HAL_InitTick+0x5c>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	e000      	b.n	8000b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000004 	.word	0x20000004

08000b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x20>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_IncTick+0x24>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_IncTick+0x24>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008
 8000b84:	200002e0 	.word	0x200002e0

08000b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	200002e0 	.word	0x200002e0

08000ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba8:	f7ff ffee 	bl	8000b88 <HAL_GetTick>
 8000bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb8:	d005      	beq.n	8000bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bba:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <HAL_Delay+0x44>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bc6:	bf00      	nop
 8000bc8:	f7ff ffde 	bl	8000b88 <HAL_GetTick>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d8f7      	bhi.n	8000bc8 <HAL_Delay+0x28>
  {
  }
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000008 	.word	0x20000008

08000be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c04:	4013      	ands	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1a:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	60d3      	str	r3, [r2, #12]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <__NVIC_GetPriorityGrouping+0x18>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	f003 0307 	and.w	r3, r3, #7
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	db0a      	blt.n	8000c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	490c      	ldr	r1, [pc, #48]	; (8000c98 <__NVIC_SetPriority+0x4c>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	0112      	lsls	r2, r2, #4
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c74:	e00a      	b.n	8000c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4908      	ldr	r1, [pc, #32]	; (8000c9c <__NVIC_SetPriority+0x50>)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	3b04      	subs	r3, #4
 8000c84:	0112      	lsls	r2, r2, #4
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	440b      	add	r3, r1
 8000c8a:	761a      	strb	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f1c3 0307 	rsb	r3, r3, #7
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	bf28      	it	cs
 8000cbe:	2304      	movcs	r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d902      	bls.n	8000cd0 <NVIC_EncodePriority+0x30>
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3b03      	subs	r3, #3
 8000cce:	e000      	b.n	8000cd2 <NVIC_EncodePriority+0x32>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43d9      	mvns	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	4313      	orrs	r3, r2
         );
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3724      	adds	r7, #36	; 0x24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d18:	d301      	bcc.n	8000d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00f      	b.n	8000d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <SysTick_Config+0x40>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d26:	210f      	movs	r1, #15
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f7ff ff8e 	bl	8000c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <SysTick_Config+0x40>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d36:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <SysTick_Config+0x40>)
 8000d38:	2207      	movs	r2, #7
 8000d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	e000e010 	.word	0xe000e010

08000d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff ff47 	bl	8000be8 <__NVIC_SetPriorityGrouping>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d74:	f7ff ff5c 	bl	8000c30 <__NVIC_GetPriorityGrouping>
 8000d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f7ff ff8e 	bl	8000ca0 <NVIC_EncodePriority>
 8000d84:	4602      	mov	r2, r0
 8000d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff5d 	bl	8000c4c <__NVIC_SetPriority>
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ffb0 	bl	8000d08 <SysTick_Config>
 8000da8:	4603      	mov	r3, r0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
 8000dce:	e159      	b.n	8001084 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	f040 8148 	bne.w	800107e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d005      	beq.n	8000e06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d130      	bne.n	8000e68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	2203      	movs	r2, #3
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	68da      	ldr	r2, [r3, #12]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	091b      	lsrs	r3, r3, #4
 8000e52:	f003 0201 	and.w	r2, r3, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	d017      	beq.n	8000ea4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d123      	bne.n	8000ef8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	08da      	lsrs	r2, r3, #3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3208      	adds	r2, #8
 8000eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	f003 0307 	and.w	r3, r3, #7
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	220f      	movs	r2, #15
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	691a      	ldr	r2, [r3, #16]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	08da      	lsrs	r2, r3, #3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3208      	adds	r2, #8
 8000ef2:	69b9      	ldr	r1, [r7, #24]
 8000ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0203 	and.w	r2, r3, #3
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f000 80a2 	beq.w	800107e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b57      	ldr	r3, [pc, #348]	; (800109c <HAL_GPIO_Init+0x2e8>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	4a56      	ldr	r2, [pc, #344]	; (800109c <HAL_GPIO_Init+0x2e8>)
 8000f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f48:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4a:	4b54      	ldr	r3, [pc, #336]	; (800109c <HAL_GPIO_Init+0x2e8>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f56:	4a52      	ldr	r2, [pc, #328]	; (80010a0 <HAL_GPIO_Init+0x2ec>)
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	089b      	lsrs	r3, r3, #2
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	220f      	movs	r2, #15
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a49      	ldr	r2, [pc, #292]	; (80010a4 <HAL_GPIO_Init+0x2f0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d019      	beq.n	8000fb6 <HAL_GPIO_Init+0x202>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a48      	ldr	r2, [pc, #288]	; (80010a8 <HAL_GPIO_Init+0x2f4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d013      	beq.n	8000fb2 <HAL_GPIO_Init+0x1fe>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a47      	ldr	r2, [pc, #284]	; (80010ac <HAL_GPIO_Init+0x2f8>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d00d      	beq.n	8000fae <HAL_GPIO_Init+0x1fa>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a46      	ldr	r2, [pc, #280]	; (80010b0 <HAL_GPIO_Init+0x2fc>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d007      	beq.n	8000faa <HAL_GPIO_Init+0x1f6>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a45      	ldr	r2, [pc, #276]	; (80010b4 <HAL_GPIO_Init+0x300>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d101      	bne.n	8000fa6 <HAL_GPIO_Init+0x1f2>
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	e008      	b.n	8000fb8 <HAL_GPIO_Init+0x204>
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x204>
 8000faa:	2303      	movs	r3, #3
 8000fac:	e004      	b.n	8000fb8 <HAL_GPIO_Init+0x204>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_Init+0x204>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_GPIO_Init+0x204>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	69fa      	ldr	r2, [r7, #28]
 8000fba:	f002 0203 	and.w	r2, r2, #3
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	4093      	lsls	r3, r2
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc8:	4935      	ldr	r1, [pc, #212]	; (80010a0 <HAL_GPIO_Init+0x2ec>)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd6:	4b38      	ldr	r3, [pc, #224]	; (80010b8 <HAL_GPIO_Init+0x304>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffa:	4a2f      	ldr	r2, [pc, #188]	; (80010b8 <HAL_GPIO_Init+0x304>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001000:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <HAL_GPIO_Init+0x304>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001024:	4a24      	ldr	r2, [pc, #144]	; (80010b8 <HAL_GPIO_Init+0x304>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800102a:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <HAL_GPIO_Init+0x304>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800104e:	4a1a      	ldr	r2, [pc, #104]	; (80010b8 <HAL_GPIO_Init+0x304>)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001054:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <HAL_GPIO_Init+0x304>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001078:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <HAL_GPIO_Init+0x304>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3301      	adds	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	2b0f      	cmp	r3, #15
 8001088:	f67f aea2 	bls.w	8000dd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40013800 	.word	0x40013800
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020c00 	.word	0x40020c00
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40013c00 	.word	0x40013c00

080010bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	691a      	ldr	r2, [r3, #16]
 80010cc:	887b      	ldrh	r3, [r7, #2]
 80010ce:	4013      	ands	r3, r2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d002      	beq.n	80010da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	e001      	b.n	80010de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010de:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	807b      	strh	r3, [r7, #2]
 80010f8:	4613      	mov	r3, r2
 80010fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010fc:	787b      	ldrb	r3, [r7, #1]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001102:	887a      	ldrh	r2, [r7, #2]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001108:	e003      	b.n	8001112 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800110a:	887b      	ldrh	r3, [r7, #2]
 800110c:	041a      	lsls	r2, r3, #16
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	619a      	str	r2, [r3, #24]
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800111e:	b480      	push	{r7}
 8001120:	b085      	sub	sp, #20
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	460b      	mov	r3, r1
 8001128:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001130:	887a      	ldrh	r2, [r7, #2]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4013      	ands	r3, r2
 8001136:	041a      	lsls	r2, r3, #16
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	43d9      	mvns	r1, r3
 800113c:	887b      	ldrh	r3, [r7, #2]
 800113e:	400b      	ands	r3, r1
 8001140:	431a      	orrs	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	619a      	str	r2, [r3, #24]
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e267      	b.n	8001636 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b00      	cmp	r3, #0
 8001170:	d075      	beq.n	800125e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001172:	4b88      	ldr	r3, [pc, #544]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f003 030c 	and.w	r3, r3, #12
 800117a:	2b04      	cmp	r3, #4
 800117c:	d00c      	beq.n	8001198 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800117e:	4b85      	ldr	r3, [pc, #532]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001186:	2b08      	cmp	r3, #8
 8001188:	d112      	bne.n	80011b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800118a:	4b82      	ldr	r3, [pc, #520]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001196:	d10b      	bne.n	80011b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001198:	4b7e      	ldr	r3, [pc, #504]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d05b      	beq.n	800125c <HAL_RCC_OscConfig+0x108>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d157      	bne.n	800125c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e242      	b.n	8001636 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b8:	d106      	bne.n	80011c8 <HAL_RCC_OscConfig+0x74>
 80011ba:	4b76      	ldr	r3, [pc, #472]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a75      	ldr	r2, [pc, #468]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 80011c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	e01d      	b.n	8001204 <HAL_RCC_OscConfig+0xb0>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d0:	d10c      	bne.n	80011ec <HAL_RCC_OscConfig+0x98>
 80011d2:	4b70      	ldr	r3, [pc, #448]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a6f      	ldr	r2, [pc, #444]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 80011d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	4b6d      	ldr	r3, [pc, #436]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a6c      	ldr	r2, [pc, #432]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 80011e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e00b      	b.n	8001204 <HAL_RCC_OscConfig+0xb0>
 80011ec:	4b69      	ldr	r3, [pc, #420]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a68      	ldr	r2, [pc, #416]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 80011f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	4b66      	ldr	r3, [pc, #408]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a65      	ldr	r2, [pc, #404]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 80011fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d013      	beq.n	8001234 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120c:	f7ff fcbc 	bl	8000b88 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001214:	f7ff fcb8 	bl	8000b88 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b64      	cmp	r3, #100	; 0x64
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e207      	b.n	8001636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001226:	4b5b      	ldr	r3, [pc, #364]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0f0      	beq.n	8001214 <HAL_RCC_OscConfig+0xc0>
 8001232:	e014      	b.n	800125e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001234:	f7ff fca8 	bl	8000b88 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800123c:	f7ff fca4 	bl	8000b88 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b64      	cmp	r3, #100	; 0x64
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e1f3      	b.n	8001636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124e:	4b51      	ldr	r3, [pc, #324]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f0      	bne.n	800123c <HAL_RCC_OscConfig+0xe8>
 800125a:	e000      	b.n	800125e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d063      	beq.n	8001332 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800126a:	4b4a      	ldr	r3, [pc, #296]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 030c 	and.w	r3, r3, #12
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00b      	beq.n	800128e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001276:	4b47      	ldr	r3, [pc, #284]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800127e:	2b08      	cmp	r3, #8
 8001280:	d11c      	bne.n	80012bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001282:	4b44      	ldr	r3, [pc, #272]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d116      	bne.n	80012bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128e:	4b41      	ldr	r3, [pc, #260]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d005      	beq.n	80012a6 <HAL_RCC_OscConfig+0x152>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d001      	beq.n	80012a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e1c7      	b.n	8001636 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a6:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	4937      	ldr	r1, [pc, #220]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ba:	e03a      	b.n	8001332 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d020      	beq.n	8001306 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c4:	4b34      	ldr	r3, [pc, #208]	; (8001398 <HAL_RCC_OscConfig+0x244>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ca:	f7ff fc5d 	bl	8000b88 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d2:	f7ff fc59 	bl	8000b88 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e1a8      	b.n	8001636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e4:	4b2b      	ldr	r3, [pc, #172]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0f0      	beq.n	80012d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f0:	4b28      	ldr	r3, [pc, #160]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	4925      	ldr	r1, [pc, #148]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 8001300:	4313      	orrs	r3, r2
 8001302:	600b      	str	r3, [r1, #0]
 8001304:	e015      	b.n	8001332 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001306:	4b24      	ldr	r3, [pc, #144]	; (8001398 <HAL_RCC_OscConfig+0x244>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130c:	f7ff fc3c 	bl	8000b88 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001314:	f7ff fc38 	bl	8000b88 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e187      	b.n	8001636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001326:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d036      	beq.n	80013ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d016      	beq.n	8001374 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_RCC_OscConfig+0x248>)
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800134c:	f7ff fc1c 	bl	8000b88 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001354:	f7ff fc18 	bl	8000b88 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e167      	b.n	8001636 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_RCC_OscConfig+0x240>)
 8001368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f0      	beq.n	8001354 <HAL_RCC_OscConfig+0x200>
 8001372:	e01b      	b.n	80013ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_RCC_OscConfig+0x248>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137a:	f7ff fc05 	bl	8000b88 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001380:	e00e      	b.n	80013a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001382:	f7ff fc01 	bl	8000b88 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d907      	bls.n	80013a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e150      	b.n	8001636 <HAL_RCC_OscConfig+0x4e2>
 8001394:	40023800 	.word	0x40023800
 8001398:	42470000 	.word	0x42470000
 800139c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a0:	4b88      	ldr	r3, [pc, #544]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 80013a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1ea      	bne.n	8001382 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 8097 	beq.w	80014e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013be:	4b81      	ldr	r3, [pc, #516]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10f      	bne.n	80013ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	4b7d      	ldr	r3, [pc, #500]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a7c      	ldr	r2, [pc, #496]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b7a      	ldr	r3, [pc, #488]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013e6:	2301      	movs	r3, #1
 80013e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ea:	4b77      	ldr	r3, [pc, #476]	; (80015c8 <HAL_RCC_OscConfig+0x474>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d118      	bne.n	8001428 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f6:	4b74      	ldr	r3, [pc, #464]	; (80015c8 <HAL_RCC_OscConfig+0x474>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a73      	ldr	r2, [pc, #460]	; (80015c8 <HAL_RCC_OscConfig+0x474>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001402:	f7ff fbc1 	bl	8000b88 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800140a:	f7ff fbbd 	bl	8000b88 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e10c      	b.n	8001636 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141c:	4b6a      	ldr	r3, [pc, #424]	; (80015c8 <HAL_RCC_OscConfig+0x474>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d106      	bne.n	800143e <HAL_RCC_OscConfig+0x2ea>
 8001430:	4b64      	ldr	r3, [pc, #400]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 8001432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001434:	4a63      	ldr	r2, [pc, #396]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6713      	str	r3, [r2, #112]	; 0x70
 800143c:	e01c      	b.n	8001478 <HAL_RCC_OscConfig+0x324>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2b05      	cmp	r3, #5
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0x30c>
 8001446:	4b5f      	ldr	r3, [pc, #380]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 8001448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144a:	4a5e      	ldr	r2, [pc, #376]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	6713      	str	r3, [r2, #112]	; 0x70
 8001452:	4b5c      	ldr	r3, [pc, #368]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 8001454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001456:	4a5b      	ldr	r2, [pc, #364]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6713      	str	r3, [r2, #112]	; 0x70
 800145e:	e00b      	b.n	8001478 <HAL_RCC_OscConfig+0x324>
 8001460:	4b58      	ldr	r3, [pc, #352]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 8001462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001464:	4a57      	ldr	r2, [pc, #348]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 8001466:	f023 0301 	bic.w	r3, r3, #1
 800146a:	6713      	str	r3, [r2, #112]	; 0x70
 800146c:	4b55      	ldr	r3, [pc, #340]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 800146e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001470:	4a54      	ldr	r2, [pc, #336]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 8001472:	f023 0304 	bic.w	r3, r3, #4
 8001476:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d015      	beq.n	80014ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001480:	f7ff fb82 	bl	8000b88 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001486:	e00a      	b.n	800149e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001488:	f7ff fb7e 	bl	8000b88 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f241 3288 	movw	r2, #5000	; 0x1388
 8001496:	4293      	cmp	r3, r2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e0cb      	b.n	8001636 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800149e:	4b49      	ldr	r3, [pc, #292]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 80014a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0ee      	beq.n	8001488 <HAL_RCC_OscConfig+0x334>
 80014aa:	e014      	b.n	80014d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ac:	f7ff fb6c 	bl	8000b88 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b2:	e00a      	b.n	80014ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b4:	f7ff fb68 	bl	8000b88 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e0b5      	b.n	8001636 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ca:	4b3e      	ldr	r3, [pc, #248]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 80014cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1ee      	bne.n	80014b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014d6:	7dfb      	ldrb	r3, [r7, #23]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d105      	bne.n	80014e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014dc:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	4a38      	ldr	r2, [pc, #224]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 80014e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 80a1 	beq.w	8001634 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014f2:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d05c      	beq.n	80015b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d141      	bne.n	800158a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001506:	4b31      	ldr	r3, [pc, #196]	; (80015cc <HAL_RCC_OscConfig+0x478>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150c:	f7ff fb3c 	bl	8000b88 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001514:	f7ff fb38 	bl	8000b88 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e087      	b.n	8001636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001526:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69da      	ldr	r2, [r3, #28]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	019b      	lsls	r3, r3, #6
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001548:	085b      	lsrs	r3, r3, #1
 800154a:	3b01      	subs	r3, #1
 800154c:	041b      	lsls	r3, r3, #16
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001554:	061b      	lsls	r3, r3, #24
 8001556:	491b      	ldr	r1, [pc, #108]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 8001558:	4313      	orrs	r3, r2
 800155a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <HAL_RCC_OscConfig+0x478>)
 800155e:	2201      	movs	r2, #1
 8001560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001562:	f7ff fb11 	bl	8000b88 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800156a:	f7ff fb0d 	bl	8000b88 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e05c      	b.n	8001636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0x416>
 8001588:	e054      	b.n	8001634 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_RCC_OscConfig+0x478>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fafa 	bl	8000b88 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001598:	f7ff faf6 	bl	8000b88 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e045      	b.n	8001636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_RCC_OscConfig+0x470>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x444>
 80015b6:	e03d      	b.n	8001634 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d107      	bne.n	80015d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e038      	b.n	8001636 <HAL_RCC_OscConfig+0x4e2>
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40007000 	.word	0x40007000
 80015cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <HAL_RCC_OscConfig+0x4ec>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d028      	beq.n	8001630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d121      	bne.n	8001630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d11a      	bne.n	8001630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001600:	4013      	ands	r3, r2
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001606:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001608:	4293      	cmp	r3, r2
 800160a:	d111      	bne.n	8001630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001616:	085b      	lsrs	r3, r3, #1
 8001618:	3b01      	subs	r3, #1
 800161a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800161c:	429a      	cmp	r2, r3
 800161e:	d107      	bne.n	8001630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800162c:	429a      	cmp	r2, r3
 800162e:	d001      	beq.n	8001634 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e000      	b.n	8001636 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800

08001644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0cc      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001658:	4b68      	ldr	r3, [pc, #416]	; (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d90c      	bls.n	8001680 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001666:	4b65      	ldr	r3, [pc, #404]	; (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166e:	4b63      	ldr	r3, [pc, #396]	; (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	d001      	beq.n	8001680 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e0b8      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d020      	beq.n	80016ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001698:	4b59      	ldr	r3, [pc, #356]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	4a58      	ldr	r2, [pc, #352]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016b0:	4b53      	ldr	r3, [pc, #332]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	4a52      	ldr	r2, [pc, #328]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016bc:	4b50      	ldr	r3, [pc, #320]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	494d      	ldr	r1, [pc, #308]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d044      	beq.n	8001764 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d107      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e2:	4b47      	ldr	r3, [pc, #284]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d119      	bne.n	8001722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e07f      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d003      	beq.n	8001702 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d107      	bne.n	8001712 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001702:	4b3f      	ldr	r3, [pc, #252]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d109      	bne.n	8001722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e06f      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001712:	4b3b      	ldr	r3, [pc, #236]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e067      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001722:	4b37      	ldr	r3, [pc, #220]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f023 0203 	bic.w	r2, r3, #3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4934      	ldr	r1, [pc, #208]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	4313      	orrs	r3, r2
 8001732:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001734:	f7ff fa28 	bl	8000b88 <HAL_GetTick>
 8001738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173a:	e00a      	b.n	8001752 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800173c:	f7ff fa24 	bl	8000b88 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f241 3288 	movw	r2, #5000	; 0x1388
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e04f      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001752:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 020c 	and.w	r2, r3, #12
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	429a      	cmp	r2, r3
 8001762:	d1eb      	bne.n	800173c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001764:	4b25      	ldr	r3, [pc, #148]	; (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d20c      	bcs.n	800178c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001772:	4b22      	ldr	r3, [pc, #136]	; (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177a:	4b20      	ldr	r3, [pc, #128]	; (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e032      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	4916      	ldr	r1, [pc, #88]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d009      	beq.n	80017ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	490e      	ldr	r1, [pc, #56]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ca:	f000 f821 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 80017ce:	4602      	mov	r2, r0
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	091b      	lsrs	r3, r3, #4
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	490a      	ldr	r1, [pc, #40]	; (8001804 <HAL_RCC_ClockConfig+0x1c0>)
 80017dc:	5ccb      	ldrb	r3, [r1, r3]
 80017de:	fa22 f303 	lsr.w	r3, r2, r3
 80017e2:	4a09      	ldr	r2, [pc, #36]	; (8001808 <HAL_RCC_ClockConfig+0x1c4>)
 80017e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_RCC_ClockConfig+0x1c8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff f988 	bl	8000b00 <HAL_InitTick>

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023c00 	.word	0x40023c00
 8001800:	40023800 	.word	0x40023800
 8001804:	080035cc 	.word	0x080035cc
 8001808:	20000000 	.word	0x20000000
 800180c:	20000004 	.word	0x20000004

08001810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001814:	b094      	sub	sp, #80	; 0x50
 8001816:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	647b      	str	r3, [r7, #68]	; 0x44
 800181c:	2300      	movs	r3, #0
 800181e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001820:	2300      	movs	r3, #0
 8001822:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001828:	4b79      	ldr	r3, [pc, #484]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x200>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 030c 	and.w	r3, r3, #12
 8001830:	2b08      	cmp	r3, #8
 8001832:	d00d      	beq.n	8001850 <HAL_RCC_GetSysClockFreq+0x40>
 8001834:	2b08      	cmp	r3, #8
 8001836:	f200 80e1 	bhi.w	80019fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800183a:	2b00      	cmp	r3, #0
 800183c:	d002      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x34>
 800183e:	2b04      	cmp	r3, #4
 8001840:	d003      	beq.n	800184a <HAL_RCC_GetSysClockFreq+0x3a>
 8001842:	e0db      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001844:	4b73      	ldr	r3, [pc, #460]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001846:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001848:	e0db      	b.n	8001a02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800184a:	4b73      	ldr	r3, [pc, #460]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x208>)
 800184c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800184e:	e0d8      	b.n	8001a02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001850:	4b6f      	ldr	r3, [pc, #444]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001858:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800185a:	4b6d      	ldr	r3, [pc, #436]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x200>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d063      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001866:	4b6a      	ldr	r3, [pc, #424]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	099b      	lsrs	r3, r3, #6
 800186c:	2200      	movs	r2, #0
 800186e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001870:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001878:	633b      	str	r3, [r7, #48]	; 0x30
 800187a:	2300      	movs	r3, #0
 800187c:	637b      	str	r3, [r7, #52]	; 0x34
 800187e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001882:	4622      	mov	r2, r4
 8001884:	462b      	mov	r3, r5
 8001886:	f04f 0000 	mov.w	r0, #0
 800188a:	f04f 0100 	mov.w	r1, #0
 800188e:	0159      	lsls	r1, r3, #5
 8001890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001894:	0150      	lsls	r0, r2, #5
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4621      	mov	r1, r4
 800189c:	1a51      	subs	r1, r2, r1
 800189e:	6139      	str	r1, [r7, #16]
 80018a0:	4629      	mov	r1, r5
 80018a2:	eb63 0301 	sbc.w	r3, r3, r1
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018b4:	4659      	mov	r1, fp
 80018b6:	018b      	lsls	r3, r1, #6
 80018b8:	4651      	mov	r1, sl
 80018ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018be:	4651      	mov	r1, sl
 80018c0:	018a      	lsls	r2, r1, #6
 80018c2:	4651      	mov	r1, sl
 80018c4:	ebb2 0801 	subs.w	r8, r2, r1
 80018c8:	4659      	mov	r1, fp
 80018ca:	eb63 0901 	sbc.w	r9, r3, r1
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018e2:	4690      	mov	r8, r2
 80018e4:	4699      	mov	r9, r3
 80018e6:	4623      	mov	r3, r4
 80018e8:	eb18 0303 	adds.w	r3, r8, r3
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	462b      	mov	r3, r5
 80018f0:	eb49 0303 	adc.w	r3, r9, r3
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001902:	4629      	mov	r1, r5
 8001904:	024b      	lsls	r3, r1, #9
 8001906:	4621      	mov	r1, r4
 8001908:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800190c:	4621      	mov	r1, r4
 800190e:	024a      	lsls	r2, r1, #9
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001916:	2200      	movs	r2, #0
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
 800191a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800191c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001920:	f7fe fc5e 	bl	80001e0 <__aeabi_uldivmod>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4613      	mov	r3, r2
 800192a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800192c:	e058      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800192e:	4b38      	ldr	r3, [pc, #224]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	099b      	lsrs	r3, r3, #6
 8001934:	2200      	movs	r2, #0
 8001936:	4618      	mov	r0, r3
 8001938:	4611      	mov	r1, r2
 800193a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800193e:	623b      	str	r3, [r7, #32]
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
 8001944:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001948:	4642      	mov	r2, r8
 800194a:	464b      	mov	r3, r9
 800194c:	f04f 0000 	mov.w	r0, #0
 8001950:	f04f 0100 	mov.w	r1, #0
 8001954:	0159      	lsls	r1, r3, #5
 8001956:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800195a:	0150      	lsls	r0, r2, #5
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4641      	mov	r1, r8
 8001962:	ebb2 0a01 	subs.w	sl, r2, r1
 8001966:	4649      	mov	r1, r9
 8001968:	eb63 0b01 	sbc.w	fp, r3, r1
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001978:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800197c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001980:	ebb2 040a 	subs.w	r4, r2, sl
 8001984:	eb63 050b 	sbc.w	r5, r3, fp
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	00eb      	lsls	r3, r5, #3
 8001992:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001996:	00e2      	lsls	r2, r4, #3
 8001998:	4614      	mov	r4, r2
 800199a:	461d      	mov	r5, r3
 800199c:	4643      	mov	r3, r8
 800199e:	18e3      	adds	r3, r4, r3
 80019a0:	603b      	str	r3, [r7, #0]
 80019a2:	464b      	mov	r3, r9
 80019a4:	eb45 0303 	adc.w	r3, r5, r3
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019b6:	4629      	mov	r1, r5
 80019b8:	028b      	lsls	r3, r1, #10
 80019ba:	4621      	mov	r1, r4
 80019bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019c0:	4621      	mov	r1, r4
 80019c2:	028a      	lsls	r2, r1, #10
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ca:	2200      	movs	r2, #0
 80019cc:	61bb      	str	r3, [r7, #24]
 80019ce:	61fa      	str	r2, [r7, #28]
 80019d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019d4:	f7fe fc04 	bl	80001e0 <__aeabi_uldivmod>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4613      	mov	r3, r2
 80019de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x200>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	0c1b      	lsrs	r3, r3, #16
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	3301      	adds	r3, #1
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80019f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019fa:	e002      	b.n	8001a02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x204>)
 80019fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3750      	adds	r7, #80	; 0x50
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800
 8001a14:	00f42400 	.word	0x00f42400
 8001a18:	007a1200 	.word	0x007a1200

08001a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000000 	.word	0x20000000

08001a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a38:	f7ff fff0 	bl	8001a1c <HAL_RCC_GetHCLKFreq>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	0a9b      	lsrs	r3, r3, #10
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	4903      	ldr	r1, [pc, #12]	; (8001a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a4a:	5ccb      	ldrb	r3, [r1, r3]
 8001a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40023800 	.word	0x40023800
 8001a58:	080035dc 	.word	0x080035dc

08001a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a60:	f7ff ffdc 	bl	8001a1c <HAL_RCC_GetHCLKFreq>
 8001a64:	4602      	mov	r2, r0
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	0b5b      	lsrs	r3, r3, #13
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	4903      	ldr	r1, [pc, #12]	; (8001a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a72:	5ccb      	ldrb	r3, [r1, r3]
 8001a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	080035dc 	.word	0x080035dc

08001a84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e03f      	b.n	8001b16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7fe ff5e 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2224      	movs	r2, #36	; 0x24
 8001ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f829 	bl	8001b20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001adc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001aec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001afc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2220      	movs	r2, #32
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2220      	movs	r2, #32
 8001b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b24:	b0c0      	sub	sp, #256	; 0x100
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b3c:	68d9      	ldr	r1, [r3, #12]
 8001b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	ea40 0301 	orr.w	r3, r0, r1
 8001b48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	431a      	orrs	r2, r3
 8001b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001b78:	f021 010c 	bic.w	r1, r1, #12
 8001b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001b86:	430b      	orrs	r3, r1
 8001b88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b9a:	6999      	ldr	r1, [r3, #24]
 8001b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	ea40 0301 	orr.w	r3, r0, r1
 8001ba6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4b8f      	ldr	r3, [pc, #572]	; (8001dec <UART_SetConfig+0x2cc>)
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d005      	beq.n	8001bc0 <UART_SetConfig+0xa0>
 8001bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4b8d      	ldr	r3, [pc, #564]	; (8001df0 <UART_SetConfig+0x2d0>)
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d104      	bne.n	8001bca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001bc0:	f7ff ff4c 	bl	8001a5c <HAL_RCC_GetPCLK2Freq>
 8001bc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001bc8:	e003      	b.n	8001bd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001bca:	f7ff ff33 	bl	8001a34 <HAL_RCC_GetPCLK1Freq>
 8001bce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bdc:	f040 810c 	bne.w	8001df8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001be4:	2200      	movs	r2, #0
 8001be6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001bea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001bee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	462b      	mov	r3, r5
 8001bf6:	1891      	adds	r1, r2, r2
 8001bf8:	65b9      	str	r1, [r7, #88]	; 0x58
 8001bfa:	415b      	adcs	r3, r3
 8001bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c02:	4621      	mov	r1, r4
 8001c04:	eb12 0801 	adds.w	r8, r2, r1
 8001c08:	4629      	mov	r1, r5
 8001c0a:	eb43 0901 	adc.w	r9, r3, r1
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c22:	4690      	mov	r8, r2
 8001c24:	4699      	mov	r9, r3
 8001c26:	4623      	mov	r3, r4
 8001c28:	eb18 0303 	adds.w	r3, r8, r3
 8001c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001c30:	462b      	mov	r3, r5
 8001c32:	eb49 0303 	adc.w	r3, r9, r3
 8001c36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001c4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001c4e:	460b      	mov	r3, r1
 8001c50:	18db      	adds	r3, r3, r3
 8001c52:	653b      	str	r3, [r7, #80]	; 0x50
 8001c54:	4613      	mov	r3, r2
 8001c56:	eb42 0303 	adc.w	r3, r2, r3
 8001c5a:	657b      	str	r3, [r7, #84]	; 0x54
 8001c5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001c64:	f7fe fabc 	bl	80001e0 <__aeabi_uldivmod>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4b61      	ldr	r3, [pc, #388]	; (8001df4 <UART_SetConfig+0x2d4>)
 8001c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	011c      	lsls	r4, r3, #4
 8001c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001c80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001c84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001c88:	4642      	mov	r2, r8
 8001c8a:	464b      	mov	r3, r9
 8001c8c:	1891      	adds	r1, r2, r2
 8001c8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8001c90:	415b      	adcs	r3, r3
 8001c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c98:	4641      	mov	r1, r8
 8001c9a:	eb12 0a01 	adds.w	sl, r2, r1
 8001c9e:	4649      	mov	r1, r9
 8001ca0:	eb43 0b01 	adc.w	fp, r3, r1
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001cb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001cb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001cb8:	4692      	mov	sl, r2
 8001cba:	469b      	mov	fp, r3
 8001cbc:	4643      	mov	r3, r8
 8001cbe:	eb1a 0303 	adds.w	r3, sl, r3
 8001cc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001cc6:	464b      	mov	r3, r9
 8001cc8:	eb4b 0303 	adc.w	r3, fp, r3
 8001ccc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001cdc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001ce0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	18db      	adds	r3, r3, r3
 8001ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8001cea:	4613      	mov	r3, r2
 8001cec:	eb42 0303 	adc.w	r3, r2, r3
 8001cf0:	647b      	str	r3, [r7, #68]	; 0x44
 8001cf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001cf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001cfa:	f7fe fa71 	bl	80001e0 <__aeabi_uldivmod>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4611      	mov	r1, r2
 8001d04:	4b3b      	ldr	r3, [pc, #236]	; (8001df4 <UART_SetConfig+0x2d4>)
 8001d06:	fba3 2301 	umull	r2, r3, r3, r1
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	2264      	movs	r2, #100	; 0x64
 8001d0e:	fb02 f303 	mul.w	r3, r2, r3
 8001d12:	1acb      	subs	r3, r1, r3
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001d1a:	4b36      	ldr	r3, [pc, #216]	; (8001df4 <UART_SetConfig+0x2d4>)
 8001d1c:	fba3 2302 	umull	r2, r3, r3, r2
 8001d20:	095b      	lsrs	r3, r3, #5
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d28:	441c      	add	r4, r3
 8001d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001d38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001d3c:	4642      	mov	r2, r8
 8001d3e:	464b      	mov	r3, r9
 8001d40:	1891      	adds	r1, r2, r2
 8001d42:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d44:	415b      	adcs	r3, r3
 8001d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d4c:	4641      	mov	r1, r8
 8001d4e:	1851      	adds	r1, r2, r1
 8001d50:	6339      	str	r1, [r7, #48]	; 0x30
 8001d52:	4649      	mov	r1, r9
 8001d54:	414b      	adcs	r3, r1
 8001d56:	637b      	str	r3, [r7, #52]	; 0x34
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	f04f 0300 	mov.w	r3, #0
 8001d60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001d64:	4659      	mov	r1, fp
 8001d66:	00cb      	lsls	r3, r1, #3
 8001d68:	4651      	mov	r1, sl
 8001d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d6e:	4651      	mov	r1, sl
 8001d70:	00ca      	lsls	r2, r1, #3
 8001d72:	4610      	mov	r0, r2
 8001d74:	4619      	mov	r1, r3
 8001d76:	4603      	mov	r3, r0
 8001d78:	4642      	mov	r2, r8
 8001d7a:	189b      	adds	r3, r3, r2
 8001d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001d80:	464b      	mov	r3, r9
 8001d82:	460a      	mov	r2, r1
 8001d84:	eb42 0303 	adc.w	r3, r2, r3
 8001d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001d98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001d9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001da0:	460b      	mov	r3, r1
 8001da2:	18db      	adds	r3, r3, r3
 8001da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001da6:	4613      	mov	r3, r2
 8001da8:	eb42 0303 	adc.w	r3, r2, r3
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001db2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001db6:	f7fe fa13 	bl	80001e0 <__aeabi_uldivmod>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <UART_SetConfig+0x2d4>)
 8001dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8001dc4:	095b      	lsrs	r3, r3, #5
 8001dc6:	2164      	movs	r1, #100	; 0x64
 8001dc8:	fb01 f303 	mul.w	r3, r1, r3
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	3332      	adds	r3, #50	; 0x32
 8001dd2:	4a08      	ldr	r2, [pc, #32]	; (8001df4 <UART_SetConfig+0x2d4>)
 8001dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd8:	095b      	lsrs	r3, r3, #5
 8001dda:	f003 0207 	and.w	r2, r3, #7
 8001dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4422      	add	r2, r4
 8001de6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001de8:	e105      	b.n	8001ff6 <UART_SetConfig+0x4d6>
 8001dea:	bf00      	nop
 8001dec:	40011000 	.word	0x40011000
 8001df0:	40011400 	.word	0x40011400
 8001df4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001e02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001e06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001e0a:	4642      	mov	r2, r8
 8001e0c:	464b      	mov	r3, r9
 8001e0e:	1891      	adds	r1, r2, r2
 8001e10:	6239      	str	r1, [r7, #32]
 8001e12:	415b      	adcs	r3, r3
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
 8001e16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e1a:	4641      	mov	r1, r8
 8001e1c:	1854      	adds	r4, r2, r1
 8001e1e:	4649      	mov	r1, r9
 8001e20:	eb43 0501 	adc.w	r5, r3, r1
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	00eb      	lsls	r3, r5, #3
 8001e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e32:	00e2      	lsls	r2, r4, #3
 8001e34:	4614      	mov	r4, r2
 8001e36:	461d      	mov	r5, r3
 8001e38:	4643      	mov	r3, r8
 8001e3a:	18e3      	adds	r3, r4, r3
 8001e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e40:	464b      	mov	r3, r9
 8001e42:	eb45 0303 	adc.w	r3, r5, r3
 8001e46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001e66:	4629      	mov	r1, r5
 8001e68:	008b      	lsls	r3, r1, #2
 8001e6a:	4621      	mov	r1, r4
 8001e6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e70:	4621      	mov	r1, r4
 8001e72:	008a      	lsls	r2, r1, #2
 8001e74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001e78:	f7fe f9b2 	bl	80001e0 <__aeabi_uldivmod>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4b60      	ldr	r3, [pc, #384]	; (8002004 <UART_SetConfig+0x4e4>)
 8001e82:	fba3 2302 	umull	r2, r3, r3, r2
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	011c      	lsls	r4, r3, #4
 8001e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001e94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001e98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001e9c:	4642      	mov	r2, r8
 8001e9e:	464b      	mov	r3, r9
 8001ea0:	1891      	adds	r1, r2, r2
 8001ea2:	61b9      	str	r1, [r7, #24]
 8001ea4:	415b      	adcs	r3, r3
 8001ea6:	61fb      	str	r3, [r7, #28]
 8001ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eac:	4641      	mov	r1, r8
 8001eae:	1851      	adds	r1, r2, r1
 8001eb0:	6139      	str	r1, [r7, #16]
 8001eb2:	4649      	mov	r1, r9
 8001eb4:	414b      	adcs	r3, r1
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ec4:	4659      	mov	r1, fp
 8001ec6:	00cb      	lsls	r3, r1, #3
 8001ec8:	4651      	mov	r1, sl
 8001eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ece:	4651      	mov	r1, sl
 8001ed0:	00ca      	lsls	r2, r1, #3
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4642      	mov	r2, r8
 8001eda:	189b      	adds	r3, r3, r2
 8001edc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ee0:	464b      	mov	r3, r9
 8001ee2:	460a      	mov	r2, r1
 8001ee4:	eb42 0303 	adc.w	r3, r2, r3
 8001ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ef6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001f04:	4649      	mov	r1, r9
 8001f06:	008b      	lsls	r3, r1, #2
 8001f08:	4641      	mov	r1, r8
 8001f0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f0e:	4641      	mov	r1, r8
 8001f10:	008a      	lsls	r2, r1, #2
 8001f12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001f16:	f7fe f963 	bl	80001e0 <__aeabi_uldivmod>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4b39      	ldr	r3, [pc, #228]	; (8002004 <UART_SetConfig+0x4e4>)
 8001f20:	fba3 1302 	umull	r1, r3, r3, r2
 8001f24:	095b      	lsrs	r3, r3, #5
 8001f26:	2164      	movs	r1, #100	; 0x64
 8001f28:	fb01 f303 	mul.w	r3, r1, r3
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	3332      	adds	r3, #50	; 0x32
 8001f32:	4a34      	ldr	r2, [pc, #208]	; (8002004 <UART_SetConfig+0x4e4>)
 8001f34:	fba2 2303 	umull	r2, r3, r2, r3
 8001f38:	095b      	lsrs	r3, r3, #5
 8001f3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f3e:	441c      	add	r4, r3
 8001f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f44:	2200      	movs	r2, #0
 8001f46:	673b      	str	r3, [r7, #112]	; 0x70
 8001f48:	677a      	str	r2, [r7, #116]	; 0x74
 8001f4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001f4e:	4642      	mov	r2, r8
 8001f50:	464b      	mov	r3, r9
 8001f52:	1891      	adds	r1, r2, r2
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	415b      	adcs	r3, r3
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f5e:	4641      	mov	r1, r8
 8001f60:	1851      	adds	r1, r2, r1
 8001f62:	6039      	str	r1, [r7, #0]
 8001f64:	4649      	mov	r1, r9
 8001f66:	414b      	adcs	r3, r1
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001f76:	4659      	mov	r1, fp
 8001f78:	00cb      	lsls	r3, r1, #3
 8001f7a:	4651      	mov	r1, sl
 8001f7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f80:	4651      	mov	r1, sl
 8001f82:	00ca      	lsls	r2, r1, #3
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4642      	mov	r2, r8
 8001f8c:	189b      	adds	r3, r3, r2
 8001f8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f90:	464b      	mov	r3, r9
 8001f92:	460a      	mov	r2, r1
 8001f94:	eb42 0303 	adc.w	r3, r2, r3
 8001f98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	663b      	str	r3, [r7, #96]	; 0x60
 8001fa4:	667a      	str	r2, [r7, #100]	; 0x64
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001fb2:	4649      	mov	r1, r9
 8001fb4:	008b      	lsls	r3, r1, #2
 8001fb6:	4641      	mov	r1, r8
 8001fb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fbc:	4641      	mov	r1, r8
 8001fbe:	008a      	lsls	r2, r1, #2
 8001fc0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001fc4:	f7fe f90c 	bl	80001e0 <__aeabi_uldivmod>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <UART_SetConfig+0x4e4>)
 8001fce:	fba3 1302 	umull	r1, r3, r3, r2
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	2164      	movs	r1, #100	; 0x64
 8001fd6:	fb01 f303 	mul.w	r3, r1, r3
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	3332      	adds	r3, #50	; 0x32
 8001fe0:	4a08      	ldr	r2, [pc, #32]	; (8002004 <UART_SetConfig+0x4e4>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	095b      	lsrs	r3, r3, #5
 8001fe8:	f003 020f 	and.w	r2, r3, #15
 8001fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4422      	add	r2, r4
 8001ff4:	609a      	str	r2, [r3, #8]
}
 8001ff6:	bf00      	nop
 8001ff8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002002:	bf00      	nop
 8002004:	51eb851f 	.word	0x51eb851f

08002008 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800201a:	2b84      	cmp	r3, #132	; 0x84
 800201c:	d005      	beq.n	800202a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800201e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4413      	add	r3, r2
 8002026:	3303      	adds	r3, #3
 8002028:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800202a:	68fb      	ldr	r3, [r7, #12]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800203c:	f000 fade 	bl	80025fc <vTaskStartScheduler>
  
  return osOK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	bd80      	pop	{r7, pc}

08002046 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002046:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002048:	b089      	sub	sp, #36	; 0x24
 800204a:	af04      	add	r7, sp, #16
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d020      	beq.n	800209a <osThreadCreate+0x54>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d01c      	beq.n	800209a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685c      	ldr	r4, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681d      	ldr	r5, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691e      	ldr	r6, [r3, #16]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff ffc8 	bl	8002008 <makeFreeRtosPriority>
 8002078:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002082:	9202      	str	r2, [sp, #8]
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	9100      	str	r1, [sp, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	4632      	mov	r2, r6
 800208c:	4629      	mov	r1, r5
 800208e:	4620      	mov	r0, r4
 8002090:	f000 f8ed 	bl	800226e <xTaskCreateStatic>
 8002094:	4603      	mov	r3, r0
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	e01c      	b.n	80020d4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685c      	ldr	r4, [r3, #4]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020a6:	b29e      	uxth	r6, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ffaa 	bl	8002008 <makeFreeRtosPriority>
 80020b4:	4602      	mov	r2, r0
 80020b6:	f107 030c 	add.w	r3, r7, #12
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	9200      	str	r2, [sp, #0]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	4632      	mov	r2, r6
 80020c2:	4629      	mov	r1, r5
 80020c4:	4620      	mov	r0, r4
 80020c6:	f000 f92f 	bl	8002328 <xTaskCreate>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d001      	beq.n	80020d4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	e000      	b.n	80020d6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80020d4:	68fb      	ldr	r3, [r7, #12]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020de <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b084      	sub	sp, #16
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <osDelay+0x16>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	e000      	b.n	80020f6 <osDelay+0x18>
 80020f4:	2301      	movs	r3, #1
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 fa4c 	bl	8002594 <vTaskDelay>
  
  return osOK;
 80020fc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f103 0208 	add.w	r2, r3, #8
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f04f 32ff 	mov.w	r2, #4294967295
 800211e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f103 0208 	add.w	r2, r3, #8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f103 0208 	add.w	r2, r3, #8
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	601a      	str	r2, [r3, #0]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021be:	d103      	bne.n	80021c8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	e00c      	b.n	80021e2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3308      	adds	r3, #8
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	e002      	b.n	80021d6 <vListInsert+0x2e>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d2f6      	bcs.n	80021d0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	601a      	str	r2, [r3, #0]
}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6892      	ldr	r2, [r2, #8]
 8002230:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6852      	ldr	r2, [r2, #4]
 800223a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	429a      	cmp	r2, r3
 8002244:	d103      	bne.n	800224e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	1e5a      	subs	r2, r3, #1
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800226e:	b580      	push	{r7, lr}
 8002270:	b08e      	sub	sp, #56	; 0x38
 8002272:	af04      	add	r7, sp, #16
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800227c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10a      	bne.n	8002298 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002286:	f383 8811 	msr	BASEPRI, r3
 800228a:	f3bf 8f6f 	isb	sy
 800228e:	f3bf 8f4f 	dsb	sy
 8002292:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002294:	bf00      	nop
 8002296:	e7fe      	b.n	8002296 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10a      	bne.n	80022b4 <xTaskCreateStatic+0x46>
	__asm volatile
 800229e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a2:	f383 8811 	msr	BASEPRI, r3
 80022a6:	f3bf 8f6f 	isb	sy
 80022aa:	f3bf 8f4f 	dsb	sy
 80022ae:	61fb      	str	r3, [r7, #28]
}
 80022b0:	bf00      	nop
 80022b2:	e7fe      	b.n	80022b2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80022b4:	2354      	movs	r3, #84	; 0x54
 80022b6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b54      	cmp	r3, #84	; 0x54
 80022bc:	d00a      	beq.n	80022d4 <xTaskCreateStatic+0x66>
	__asm volatile
 80022be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c2:	f383 8811 	msr	BASEPRI, r3
 80022c6:	f3bf 8f6f 	isb	sy
 80022ca:	f3bf 8f4f 	dsb	sy
 80022ce:	61bb      	str	r3, [r7, #24]
}
 80022d0:	bf00      	nop
 80022d2:	e7fe      	b.n	80022d2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80022d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80022d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01e      	beq.n	800231a <xTaskCreateStatic+0xac>
 80022dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d01b      	beq.n	800231a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80022e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022ea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80022f4:	2300      	movs	r3, #0
 80022f6:	9303      	str	r3, [sp, #12]
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	9302      	str	r3, [sp, #8]
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68b9      	ldr	r1, [r7, #8]
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 f850 	bl	80023b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002312:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002314:	f000 f8d4 	bl	80024c0 <prvAddNewTaskToReadyList>
 8002318:	e001      	b.n	800231e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800231e:	697b      	ldr	r3, [r7, #20]
	}
 8002320:	4618      	mov	r0, r3
 8002322:	3728      	adds	r7, #40	; 0x28
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08c      	sub	sp, #48	; 0x30
 800232c:	af04      	add	r7, sp, #16
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	4613      	mov	r3, r2
 8002336:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002338:	88fb      	ldrh	r3, [r7, #6]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4618      	mov	r0, r3
 800233e:	f000 fee3 	bl	8003108 <pvPortMalloc>
 8002342:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00e      	beq.n	8002368 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800234a:	2054      	movs	r0, #84	; 0x54
 800234c:	f000 fedc 	bl	8003108 <pvPortMalloc>
 8002350:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	631a      	str	r2, [r3, #48]	; 0x30
 800235e:	e005      	b.n	800236c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002360:	6978      	ldr	r0, [r7, #20]
 8002362:	f000 ff9d 	bl	80032a0 <vPortFree>
 8002366:	e001      	b.n	800236c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002368:	2300      	movs	r3, #0
 800236a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d017      	beq.n	80023a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800237a:	88fa      	ldrh	r2, [r7, #6]
 800237c:	2300      	movs	r3, #0
 800237e:	9303      	str	r3, [sp, #12]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	9302      	str	r3, [sp, #8]
 8002384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002386:	9301      	str	r3, [sp, #4]
 8002388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68b9      	ldr	r1, [r7, #8]
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 f80e 	bl	80023b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002396:	69f8      	ldr	r0, [r7, #28]
 8002398:	f000 f892 	bl	80024c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800239c:	2301      	movs	r3, #1
 800239e:	61bb      	str	r3, [r7, #24]
 80023a0:	e002      	b.n	80023a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295
 80023a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80023a8:	69bb      	ldr	r3, [r7, #24]
	}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3720      	adds	r7, #32
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b088      	sub	sp, #32
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80023c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023ca:	3b01      	subs	r3, #1
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	f023 0307 	bic.w	r3, r3, #7
 80023d8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <prvInitialiseNewTask+0x48>
	__asm volatile
 80023e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e8:	f383 8811 	msr	BASEPRI, r3
 80023ec:	f3bf 8f6f 	isb	sy
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	617b      	str	r3, [r7, #20]
}
 80023f6:	bf00      	nop
 80023f8:	e7fe      	b.n	80023f8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d01f      	beq.n	8002440 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]
 8002404:	e012      	b.n	800242c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	4413      	add	r3, r2
 800240c:	7819      	ldrb	r1, [r3, #0]
 800240e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	4413      	add	r3, r2
 8002414:	3334      	adds	r3, #52	; 0x34
 8002416:	460a      	mov	r2, r1
 8002418:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	4413      	add	r3, r2
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d006      	beq.n	8002434 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3301      	adds	r3, #1
 800242a:	61fb      	str	r3, [r7, #28]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	2b0f      	cmp	r3, #15
 8002430:	d9e9      	bls.n	8002406 <prvInitialiseNewTask+0x54>
 8002432:	e000      	b.n	8002436 <prvInitialiseNewTask+0x84>
			{
				break;
 8002434:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800243e:	e003      	b.n	8002448 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244a:	2b06      	cmp	r3, #6
 800244c:	d901      	bls.n	8002452 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800244e:	2306      	movs	r3, #6
 8002450:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002456:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800245c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002460:	2200      	movs	r2, #0
 8002462:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002466:	3304      	adds	r3, #4
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fe6c 	bl	8002146 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002470:	3318      	adds	r3, #24
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fe67 	bl	8002146 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800247c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	f1c3 0207 	rsb	r2, r3, #7
 8002484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002486:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800248c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800248e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002490:	2200      	movs	r2, #0
 8002492:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	68f9      	ldr	r1, [r7, #12]
 80024a0:	69b8      	ldr	r0, [r7, #24]
 80024a2:	f000 fc23 	bl	8002cec <pxPortInitialiseStack>
 80024a6:	4602      	mov	r2, r0
 80024a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80024ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80024b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024b8:	bf00      	nop
 80024ba:	3720      	adds	r7, #32
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80024c8:	f000 fd3c 	bl	8002f44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80024cc:	4b2a      	ldr	r3, [pc, #168]	; (8002578 <prvAddNewTaskToReadyList+0xb8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	3301      	adds	r3, #1
 80024d2:	4a29      	ldr	r2, [pc, #164]	; (8002578 <prvAddNewTaskToReadyList+0xb8>)
 80024d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80024d6:	4b29      	ldr	r3, [pc, #164]	; (800257c <prvAddNewTaskToReadyList+0xbc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d109      	bne.n	80024f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80024de:	4a27      	ldr	r2, [pc, #156]	; (800257c <prvAddNewTaskToReadyList+0xbc>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80024e4:	4b24      	ldr	r3, [pc, #144]	; (8002578 <prvAddNewTaskToReadyList+0xb8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d110      	bne.n	800250e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80024ec:	f000 fabc 	bl	8002a68 <prvInitialiseTaskLists>
 80024f0:	e00d      	b.n	800250e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80024f2:	4b23      	ldr	r3, [pc, #140]	; (8002580 <prvAddNewTaskToReadyList+0xc0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <prvAddNewTaskToReadyList+0xbc>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	429a      	cmp	r2, r3
 8002506:	d802      	bhi.n	800250e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002508:	4a1c      	ldr	r2, [pc, #112]	; (800257c <prvAddNewTaskToReadyList+0xbc>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800250e:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <prvAddNewTaskToReadyList+0xc4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	3301      	adds	r3, #1
 8002514:	4a1b      	ldr	r2, [pc, #108]	; (8002584 <prvAddNewTaskToReadyList+0xc4>)
 8002516:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	2201      	movs	r2, #1
 800251e:	409a      	lsls	r2, r3
 8002520:	4b19      	ldr	r3, [pc, #100]	; (8002588 <prvAddNewTaskToReadyList+0xc8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4313      	orrs	r3, r2
 8002526:	4a18      	ldr	r2, [pc, #96]	; (8002588 <prvAddNewTaskToReadyList+0xc8>)
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4a15      	ldr	r2, [pc, #84]	; (800258c <prvAddNewTaskToReadyList+0xcc>)
 8002538:	441a      	add	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3304      	adds	r3, #4
 800253e:	4619      	mov	r1, r3
 8002540:	4610      	mov	r0, r2
 8002542:	f7ff fe0d 	bl	8002160 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002546:	f000 fd2d 	bl	8002fa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800254a:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <prvAddNewTaskToReadyList+0xc0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00e      	beq.n	8002570 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002552:	4b0a      	ldr	r3, [pc, #40]	; (800257c <prvAddNewTaskToReadyList+0xbc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	429a      	cmp	r2, r3
 800255e:	d207      	bcs.n	8002570 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <prvAddNewTaskToReadyList+0xd0>)
 8002562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	f3bf 8f4f 	dsb	sy
 800256c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	200003e4 	.word	0x200003e4
 800257c:	200002e4 	.word	0x200002e4
 8002580:	200003f0 	.word	0x200003f0
 8002584:	20000400 	.word	0x20000400
 8002588:	200003ec 	.word	0x200003ec
 800258c:	200002e8 	.word	0x200002e8
 8002590:	e000ed04 	.word	0xe000ed04

08002594 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d017      	beq.n	80025d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80025a6:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <vTaskDelay+0x60>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <vTaskDelay+0x30>
	__asm volatile
 80025ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b2:	f383 8811 	msr	BASEPRI, r3
 80025b6:	f3bf 8f6f 	isb	sy
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	60bb      	str	r3, [r7, #8]
}
 80025c0:	bf00      	nop
 80025c2:	e7fe      	b.n	80025c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80025c4:	f000 f87a 	bl	80026bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80025c8:	2100      	movs	r1, #0
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 fb28 	bl	8002c20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80025d0:	f000 f882 	bl	80026d8 <xTaskResumeAll>
 80025d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d107      	bne.n	80025ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <vTaskDelay+0x64>)
 80025de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	f3bf 8f4f 	dsb	sy
 80025e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80025ec:	bf00      	nop
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	2000040c 	.word	0x2000040c
 80025f8:	e000ed04 	.word	0xe000ed04

080025fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	; 0x28
 8002600:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002606:	2300      	movs	r3, #0
 8002608:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800260a:	463a      	mov	r2, r7
 800260c:	1d39      	adds	r1, r7, #4
 800260e:	f107 0308 	add.w	r3, r7, #8
 8002612:	4618      	mov	r0, r3
 8002614:	f7fd ff66 	bl	80004e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002618:	6839      	ldr	r1, [r7, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	9202      	str	r2, [sp, #8]
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	2300      	movs	r3, #0
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	2300      	movs	r3, #0
 8002628:	460a      	mov	r2, r1
 800262a:	491e      	ldr	r1, [pc, #120]	; (80026a4 <vTaskStartScheduler+0xa8>)
 800262c:	481e      	ldr	r0, [pc, #120]	; (80026a8 <vTaskStartScheduler+0xac>)
 800262e:	f7ff fe1e 	bl	800226e <xTaskCreateStatic>
 8002632:	4603      	mov	r3, r0
 8002634:	4a1d      	ldr	r2, [pc, #116]	; (80026ac <vTaskStartScheduler+0xb0>)
 8002636:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002638:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <vTaskStartScheduler+0xb0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002640:	2301      	movs	r3, #1
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	e001      	b.n	800264a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d116      	bne.n	800267e <vTaskStartScheduler+0x82>
	__asm volatile
 8002650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002654:	f383 8811 	msr	BASEPRI, r3
 8002658:	f3bf 8f6f 	isb	sy
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	613b      	str	r3, [r7, #16]
}
 8002662:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002664:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <vTaskStartScheduler+0xb4>)
 8002666:	f04f 32ff 	mov.w	r2, #4294967295
 800266a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <vTaskStartScheduler+0xb8>)
 800266e:	2201      	movs	r2, #1
 8002670:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <vTaskStartScheduler+0xbc>)
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002678:	f000 fbc2 	bl	8002e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800267c:	e00e      	b.n	800269c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002684:	d10a      	bne.n	800269c <vTaskStartScheduler+0xa0>
	__asm volatile
 8002686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268a:	f383 8811 	msr	BASEPRI, r3
 800268e:	f3bf 8f6f 	isb	sy
 8002692:	f3bf 8f4f 	dsb	sy
 8002696:	60fb      	str	r3, [r7, #12]
}
 8002698:	bf00      	nop
 800269a:	e7fe      	b.n	800269a <vTaskStartScheduler+0x9e>
}
 800269c:	bf00      	nop
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	080035c4 	.word	0x080035c4
 80026a8:	08002a39 	.word	0x08002a39
 80026ac:	20000408 	.word	0x20000408
 80026b0:	20000404 	.word	0x20000404
 80026b4:	200003f0 	.word	0x200003f0
 80026b8:	200003e8 	.word	0x200003e8

080026bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <vTaskSuspendAll+0x18>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	3301      	adds	r3, #1
 80026c6:	4a03      	ldr	r2, [pc, #12]	; (80026d4 <vTaskSuspendAll+0x18>)
 80026c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	2000040c 	.word	0x2000040c

080026d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80026e6:	4b41      	ldr	r3, [pc, #260]	; (80027ec <xTaskResumeAll+0x114>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10a      	bne.n	8002704 <xTaskResumeAll+0x2c>
	__asm volatile
 80026ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f2:	f383 8811 	msr	BASEPRI, r3
 80026f6:	f3bf 8f6f 	isb	sy
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	603b      	str	r3, [r7, #0]
}
 8002700:	bf00      	nop
 8002702:	e7fe      	b.n	8002702 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002704:	f000 fc1e 	bl	8002f44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002708:	4b38      	ldr	r3, [pc, #224]	; (80027ec <xTaskResumeAll+0x114>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	3b01      	subs	r3, #1
 800270e:	4a37      	ldr	r2, [pc, #220]	; (80027ec <xTaskResumeAll+0x114>)
 8002710:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002712:	4b36      	ldr	r3, [pc, #216]	; (80027ec <xTaskResumeAll+0x114>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d161      	bne.n	80027de <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800271a:	4b35      	ldr	r3, [pc, #212]	; (80027f0 <xTaskResumeAll+0x118>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d05d      	beq.n	80027de <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002722:	e02e      	b.n	8002782 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002724:	4b33      	ldr	r3, [pc, #204]	; (80027f4 <xTaskResumeAll+0x11c>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	3318      	adds	r3, #24
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fd72 	bl	800221a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	3304      	adds	r3, #4
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff fd6d 	bl	800221a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	2201      	movs	r2, #1
 8002746:	409a      	lsls	r2, r3
 8002748:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <xTaskResumeAll+0x120>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4313      	orrs	r3, r2
 800274e:	4a2a      	ldr	r2, [pc, #168]	; (80027f8 <xTaskResumeAll+0x120>)
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4a27      	ldr	r2, [pc, #156]	; (80027fc <xTaskResumeAll+0x124>)
 8002760:	441a      	add	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	3304      	adds	r3, #4
 8002766:	4619      	mov	r1, r3
 8002768:	4610      	mov	r0, r2
 800276a:	f7ff fcf9 	bl	8002160 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002772:	4b23      	ldr	r3, [pc, #140]	; (8002800 <xTaskResumeAll+0x128>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	429a      	cmp	r2, r3
 800277a:	d302      	bcc.n	8002782 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800277c:	4b21      	ldr	r3, [pc, #132]	; (8002804 <xTaskResumeAll+0x12c>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002782:	4b1c      	ldr	r3, [pc, #112]	; (80027f4 <xTaskResumeAll+0x11c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1cc      	bne.n	8002724 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002790:	f000 fa08 	bl	8002ba4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002794:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <xTaskResumeAll+0x130>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d010      	beq.n	80027c2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80027a0:	f000 f836 	bl	8002810 <xTaskIncrementTick>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80027aa:	4b16      	ldr	r3, [pc, #88]	; (8002804 <xTaskResumeAll+0x12c>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f1      	bne.n	80027a0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80027bc:	4b12      	ldr	r3, [pc, #72]	; (8002808 <xTaskResumeAll+0x130>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80027c2:	4b10      	ldr	r3, [pc, #64]	; (8002804 <xTaskResumeAll+0x12c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d009      	beq.n	80027de <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80027ca:	2301      	movs	r3, #1
 80027cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <xTaskResumeAll+0x134>)
 80027d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	f3bf 8f4f 	dsb	sy
 80027da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80027de:	f000 fbe1 	bl	8002fa4 <vPortExitCritical>

	return xAlreadyYielded;
 80027e2:	68bb      	ldr	r3, [r7, #8]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	2000040c 	.word	0x2000040c
 80027f0:	200003e4 	.word	0x200003e4
 80027f4:	200003a4 	.word	0x200003a4
 80027f8:	200003ec 	.word	0x200003ec
 80027fc:	200002e8 	.word	0x200002e8
 8002800:	200002e4 	.word	0x200002e4
 8002804:	200003f8 	.word	0x200003f8
 8002808:	200003f4 	.word	0x200003f4
 800280c:	e000ed04 	.word	0xe000ed04

08002810 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800281a:	4b4e      	ldr	r3, [pc, #312]	; (8002954 <xTaskIncrementTick+0x144>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f040 808e 	bne.w	8002940 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002824:	4b4c      	ldr	r3, [pc, #304]	; (8002958 <xTaskIncrementTick+0x148>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3301      	adds	r3, #1
 800282a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800282c:	4a4a      	ldr	r2, [pc, #296]	; (8002958 <xTaskIncrementTick+0x148>)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d120      	bne.n	800287a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002838:	4b48      	ldr	r3, [pc, #288]	; (800295c <xTaskIncrementTick+0x14c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <xTaskIncrementTick+0x48>
	__asm volatile
 8002842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002846:	f383 8811 	msr	BASEPRI, r3
 800284a:	f3bf 8f6f 	isb	sy
 800284e:	f3bf 8f4f 	dsb	sy
 8002852:	603b      	str	r3, [r7, #0]
}
 8002854:	bf00      	nop
 8002856:	e7fe      	b.n	8002856 <xTaskIncrementTick+0x46>
 8002858:	4b40      	ldr	r3, [pc, #256]	; (800295c <xTaskIncrementTick+0x14c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	4b40      	ldr	r3, [pc, #256]	; (8002960 <xTaskIncrementTick+0x150>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a3e      	ldr	r2, [pc, #248]	; (800295c <xTaskIncrementTick+0x14c>)
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	4a3e      	ldr	r2, [pc, #248]	; (8002960 <xTaskIncrementTick+0x150>)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	4b3d      	ldr	r3, [pc, #244]	; (8002964 <xTaskIncrementTick+0x154>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	3301      	adds	r3, #1
 8002872:	4a3c      	ldr	r2, [pc, #240]	; (8002964 <xTaskIncrementTick+0x154>)
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	f000 f995 	bl	8002ba4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800287a:	4b3b      	ldr	r3, [pc, #236]	; (8002968 <xTaskIncrementTick+0x158>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	429a      	cmp	r2, r3
 8002882:	d348      	bcc.n	8002916 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002884:	4b35      	ldr	r3, [pc, #212]	; (800295c <xTaskIncrementTick+0x14c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d104      	bne.n	8002898 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800288e:	4b36      	ldr	r3, [pc, #216]	; (8002968 <xTaskIncrementTick+0x158>)
 8002890:	f04f 32ff 	mov.w	r2, #4294967295
 8002894:	601a      	str	r2, [r3, #0]
					break;
 8002896:	e03e      	b.n	8002916 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002898:	4b30      	ldr	r3, [pc, #192]	; (800295c <xTaskIncrementTick+0x14c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d203      	bcs.n	80028b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80028b0:	4a2d      	ldr	r2, [pc, #180]	; (8002968 <xTaskIncrementTick+0x158>)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80028b6:	e02e      	b.n	8002916 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	3304      	adds	r3, #4
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fcac 	bl	800221a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d004      	beq.n	80028d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	3318      	adds	r3, #24
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fca3 	bl	800221a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	2201      	movs	r2, #1
 80028da:	409a      	lsls	r2, r3
 80028dc:	4b23      	ldr	r3, [pc, #140]	; (800296c <xTaskIncrementTick+0x15c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	4a22      	ldr	r2, [pc, #136]	; (800296c <xTaskIncrementTick+0x15c>)
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4a1f      	ldr	r2, [pc, #124]	; (8002970 <xTaskIncrementTick+0x160>)
 80028f4:	441a      	add	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	3304      	adds	r3, #4
 80028fa:	4619      	mov	r1, r3
 80028fc:	4610      	mov	r0, r2
 80028fe:	f7ff fc2f 	bl	8002160 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002906:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <xTaskIncrementTick+0x164>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	429a      	cmp	r2, r3
 800290e:	d3b9      	bcc.n	8002884 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002910:	2301      	movs	r3, #1
 8002912:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002914:	e7b6      	b.n	8002884 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002916:	4b17      	ldr	r3, [pc, #92]	; (8002974 <xTaskIncrementTick+0x164>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800291c:	4914      	ldr	r1, [pc, #80]	; (8002970 <xTaskIncrementTick+0x160>)
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d901      	bls.n	8002932 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800292e:	2301      	movs	r3, #1
 8002930:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <xTaskIncrementTick+0x168>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d007      	beq.n	800294a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800293a:	2301      	movs	r3, #1
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	e004      	b.n	800294a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002940:	4b0e      	ldr	r3, [pc, #56]	; (800297c <xTaskIncrementTick+0x16c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	4a0d      	ldr	r2, [pc, #52]	; (800297c <xTaskIncrementTick+0x16c>)
 8002948:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800294a:	697b      	ldr	r3, [r7, #20]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	2000040c 	.word	0x2000040c
 8002958:	200003e8 	.word	0x200003e8
 800295c:	2000039c 	.word	0x2000039c
 8002960:	200003a0 	.word	0x200003a0
 8002964:	200003fc 	.word	0x200003fc
 8002968:	20000404 	.word	0x20000404
 800296c:	200003ec 	.word	0x200003ec
 8002970:	200002e8 	.word	0x200002e8
 8002974:	200002e4 	.word	0x200002e4
 8002978:	200003f8 	.word	0x200003f8
 800297c:	200003f4 	.word	0x200003f4

08002980 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002986:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <vTaskSwitchContext+0xa4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800298e:	4b26      	ldr	r3, [pc, #152]	; (8002a28 <vTaskSwitchContext+0xa8>)
 8002990:	2201      	movs	r2, #1
 8002992:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002994:	e03f      	b.n	8002a16 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002996:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <vTaskSwitchContext+0xa8>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800299c:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <vTaskSwitchContext+0xac>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	fab3 f383 	clz	r3, r3
 80029a8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80029aa:	7afb      	ldrb	r3, [r7, #11]
 80029ac:	f1c3 031f 	rsb	r3, r3, #31
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	491f      	ldr	r1, [pc, #124]	; (8002a30 <vTaskSwitchContext+0xb0>)
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	440b      	add	r3, r1
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10a      	bne.n	80029dc <vTaskSwitchContext+0x5c>
	__asm volatile
 80029c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ca:	f383 8811 	msr	BASEPRI, r3
 80029ce:	f3bf 8f6f 	isb	sy
 80029d2:	f3bf 8f4f 	dsb	sy
 80029d6:	607b      	str	r3, [r7, #4]
}
 80029d8:	bf00      	nop
 80029da:	e7fe      	b.n	80029da <vTaskSwitchContext+0x5a>
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4a12      	ldr	r2, [pc, #72]	; (8002a30 <vTaskSwitchContext+0xb0>)
 80029e8:	4413      	add	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	3308      	adds	r3, #8
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d104      	bne.n	8002a0c <vTaskSwitchContext+0x8c>
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	4a08      	ldr	r2, [pc, #32]	; (8002a34 <vTaskSwitchContext+0xb4>)
 8002a14:	6013      	str	r3, [r2, #0]
}
 8002a16:	bf00      	nop
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	2000040c 	.word	0x2000040c
 8002a28:	200003f8 	.word	0x200003f8
 8002a2c:	200003ec 	.word	0x200003ec
 8002a30:	200002e8 	.word	0x200002e8
 8002a34:	200002e4 	.word	0x200002e4

08002a38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002a40:	f000 f852 	bl	8002ae8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <prvIdleTask+0x28>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d9f9      	bls.n	8002a40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <prvIdleTask+0x2c>)
 8002a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002a5c:	e7f0      	b.n	8002a40 <prvIdleTask+0x8>
 8002a5e:	bf00      	nop
 8002a60:	200002e8 	.word	0x200002e8
 8002a64:	e000ed04 	.word	0xe000ed04

08002a68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a6e:	2300      	movs	r3, #0
 8002a70:	607b      	str	r3, [r7, #4]
 8002a72:	e00c      	b.n	8002a8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4a12      	ldr	r2, [pc, #72]	; (8002ac8 <prvInitialiseTaskLists+0x60>)
 8002a80:	4413      	add	r3, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fb3f 	bl	8002106 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b06      	cmp	r3, #6
 8002a92:	d9ef      	bls.n	8002a74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002a94:	480d      	ldr	r0, [pc, #52]	; (8002acc <prvInitialiseTaskLists+0x64>)
 8002a96:	f7ff fb36 	bl	8002106 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002a9a:	480d      	ldr	r0, [pc, #52]	; (8002ad0 <prvInitialiseTaskLists+0x68>)
 8002a9c:	f7ff fb33 	bl	8002106 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002aa0:	480c      	ldr	r0, [pc, #48]	; (8002ad4 <prvInitialiseTaskLists+0x6c>)
 8002aa2:	f7ff fb30 	bl	8002106 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002aa6:	480c      	ldr	r0, [pc, #48]	; (8002ad8 <prvInitialiseTaskLists+0x70>)
 8002aa8:	f7ff fb2d 	bl	8002106 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002aac:	480b      	ldr	r0, [pc, #44]	; (8002adc <prvInitialiseTaskLists+0x74>)
 8002aae:	f7ff fb2a 	bl	8002106 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <prvInitialiseTaskLists+0x78>)
 8002ab4:	4a05      	ldr	r2, [pc, #20]	; (8002acc <prvInitialiseTaskLists+0x64>)
 8002ab6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <prvInitialiseTaskLists+0x7c>)
 8002aba:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <prvInitialiseTaskLists+0x68>)
 8002abc:	601a      	str	r2, [r3, #0]
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	200002e8 	.word	0x200002e8
 8002acc:	20000374 	.word	0x20000374
 8002ad0:	20000388 	.word	0x20000388
 8002ad4:	200003a4 	.word	0x200003a4
 8002ad8:	200003b8 	.word	0x200003b8
 8002adc:	200003d0 	.word	0x200003d0
 8002ae0:	2000039c 	.word	0x2000039c
 8002ae4:	200003a0 	.word	0x200003a0

08002ae8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002aee:	e019      	b.n	8002b24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002af0:	f000 fa28 	bl	8002f44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002af4:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <prvCheckTasksWaitingTermination+0x50>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3304      	adds	r3, #4
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fb8a 	bl	800221a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002b06:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <prvCheckTasksWaitingTermination+0x54>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	4a0b      	ldr	r2, [pc, #44]	; (8002b3c <prvCheckTasksWaitingTermination+0x54>)
 8002b0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <prvCheckTasksWaitingTermination+0x58>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3b01      	subs	r3, #1
 8002b16:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <prvCheckTasksWaitingTermination+0x58>)
 8002b18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002b1a:	f000 fa43 	bl	8002fa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f810 	bl	8002b44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <prvCheckTasksWaitingTermination+0x58>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1e1      	bne.n	8002af0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	200003b8 	.word	0x200003b8
 8002b3c:	200003e4 	.word	0x200003e4
 8002b40:	200003cc 	.word	0x200003cc

08002b44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d108      	bne.n	8002b68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 fba0 	bl	80032a0 <vPortFree>
				vPortFree( pxTCB );
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fb9d 	bl	80032a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002b66:	e018      	b.n	8002b9a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d103      	bne.n	8002b7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 fb94 	bl	80032a0 <vPortFree>
	}
 8002b78:	e00f      	b.n	8002b9a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d00a      	beq.n	8002b9a <prvDeleteTCB+0x56>
	__asm volatile
 8002b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b88:	f383 8811 	msr	BASEPRI, r3
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	60fb      	str	r3, [r7, #12]
}
 8002b96:	bf00      	nop
 8002b98:	e7fe      	b.n	8002b98 <prvDeleteTCB+0x54>
	}
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002baa:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <prvResetNextTaskUnblockTime+0x38>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d104      	bne.n	8002bbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <prvResetNextTaskUnblockTime+0x3c>)
 8002bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002bbc:	e008      	b.n	8002bd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bbe:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <prvResetNextTaskUnblockTime+0x38>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <prvResetNextTaskUnblockTime+0x3c>)
 8002bce:	6013      	str	r3, [r2, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	2000039c 	.word	0x2000039c
 8002be0:	20000404 	.word	0x20000404

08002be4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002bea:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <xTaskGetSchedulerState+0x34>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d102      	bne.n	8002bf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	607b      	str	r3, [r7, #4]
 8002bf6:	e008      	b.n	8002c0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <xTaskGetSchedulerState+0x38>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d102      	bne.n	8002c06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002c00:	2302      	movs	r3, #2
 8002c02:	607b      	str	r3, [r7, #4]
 8002c04:	e001      	b.n	8002c0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002c0a:	687b      	ldr	r3, [r7, #4]
	}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	200003f0 	.word	0x200003f0
 8002c1c:	2000040c 	.word	0x2000040c

08002c20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002c2a:	4b29      	ldr	r3, [pc, #164]	; (8002cd0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c30:	4b28      	ldr	r3, [pc, #160]	; (8002cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	3304      	adds	r3, #4
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff faef 	bl	800221a <uxListRemove>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10b      	bne.n	8002c5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002c42:	4b24      	ldr	r3, [pc, #144]	; (8002cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	2201      	movs	r2, #1
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43da      	mvns	r2, r3
 8002c50:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4013      	ands	r3, r2
 8002c56:	4a20      	ldr	r2, [pc, #128]	; (8002cd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002c58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c60:	d10a      	bne.n	8002c78 <prvAddCurrentTaskToDelayedList+0x58>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d007      	beq.n	8002c78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c68:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	4619      	mov	r1, r3
 8002c70:	481a      	ldr	r0, [pc, #104]	; (8002cdc <prvAddCurrentTaskToDelayedList+0xbc>)
 8002c72:	f7ff fa75 	bl	8002160 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002c76:	e026      	b.n	8002cc6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002c80:	4b14      	ldr	r3, [pc, #80]	; (8002cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d209      	bcs.n	8002ca4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c90:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	f7ff fa83 	bl	80021a8 <vListInsert>
}
 8002ca2:	e010      	b.n	8002cc6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3304      	adds	r3, #4
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	f7ff fa79 	bl	80021a8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002cb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d202      	bcs.n	8002cc6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002cc0:	4a09      	ldr	r2, [pc, #36]	; (8002ce8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	6013      	str	r3, [r2, #0]
}
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	200003e8 	.word	0x200003e8
 8002cd4:	200002e4 	.word	0x200002e4
 8002cd8:	200003ec 	.word	0x200003ec
 8002cdc:	200003d0 	.word	0x200003d0
 8002ce0:	200003a0 	.word	0x200003a0
 8002ce4:	2000039c 	.word	0x2000039c
 8002ce8:	20000404 	.word	0x20000404

08002cec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3b04      	subs	r3, #4
 8002cfc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	3b04      	subs	r3, #4
 8002d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f023 0201 	bic.w	r2, r3, #1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	3b04      	subs	r3, #4
 8002d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002d1c:	4a0c      	ldr	r2, [pc, #48]	; (8002d50 <pxPortInitialiseStack+0x64>)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3b14      	subs	r3, #20
 8002d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	3b04      	subs	r3, #4
 8002d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f06f 0202 	mvn.w	r2, #2
 8002d3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	3b20      	subs	r3, #32
 8002d40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002d42:	68fb      	ldr	r3, [r7, #12]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	08002d55 	.word	0x08002d55

08002d54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002d5e:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <prvTaskExitError+0x54>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d66:	d00a      	beq.n	8002d7e <prvTaskExitError+0x2a>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	60fb      	str	r3, [r7, #12]
}
 8002d7a:	bf00      	nop
 8002d7c:	e7fe      	b.n	8002d7c <prvTaskExitError+0x28>
	__asm volatile
 8002d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	60bb      	str	r3, [r7, #8]
}
 8002d90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002d92:	bf00      	nop
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0fc      	beq.n	8002d94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002d9a:	bf00      	nop
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	2000000c 	.word	0x2000000c
 8002dac:	00000000 	.word	0x00000000

08002db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002db0:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <pxCurrentTCBConst2>)
 8002db2:	6819      	ldr	r1, [r3, #0]
 8002db4:	6808      	ldr	r0, [r1, #0]
 8002db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dba:	f380 8809 	msr	PSP, r0
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f04f 0000 	mov.w	r0, #0
 8002dc6:	f380 8811 	msr	BASEPRI, r0
 8002dca:	4770      	bx	lr
 8002dcc:	f3af 8000 	nop.w

08002dd0 <pxCurrentTCBConst2>:
 8002dd0:	200002e4 	.word	0x200002e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop

08002dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002dd8:	4808      	ldr	r0, [pc, #32]	; (8002dfc <prvPortStartFirstTask+0x24>)
 8002dda:	6800      	ldr	r0, [r0, #0]
 8002ddc:	6800      	ldr	r0, [r0, #0]
 8002dde:	f380 8808 	msr	MSP, r0
 8002de2:	f04f 0000 	mov.w	r0, #0
 8002de6:	f380 8814 	msr	CONTROL, r0
 8002dea:	b662      	cpsie	i
 8002dec:	b661      	cpsie	f
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	df00      	svc	0
 8002df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002dfa:	bf00      	nop
 8002dfc:	e000ed08 	.word	0xe000ed08

08002e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e06:	4b46      	ldr	r3, [pc, #280]	; (8002f20 <xPortStartScheduler+0x120>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a46      	ldr	r2, [pc, #280]	; (8002f24 <xPortStartScheduler+0x124>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d10a      	bne.n	8002e26 <xPortStartScheduler+0x26>
	__asm volatile
 8002e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	613b      	str	r3, [r7, #16]
}
 8002e22:	bf00      	nop
 8002e24:	e7fe      	b.n	8002e24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e26:	4b3e      	ldr	r3, [pc, #248]	; (8002f20 <xPortStartScheduler+0x120>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a3f      	ldr	r2, [pc, #252]	; (8002f28 <xPortStartScheduler+0x128>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d10a      	bne.n	8002e46 <xPortStartScheduler+0x46>
	__asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	60fb      	str	r3, [r7, #12]
}
 8002e42:	bf00      	nop
 8002e44:	e7fe      	b.n	8002e44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e46:	4b39      	ldr	r3, [pc, #228]	; (8002f2c <xPortStartScheduler+0x12c>)
 8002e48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	22ff      	movs	r2, #255	; 0xff
 8002e56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4b31      	ldr	r3, [pc, #196]	; (8002f30 <xPortStartScheduler+0x130>)
 8002e6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e6e:	4b31      	ldr	r3, [pc, #196]	; (8002f34 <xPortStartScheduler+0x134>)
 8002e70:	2207      	movs	r2, #7
 8002e72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e74:	e009      	b.n	8002e8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002e76:	4b2f      	ldr	r3, [pc, #188]	; (8002f34 <xPortStartScheduler+0x134>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	4a2d      	ldr	r2, [pc, #180]	; (8002f34 <xPortStartScheduler+0x134>)
 8002e7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e92:	2b80      	cmp	r3, #128	; 0x80
 8002e94:	d0ef      	beq.n	8002e76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e96:	4b27      	ldr	r3, [pc, #156]	; (8002f34 <xPortStartScheduler+0x134>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f1c3 0307 	rsb	r3, r3, #7
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d00a      	beq.n	8002eb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8002ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea6:	f383 8811 	msr	BASEPRI, r3
 8002eaa:	f3bf 8f6f 	isb	sy
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	60bb      	str	r3, [r7, #8]
}
 8002eb4:	bf00      	nop
 8002eb6:	e7fe      	b.n	8002eb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002eb8:	4b1e      	ldr	r3, [pc, #120]	; (8002f34 <xPortStartScheduler+0x134>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	021b      	lsls	r3, r3, #8
 8002ebe:	4a1d      	ldr	r2, [pc, #116]	; (8002f34 <xPortStartScheduler+0x134>)
 8002ec0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ec2:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <xPortStartScheduler+0x134>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002eca:	4a1a      	ldr	r2, [pc, #104]	; (8002f34 <xPortStartScheduler+0x134>)
 8002ecc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002ed6:	4b18      	ldr	r3, [pc, #96]	; (8002f38 <xPortStartScheduler+0x138>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a17      	ldr	r2, [pc, #92]	; (8002f38 <xPortStartScheduler+0x138>)
 8002edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ee0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <xPortStartScheduler+0x138>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <xPortStartScheduler+0x138>)
 8002ee8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002eec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002eee:	f000 f8dd 	bl	80030ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002ef2:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <xPortStartScheduler+0x13c>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002ef8:	f000 f8fc 	bl	80030f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002efc:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <xPortStartScheduler+0x140>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0f      	ldr	r2, [pc, #60]	; (8002f40 <xPortStartScheduler+0x140>)
 8002f02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002f06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002f08:	f7ff ff66 	bl	8002dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002f0c:	f7ff fd38 	bl	8002980 <vTaskSwitchContext>
	prvTaskExitError();
 8002f10:	f7ff ff20 	bl	8002d54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	e000ed00 	.word	0xe000ed00
 8002f24:	410fc271 	.word	0x410fc271
 8002f28:	410fc270 	.word	0x410fc270
 8002f2c:	e000e400 	.word	0xe000e400
 8002f30:	20000410 	.word	0x20000410
 8002f34:	20000414 	.word	0x20000414
 8002f38:	e000ed20 	.word	0xe000ed20
 8002f3c:	2000000c 	.word	0x2000000c
 8002f40:	e000ef34 	.word	0xe000ef34

08002f44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
	__asm volatile
 8002f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4e:	f383 8811 	msr	BASEPRI, r3
 8002f52:	f3bf 8f6f 	isb	sy
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	607b      	str	r3, [r7, #4]
}
 8002f5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002f5e:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <vPortEnterCritical+0x58>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3301      	adds	r3, #1
 8002f64:	4a0d      	ldr	r2, [pc, #52]	; (8002f9c <vPortEnterCritical+0x58>)
 8002f66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002f68:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <vPortEnterCritical+0x58>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d10f      	bne.n	8002f90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <vPortEnterCritical+0x5c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <vPortEnterCritical+0x4c>
	__asm volatile
 8002f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	603b      	str	r3, [r7, #0]
}
 8002f8c:	bf00      	nop
 8002f8e:	e7fe      	b.n	8002f8e <vPortEnterCritical+0x4a>
	}
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	2000000c 	.word	0x2000000c
 8002fa0:	e000ed04 	.word	0xe000ed04

08002fa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <vPortExitCritical+0x50>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10a      	bne.n	8002fc8 <vPortExitCritical+0x24>
	__asm volatile
 8002fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	607b      	str	r3, [r7, #4]
}
 8002fc4:	bf00      	nop
 8002fc6:	e7fe      	b.n	8002fc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <vPortExitCritical+0x50>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	4a09      	ldr	r2, [pc, #36]	; (8002ff4 <vPortExitCritical+0x50>)
 8002fd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002fd2:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <vPortExitCritical+0x50>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d105      	bne.n	8002fe6 <vPortExitCritical+0x42>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002fe4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	2000000c 	.word	0x2000000c
	...

08003000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003000:	f3ef 8009 	mrs	r0, PSP
 8003004:	f3bf 8f6f 	isb	sy
 8003008:	4b15      	ldr	r3, [pc, #84]	; (8003060 <pxCurrentTCBConst>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	f01e 0f10 	tst.w	lr, #16
 8003010:	bf08      	it	eq
 8003012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800301a:	6010      	str	r0, [r2, #0]
 800301c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003024:	f380 8811 	msr	BASEPRI, r0
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f7ff fca6 	bl	8002980 <vTaskSwitchContext>
 8003034:	f04f 0000 	mov.w	r0, #0
 8003038:	f380 8811 	msr	BASEPRI, r0
 800303c:	bc09      	pop	{r0, r3}
 800303e:	6819      	ldr	r1, [r3, #0]
 8003040:	6808      	ldr	r0, [r1, #0]
 8003042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003046:	f01e 0f10 	tst.w	lr, #16
 800304a:	bf08      	it	eq
 800304c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003050:	f380 8809 	msr	PSP, r0
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	f3af 8000 	nop.w

08003060 <pxCurrentTCBConst>:
 8003060:	200002e4 	.word	0x200002e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003064:	bf00      	nop
 8003066:	bf00      	nop

08003068 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
	__asm volatile
 800306e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003072:	f383 8811 	msr	BASEPRI, r3
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	607b      	str	r3, [r7, #4]
}
 8003080:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003082:	f7ff fbc5 	bl	8002810 <xTaskIncrementTick>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <xPortSysTickHandler+0x40>)
 800308e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	2300      	movs	r3, #0
 8003096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	f383 8811 	msr	BASEPRI, r3
}
 800309e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	e000ed04 	.word	0xe000ed04

080030ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <vPortSetupTimerInterrupt+0x34>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80030b6:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <vPortSetupTimerInterrupt+0x38>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80030bc:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <vPortSetupTimerInterrupt+0x3c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <vPortSetupTimerInterrupt+0x40>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	099b      	lsrs	r3, r3, #6
 80030c8:	4a09      	ldr	r2, [pc, #36]	; (80030f0 <vPortSetupTimerInterrupt+0x44>)
 80030ca:	3b01      	subs	r3, #1
 80030cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80030ce:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <vPortSetupTimerInterrupt+0x34>)
 80030d0:	2207      	movs	r2, #7
 80030d2:	601a      	str	r2, [r3, #0]
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	e000e010 	.word	0xe000e010
 80030e4:	e000e018 	.word	0xe000e018
 80030e8:	20000000 	.word	0x20000000
 80030ec:	10624dd3 	.word	0x10624dd3
 80030f0:	e000e014 	.word	0xe000e014

080030f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80030f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003104 <vPortEnableVFP+0x10>
 80030f8:	6801      	ldr	r1, [r0, #0]
 80030fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80030fe:	6001      	str	r1, [r0, #0]
 8003100:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003102:	bf00      	nop
 8003104:	e000ed88 	.word	0xe000ed88

08003108 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	; 0x28
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003110:	2300      	movs	r3, #0
 8003112:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003114:	f7ff fad2 	bl	80026bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003118:	4b5b      	ldr	r3, [pc, #364]	; (8003288 <pvPortMalloc+0x180>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003120:	f000 f920 	bl	8003364 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003124:	4b59      	ldr	r3, [pc, #356]	; (800328c <pvPortMalloc+0x184>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	f040 8093 	bne.w	8003258 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01d      	beq.n	8003174 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003138:	2208      	movs	r2, #8
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	2b00      	cmp	r3, #0
 8003148:	d014      	beq.n	8003174 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f023 0307 	bic.w	r3, r3, #7
 8003150:	3308      	adds	r3, #8
 8003152:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <pvPortMalloc+0x6c>
	__asm volatile
 800315e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003162:	f383 8811 	msr	BASEPRI, r3
 8003166:	f3bf 8f6f 	isb	sy
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	617b      	str	r3, [r7, #20]
}
 8003170:	bf00      	nop
 8003172:	e7fe      	b.n	8003172 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d06e      	beq.n	8003258 <pvPortMalloc+0x150>
 800317a:	4b45      	ldr	r3, [pc, #276]	; (8003290 <pvPortMalloc+0x188>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	429a      	cmp	r2, r3
 8003182:	d869      	bhi.n	8003258 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003184:	4b43      	ldr	r3, [pc, #268]	; (8003294 <pvPortMalloc+0x18c>)
 8003186:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003188:	4b42      	ldr	r3, [pc, #264]	; (8003294 <pvPortMalloc+0x18c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800318e:	e004      	b.n	800319a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d903      	bls.n	80031ac <pvPortMalloc+0xa4>
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f1      	bne.n	8003190 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80031ac:	4b36      	ldr	r3, [pc, #216]	; (8003288 <pvPortMalloc+0x180>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d050      	beq.n	8003258 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2208      	movs	r2, #8
 80031bc:	4413      	add	r3, r2
 80031be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	1ad2      	subs	r2, r2, r3
 80031d0:	2308      	movs	r3, #8
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d91f      	bls.n	8003218 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80031d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4413      	add	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <pvPortMalloc+0xf8>
	__asm volatile
 80031ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	613b      	str	r3, [r7, #16]
}
 80031fc:	bf00      	nop
 80031fe:	e7fe      	b.n	80031fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	1ad2      	subs	r2, r2, r3
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003212:	69b8      	ldr	r0, [r7, #24]
 8003214:	f000 f908 	bl	8003428 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003218:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <pvPortMalloc+0x188>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	4a1b      	ldr	r2, [pc, #108]	; (8003290 <pvPortMalloc+0x188>)
 8003224:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003226:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <pvPortMalloc+0x188>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <pvPortMalloc+0x190>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d203      	bcs.n	800323a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003232:	4b17      	ldr	r3, [pc, #92]	; (8003290 <pvPortMalloc+0x188>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a18      	ldr	r2, [pc, #96]	; (8003298 <pvPortMalloc+0x190>)
 8003238:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	4b13      	ldr	r3, [pc, #76]	; (800328c <pvPortMalloc+0x184>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	431a      	orrs	r2, r3
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800324e:	4b13      	ldr	r3, [pc, #76]	; (800329c <pvPortMalloc+0x194>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	3301      	adds	r3, #1
 8003254:	4a11      	ldr	r2, [pc, #68]	; (800329c <pvPortMalloc+0x194>)
 8003256:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003258:	f7ff fa3e 	bl	80026d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <pvPortMalloc+0x174>
	__asm volatile
 8003266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326a:	f383 8811 	msr	BASEPRI, r3
 800326e:	f3bf 8f6f 	isb	sy
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	60fb      	str	r3, [r7, #12]
}
 8003278:	bf00      	nop
 800327a:	e7fe      	b.n	800327a <pvPortMalloc+0x172>
	return pvReturn;
 800327c:	69fb      	ldr	r3, [r7, #28]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3728      	adds	r7, #40	; 0x28
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20004020 	.word	0x20004020
 800328c:	20004034 	.word	0x20004034
 8003290:	20004024 	.word	0x20004024
 8003294:	20004018 	.word	0x20004018
 8003298:	20004028 	.word	0x20004028
 800329c:	2000402c 	.word	0x2000402c

080032a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d04d      	beq.n	800334e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80032b2:	2308      	movs	r3, #8
 80032b4:	425b      	negs	r3, r3
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4413      	add	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	4b24      	ldr	r3, [pc, #144]	; (8003358 <vPortFree+0xb8>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10a      	bne.n	80032e4 <vPortFree+0x44>
	__asm volatile
 80032ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d2:	f383 8811 	msr	BASEPRI, r3
 80032d6:	f3bf 8f6f 	isb	sy
 80032da:	f3bf 8f4f 	dsb	sy
 80032de:	60fb      	str	r3, [r7, #12]
}
 80032e0:	bf00      	nop
 80032e2:	e7fe      	b.n	80032e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <vPortFree+0x62>
	__asm volatile
 80032ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f0:	f383 8811 	msr	BASEPRI, r3
 80032f4:	f3bf 8f6f 	isb	sy
 80032f8:	f3bf 8f4f 	dsb	sy
 80032fc:	60bb      	str	r3, [r7, #8]
}
 80032fe:	bf00      	nop
 8003300:	e7fe      	b.n	8003300 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	4b14      	ldr	r3, [pc, #80]	; (8003358 <vPortFree+0xb8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4013      	ands	r3, r2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d01e      	beq.n	800334e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d11a      	bne.n	800334e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <vPortFree+0xb8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	43db      	mvns	r3, r3
 8003322:	401a      	ands	r2, r3
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003328:	f7ff f9c8 	bl	80026bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	4b0a      	ldr	r3, [pc, #40]	; (800335c <vPortFree+0xbc>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4413      	add	r3, r2
 8003336:	4a09      	ldr	r2, [pc, #36]	; (800335c <vPortFree+0xbc>)
 8003338:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800333a:	6938      	ldr	r0, [r7, #16]
 800333c:	f000 f874 	bl	8003428 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003340:	4b07      	ldr	r3, [pc, #28]	; (8003360 <vPortFree+0xc0>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	3301      	adds	r3, #1
 8003346:	4a06      	ldr	r2, [pc, #24]	; (8003360 <vPortFree+0xc0>)
 8003348:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800334a:	f7ff f9c5 	bl	80026d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800334e:	bf00      	nop
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20004034 	.word	0x20004034
 800335c:	20004024 	.word	0x20004024
 8003360:	20004030 	.word	0x20004030

08003364 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800336a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800336e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003370:	4b27      	ldr	r3, [pc, #156]	; (8003410 <prvHeapInit+0xac>)
 8003372:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00c      	beq.n	8003398 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	3307      	adds	r3, #7
 8003382:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0307 	bic.w	r3, r3, #7
 800338a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	4a1f      	ldr	r2, [pc, #124]	; (8003410 <prvHeapInit+0xac>)
 8003394:	4413      	add	r3, r2
 8003396:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800339c:	4a1d      	ldr	r2, [pc, #116]	; (8003414 <prvHeapInit+0xb0>)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80033a2:	4b1c      	ldr	r3, [pc, #112]	; (8003414 <prvHeapInit+0xb0>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	4413      	add	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80033b0:	2208      	movs	r2, #8
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0307 	bic.w	r3, r3, #7
 80033be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4a15      	ldr	r2, [pc, #84]	; (8003418 <prvHeapInit+0xb4>)
 80033c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80033c6:	4b14      	ldr	r3, [pc, #80]	; (8003418 <prvHeapInit+0xb4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2200      	movs	r2, #0
 80033cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80033ce:	4b12      	ldr	r3, [pc, #72]	; (8003418 <prvHeapInit+0xb4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	1ad2      	subs	r2, r2, r3
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <prvHeapInit+0xb4>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4a0a      	ldr	r2, [pc, #40]	; (800341c <prvHeapInit+0xb8>)
 80033f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	4a09      	ldr	r2, [pc, #36]	; (8003420 <prvHeapInit+0xbc>)
 80033fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80033fc:	4b09      	ldr	r3, [pc, #36]	; (8003424 <prvHeapInit+0xc0>)
 80033fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003402:	601a      	str	r2, [r3, #0]
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	20000418 	.word	0x20000418
 8003414:	20004018 	.word	0x20004018
 8003418:	20004020 	.word	0x20004020
 800341c:	20004028 	.word	0x20004028
 8003420:	20004024 	.word	0x20004024
 8003424:	20004034 	.word	0x20004034

08003428 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003430:	4b28      	ldr	r3, [pc, #160]	; (80034d4 <prvInsertBlockIntoFreeList+0xac>)
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	e002      	b.n	800343c <prvInsertBlockIntoFreeList+0x14>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	429a      	cmp	r2, r3
 8003444:	d8f7      	bhi.n	8003436 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	4413      	add	r3, r2
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	429a      	cmp	r2, r3
 8003456:	d108      	bne.n	800346a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	441a      	add	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	441a      	add	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d118      	bne.n	80034b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <prvInsertBlockIntoFreeList+0xb0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d00d      	beq.n	80034a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	441a      	add	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	e008      	b.n	80034b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80034a6:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <prvInsertBlockIntoFreeList+0xb0>)
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	e003      	b.n	80034b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d002      	beq.n	80034c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20004018 	.word	0x20004018
 80034d8:	20004020 	.word	0x20004020

080034dc <__libc_init_array>:
 80034dc:	b570      	push	{r4, r5, r6, lr}
 80034de:	4d0d      	ldr	r5, [pc, #52]	; (8003514 <__libc_init_array+0x38>)
 80034e0:	4c0d      	ldr	r4, [pc, #52]	; (8003518 <__libc_init_array+0x3c>)
 80034e2:	1b64      	subs	r4, r4, r5
 80034e4:	10a4      	asrs	r4, r4, #2
 80034e6:	2600      	movs	r6, #0
 80034e8:	42a6      	cmp	r6, r4
 80034ea:	d109      	bne.n	8003500 <__libc_init_array+0x24>
 80034ec:	4d0b      	ldr	r5, [pc, #44]	; (800351c <__libc_init_array+0x40>)
 80034ee:	4c0c      	ldr	r4, [pc, #48]	; (8003520 <__libc_init_array+0x44>)
 80034f0:	f000 f820 	bl	8003534 <_init>
 80034f4:	1b64      	subs	r4, r4, r5
 80034f6:	10a4      	asrs	r4, r4, #2
 80034f8:	2600      	movs	r6, #0
 80034fa:	42a6      	cmp	r6, r4
 80034fc:	d105      	bne.n	800350a <__libc_init_array+0x2e>
 80034fe:	bd70      	pop	{r4, r5, r6, pc}
 8003500:	f855 3b04 	ldr.w	r3, [r5], #4
 8003504:	4798      	blx	r3
 8003506:	3601      	adds	r6, #1
 8003508:	e7ee      	b.n	80034e8 <__libc_init_array+0xc>
 800350a:	f855 3b04 	ldr.w	r3, [r5], #4
 800350e:	4798      	blx	r3
 8003510:	3601      	adds	r6, #1
 8003512:	e7f2      	b.n	80034fa <__libc_init_array+0x1e>
 8003514:	080035ec 	.word	0x080035ec
 8003518:	080035ec 	.word	0x080035ec
 800351c:	080035ec 	.word	0x080035ec
 8003520:	080035f0 	.word	0x080035f0

08003524 <memset>:
 8003524:	4402      	add	r2, r0
 8003526:	4603      	mov	r3, r0
 8003528:	4293      	cmp	r3, r2
 800352a:	d100      	bne.n	800352e <memset+0xa>
 800352c:	4770      	bx	lr
 800352e:	f803 1b01 	strb.w	r1, [r3], #1
 8003532:	e7f9      	b.n	8003528 <memset+0x4>

08003534 <_init>:
 8003534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003536:	bf00      	nop
 8003538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353a:	bc08      	pop	{r3}
 800353c:	469e      	mov	lr, r3
 800353e:	4770      	bx	lr

08003540 <_fini>:
 8003540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003542:	bf00      	nop
 8003544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003546:	bc08      	pop	{r3}
 8003548:	469e      	mov	lr, r3
 800354a:	4770      	bx	lr
