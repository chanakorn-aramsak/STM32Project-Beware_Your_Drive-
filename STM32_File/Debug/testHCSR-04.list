
testHCSR-04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  080090d8  080090d8  000190d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094e4  080094e4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080094e4  080094e4  000194e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094ec  080094ec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094ec  080094ec  000194ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094f0  080094f0  000194f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080094f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  200001dc  080096d0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  080096d0  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109e1  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002050  00000000  00000000  00030bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00032c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00033bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001758c  00000000  00000000  00034ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012158  00000000  00000000  0004c03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091f27  00000000  00000000  0005e194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f00bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000553c  00000000  00000000  000f010c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080090bc 	.word	0x080090bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080090bc 	.word	0x080090bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <MPU6050_Init>:
#define TEMP_OUT_H_REG 0x41
#define GYRO_XOUT_H_REG 0x43
#define PWR_MGMT_1_REG 0x6B
#define WHO_AM_I_REG 0x75

void MPU6050_Init(void) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af04      	add	r7, sp, #16
	uint8_t check, Data;
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8000fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa6:	9302      	str	r3, [sp, #8]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	1dfb      	adds	r3, r7, #7
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	2275      	movs	r2, #117	; 0x75
 8000fb4:	21d0      	movs	r1, #208	; 0xd0
 8000fb6:	4814      	ldr	r0, [pc, #80]	; (8001008 <MPU6050_Init+0x6c>)
 8000fb8:	f001 fbf4 	bl	80027a4 <HAL_I2C_Mem_Read>
	if (check == 104) {
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	2b68      	cmp	r3, #104	; 0x68
 8000fc0:	d11d      	bne.n	8000ffe <MPU6050_Init+0x62>
		Data = 0x00;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,
 8000fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fca:	9302      	str	r3, [sp, #8]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	1dbb      	adds	r3, r7, #6
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	226b      	movs	r2, #107	; 0x6b
 8000fd8:	21d0      	movs	r1, #208	; 0xd0
 8000fda:	480b      	ldr	r0, [pc, #44]	; (8001008 <MPU6050_Init+0x6c>)
 8000fdc:	f001 fae8 	bl	80025b0 <HAL_I2C_Mem_Write>
				1000);
		Data = 0x07;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,
 8000fe4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe8:	9302      	str	r3, [sp, #8]
 8000fea:	2301      	movs	r3, #1
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	1dbb      	adds	r3, r7, #6
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	2219      	movs	r2, #25
 8000ff6:	21d0      	movs	r1, #208	; 0xd0
 8000ff8:	4803      	ldr	r0, [pc, #12]	; (8001008 <MPU6050_Init+0x6c>)
 8000ffa:	f001 fad9 	bl	80025b0 <HAL_I2C_Mem_Write>
				1000);
	}
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200001f8 	.word	0x200001f8
 800100c:	00000000 	.word	0x00000000

08001010 <MPU6050_Read_Accel>:
void MPU6050_Read_Accel(int temp) {
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b09e      	sub	sp, #120	; 0x78
 8001014:	af04      	add	r7, sp, #16
 8001016:	6078      	str	r0, [r7, #4]
	uint8_t Rec_Data[6];
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data,
 8001018:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	2306      	movs	r3, #6
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	223b      	movs	r2, #59	; 0x3b
 800102c:	21d0      	movs	r1, #208	; 0xd0
 800102e:	4874      	ldr	r0, [pc, #464]	; (8001200 <MPU6050_Read_Accel+0x1f0>)
 8001030:	f001 fbb8 	bl	80027a4 <HAL_I2C_Mem_Read>
			sizeof(Rec_Data), 1000);

	int16_t Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001034:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	b21a      	sxth	r2, r3
 800103c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	int16_t Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001048:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b21a      	sxth	r2, r3
 8001050:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	int16_t Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800105c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b21a      	sxth	r2, r3
 8001064:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

	float Ax = Accel_X_RAW / 16384.0;
 8001070:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fa5d 	bl	8000534 <__aeabi_i2d>
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	4b61      	ldr	r3, [pc, #388]	; (8001204 <MPU6050_Read_Accel+0x1f4>)
 8001080:	f7ff fbec 	bl	800085c <__aeabi_ddiv>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	f7ff fdb4 	bl	8000bf8 <__aeabi_d2f>
 8001090:	4603      	mov	r3, r0
 8001092:	65fb      	str	r3, [r7, #92]	; 0x5c
	float Ay = Accel_Y_RAW / 16384.0;
 8001094:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fa4b 	bl	8000534 <__aeabi_i2d>
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	4b58      	ldr	r3, [pc, #352]	; (8001204 <MPU6050_Read_Accel+0x1f4>)
 80010a4:	f7ff fbda 	bl	800085c <__aeabi_ddiv>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4610      	mov	r0, r2
 80010ae:	4619      	mov	r1, r3
 80010b0:	f7ff fda2 	bl	8000bf8 <__aeabi_d2f>
 80010b4:	4603      	mov	r3, r0
 80010b6:	65bb      	str	r3, [r7, #88]	; 0x58
	float Az = Accel_Z_RAW / 16384.0;
 80010b8:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fa39 	bl	8000534 <__aeabi_i2d>
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	4b4f      	ldr	r3, [pc, #316]	; (8001204 <MPU6050_Read_Accel+0x1f4>)
 80010c8:	f7ff fbc8 	bl	800085c <__aeabi_ddiv>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fd90 	bl	8000bf8 <__aeabi_d2f>
 80010d8:	4603      	mov	r3, r0
 80010da:	657b      	str	r3, [r7, #84]	; 0x54
//	float Ax = Accel_X_RAW;
//	float Ay = Accel_Y_RAW;
//	float Az = Accel_Z_RAW;
	float A = (sqrt(Ax * Ax + Ay * Ay + Az * Az) + temp / 100) / 2;
 80010dc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80010e0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80010e4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80010e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010f0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80010f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fc:	ee17 0a90 	vmov	r0, s15
 8001100:	f7ff fa2a 	bl	8000558 <__aeabi_f2d>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	ec43 2b10 	vmov	d0, r2, r3
 800110c:	f007 fef8 	bl	8008f00 <sqrt>
 8001110:	ec55 4b10 	vmov	r4, r5, d0
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a3c      	ldr	r2, [pc, #240]	; (8001208 <MPU6050_Read_Accel+0x1f8>)
 8001118:	fb82 1203 	smull	r1, r2, r2, r3
 800111c:	1152      	asrs	r2, r2, #5
 800111e:	17db      	asrs	r3, r3, #31
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fa06 	bl	8000534 <__aeabi_i2d>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4620      	mov	r0, r4
 800112e:	4629      	mov	r1, r5
 8001130:	f7ff f8b4 	bl	800029c <__adddf3>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001144:	f7ff fb8a 	bl	800085c <__aeabi_ddiv>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	f7ff fd52 	bl	8000bf8 <__aeabi_d2f>
 8001154:	4603      	mov	r3, r0
 8001156:	653b      	str	r3, [r7, #80]	; 0x50
	char buff[32];
	char c2[32];

	if (A >= 0.47) {
 8001158:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800115a:	f7ff f9fd 	bl	8000558 <__aeabi_f2d>
 800115e:	a326      	add	r3, pc, #152	; (adr r3, 80011f8 <MPU6050_Read_Accel+0x1e8>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff fcd6 	bl	8000b14 <__aeabi_dcmpge>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d02c      	beq.n	80011c8 <MPU6050_Read_Accel+0x1b8>
		sprintf(buff, "%d", -1);
 800116e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001172:	f04f 32ff 	mov.w	r2, #4294967295
 8001176:	4925      	ldr	r1, [pc, #148]	; (800120c <MPU6050_Read_Accel+0x1fc>)
 8001178:	4618      	mov	r0, r3
 800117a:	f005 fc49 	bl	8006a10 <siprintf>
		HAL_UART_Transmit(&huart1, buff, strlen(buff), 100);
 800117e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f82c 	bl	80001e0 <strlen>
 8001188:	4603      	mov	r3, r0
 800118a:	b29a      	uxth	r2, r3
 800118c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001190:	2364      	movs	r3, #100	; 0x64
 8001192:	481f      	ldr	r0, [pc, #124]	; (8001210 <MPU6050_Read_Accel+0x200>)
 8001194:	f004 fc2b 	bl	80059ee <HAL_UART_Transmit>
		sprintf(c2, "\r%d\n", A);
 8001198:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800119a:	f7ff f9dd 	bl	8000558 <__aeabi_f2d>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	f107 0008 	add.w	r0, r7, #8
 80011a6:	491b      	ldr	r1, [pc, #108]	; (8001214 <MPU6050_Read_Accel+0x204>)
 80011a8:	f005 fc32 	bl	8006a10 <siprintf>

		HAL_UART_Transmit(&huart2, &c2, strlen(c2), 100);
 80011ac:	f107 0308 	add.w	r3, r7, #8
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f815 	bl	80001e0 <strlen>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	f107 0108 	add.w	r1, r7, #8
 80011be:	2364      	movs	r3, #100	; 0x64
 80011c0:	4815      	ldr	r0, [pc, #84]	; (8001218 <MPU6050_Read_Accel+0x208>)
 80011c2:	f004 fc14 	bl	80059ee <HAL_UART_Transmit>
	} else {
		sprintf(buff, "%d", 0);
		HAL_UART_Transmit(&huart1, buff, strlen(buff), 100);
	}

}
 80011c6:	e013      	b.n	80011f0 <MPU6050_Read_Accel+0x1e0>
		sprintf(buff, "%d", 0);
 80011c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011cc:	2200      	movs	r2, #0
 80011ce:	490f      	ldr	r1, [pc, #60]	; (800120c <MPU6050_Read_Accel+0x1fc>)
 80011d0:	4618      	mov	r0, r3
 80011d2:	f005 fc1d 	bl	8006a10 <siprintf>
		HAL_UART_Transmit(&huart1, buff, strlen(buff), 100);
 80011d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f800 	bl	80001e0 <strlen>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80011e8:	2364      	movs	r3, #100	; 0x64
 80011ea:	4809      	ldr	r0, [pc, #36]	; (8001210 <MPU6050_Read_Accel+0x200>)
 80011ec:	f004 fbff 	bl	80059ee <HAL_UART_Transmit>
}
 80011f0:	bf00      	nop
 80011f2:	3768      	adds	r7, #104	; 0x68
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bdb0      	pop	{r4, r5, r7, pc}
 80011f8:	e147ae14 	.word	0xe147ae14
 80011fc:	3fde147a 	.word	0x3fde147a
 8001200:	200001f8 	.word	0x200001f8
 8001204:	40d00000 	.word	0x40d00000
 8001208:	51eb851f 	.word	0x51eb851f
 800120c:	080090d8 	.word	0x080090d8
 8001210:	20000294 	.word	0x20000294
 8001214:	080090dc 	.word	0x080090dc
 8001218:	200002d8 	.word	0x200002d8
 800121c:	00000000 	.word	0x00000000

08001220 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b091      	sub	sp, #68	; 0x44
 8001224:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001226:	f000 fcf1 	bl	8001c0c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800122a:	f000 f8e5 	bl	80013f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800122e:	f000 fa1d 	bl	800166c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001232:	f000 f9f1 	bl	8001618 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8001236:	f000 f975 	bl	8001524 <MX_TIM1_Init>
	MX_I2C1_Init();
 800123a:	f000 f945 	bl	80014c8 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 800123e:	f000 f9c1 	bl	80015c4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8001242:	4863      	ldr	r0, [pc, #396]	; (80013d0 <main+0x1b0>)
 8001244:	f004 f8dc 	bl	8005400 <HAL_TIM_Base_Start>
	MPU6050_Init();
 8001248:	f7ff fea8 	bl	8000f9c <MPU6050_Init>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001252:	4860      	ldr	r0, [pc, #384]	; (80013d4 <main+0x1b4>)
 8001254:	f001 f84e 	bl	80022f4 <HAL_GPIO_WritePin>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8001258:	2201      	movs	r2, #1
 800125a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800125e:	485d      	ldr	r0, [pc, #372]	; (80013d4 <main+0x1b4>)
 8001260:	f001 f848 	bl	80022f4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001264:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <main+0x1b0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2200      	movs	r2, #0
 800126a:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER (&htim1) < 10)
 800126c:	bf00      	nop
 800126e:	4b58      	ldr	r3, [pc, #352]	; (80013d0 <main+0x1b0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001274:	2b09      	cmp	r3, #9
 8001276:	d9fa      	bls.n	800126e <main+0x4e>
			;  // wait for 10 us
		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800127e:	4855      	ldr	r0, [pc, #340]	; (80013d4 <main+0x1b4>)
 8001280:	f001 f838 	bl	80022f4 <HAL_GPIO_WritePin>

		pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8001284:	f000 fd28 	bl	8001cd8 <HAL_GetTick>
 8001288:	4603      	mov	r3, r0
 800128a:	4a53      	ldr	r2, [pc, #332]	; (80013d8 <main+0x1b8>)
 800128c:	6013      	str	r3, [r2, #0]
		// wait for the echo pin to go high
		while (!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))
 800128e:	bf00      	nop
 8001290:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001294:	484f      	ldr	r0, [pc, #316]	; (80013d4 <main+0x1b4>)
 8001296:	f001 f815 	bl	80022c4 <HAL_GPIO_ReadPin>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d108      	bne.n	80012b2 <main+0x92>
				&& pMillis + 10 > HAL_GetTick())
 80012a0:	4b4d      	ldr	r3, [pc, #308]	; (80013d8 <main+0x1b8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f103 040a 	add.w	r4, r3, #10
 80012a8:	f000 fd16 	bl	8001cd8 <HAL_GetTick>
 80012ac:	4603      	mov	r3, r0
 80012ae:	429c      	cmp	r4, r3
 80012b0:	d8ee      	bhi.n	8001290 <main+0x70>
			;
		Value1 = __HAL_TIM_GET_COUNTER(&htim1);
 80012b2:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <main+0x1b0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b8:	4a48      	ldr	r2, [pc, #288]	; (80013dc <main+0x1bc>)
 80012ba:	6013      	str	r3, [r2, #0]

		pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80012bc:	f000 fd0c 	bl	8001cd8 <HAL_GetTick>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4a45      	ldr	r2, [pc, #276]	; (80013d8 <main+0x1b8>)
 80012c4:	6013      	str	r3, [r2, #0]
		// wait for the echo pin to go low
		while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))
 80012c6:	bf00      	nop
 80012c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012cc:	4841      	ldr	r0, [pc, #260]	; (80013d4 <main+0x1b4>)
 80012ce:	f000 fff9 	bl	80022c4 <HAL_GPIO_ReadPin>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d008      	beq.n	80012ea <main+0xca>
				&& pMillis + 50 > HAL_GetTick())
 80012d8:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <main+0x1b8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80012e0:	f000 fcfa 	bl	8001cd8 <HAL_GetTick>
 80012e4:	4603      	mov	r3, r0
 80012e6:	429c      	cmp	r4, r3
 80012e8:	d8ee      	bhi.n	80012c8 <main+0xa8>
			;
		Value2 = __HAL_TIM_GET_COUNTER(&htim1);
 80012ea:	4b39      	ldr	r3, [pc, #228]	; (80013d0 <main+0x1b0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f0:	4a3b      	ldr	r2, [pc, #236]	; (80013e0 <main+0x1c0>)
 80012f2:	6013      	str	r3, [r2, #0]

		Distance = (Value2 - Value1) * 0.034 / 2;
 80012f4:	4b3a      	ldr	r3, [pc, #232]	; (80013e0 <main+0x1c0>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b38      	ldr	r3, [pc, #224]	; (80013dc <main+0x1bc>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f908 	bl	8000514 <__aeabi_ui2d>
 8001304:	a330      	add	r3, pc, #192	; (adr r3, 80013c8 <main+0x1a8>)
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	f7ff f97d 	bl	8000608 <__aeabi_dmul>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800131e:	f7ff fa9d 	bl	800085c <__aeabi_ddiv>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fc45 	bl	8000bb8 <__aeabi_d2uiz>
 800132e:	4603      	mov	r3, r0
 8001330:	b29a      	uxth	r2, r3
 8001332:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <main+0x1c4>)
 8001334:	801a      	strh	r2, [r3, #0]
		char c[32];
		char c2[32];
		if (Distance < 30) {
 8001336:	4b2b      	ldr	r3, [pc, #172]	; (80013e4 <main+0x1c4>)
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	2b1d      	cmp	r3, #29
 800133c:	d828      	bhi.n	8001390 <main+0x170>
			sprintf(c, "%d", -1);
 800133e:	463b      	mov	r3, r7
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	4928      	ldr	r1, [pc, #160]	; (80013e8 <main+0x1c8>)
 8001346:	4618      	mov	r0, r3
 8001348:	f005 fb62 	bl	8006a10 <siprintf>
			sprintf(c2, "\r%d\n", Distance);
 800134c:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <main+0x1c4>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	f107 0320 	add.w	r3, r7, #32
 8001356:	4925      	ldr	r1, [pc, #148]	; (80013ec <main+0x1cc>)
 8001358:	4618      	mov	r0, r3
 800135a:	f005 fb59 	bl	8006a10 <siprintf>
			HAL_UART_Transmit(&huart1, &c, strlen(c), 100);
 800135e:	463b      	mov	r3, r7
 8001360:	4618      	mov	r0, r3
 8001362:	f7fe ff3d 	bl	80001e0 <strlen>
 8001366:	4603      	mov	r3, r0
 8001368:	b29a      	uxth	r2, r3
 800136a:	4639      	mov	r1, r7
 800136c:	2364      	movs	r3, #100	; 0x64
 800136e:	4820      	ldr	r0, [pc, #128]	; (80013f0 <main+0x1d0>)
 8001370:	f004 fb3d 	bl	80059ee <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, &c2, strlen(c2), 100);
 8001374:	f107 0320 	add.w	r3, r7, #32
 8001378:	4618      	mov	r0, r3
 800137a:	f7fe ff31 	bl	80001e0 <strlen>
 800137e:	4603      	mov	r3, r0
 8001380:	b29a      	uxth	r2, r3
 8001382:	f107 0120 	add.w	r1, r7, #32
 8001386:	2364      	movs	r3, #100	; 0x64
 8001388:	481a      	ldr	r0, [pc, #104]	; (80013f4 <main+0x1d4>)
 800138a:	f004 fb30 	bl	80059ee <HAL_UART_Transmit>
 800138e:	e010      	b.n	80013b2 <main+0x192>
		} else {
			sprintf(c, "%d", 0);
 8001390:	463b      	mov	r3, r7
 8001392:	2200      	movs	r2, #0
 8001394:	4914      	ldr	r1, [pc, #80]	; (80013e8 <main+0x1c8>)
 8001396:	4618      	mov	r0, r3
 8001398:	f005 fb3a 	bl	8006a10 <siprintf>
			HAL_UART_Transmit(&huart1, c, strlen(c), 100);
 800139c:	463b      	mov	r3, r7
 800139e:	4618      	mov	r0, r3
 80013a0:	f7fe ff1e 	bl	80001e0 <strlen>
 80013a4:	4603      	mov	r3, r0
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	4639      	mov	r1, r7
 80013aa:	2364      	movs	r3, #100	; 0x64
 80013ac:	4810      	ldr	r0, [pc, #64]	; (80013f0 <main+0x1d0>)
 80013ae:	f004 fb1e 	bl	80059ee <HAL_UART_Transmit>
		}

		MPU6050_Read_Accel(Distance);
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <main+0x1c4>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fe2a 	bl	8001010 <MPU6050_Read_Accel>
//		 MPU6050_Read_Gyro() ;

		HAL_Delay(1000);
 80013bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013c0:	f000 fc96 	bl	8001cf0 <HAL_Delay>
	while (1) {
 80013c4:	e748      	b.n	8001258 <main+0x38>
 80013c6:	bf00      	nop
 80013c8:	b020c49c 	.word	0xb020c49c
 80013cc:	3fa16872 	.word	0x3fa16872
 80013d0:	2000024c 	.word	0x2000024c
 80013d4:	40020000 	.word	0x40020000
 80013d8:	2000031c 	.word	0x2000031c
 80013dc:	20000320 	.word	0x20000320
 80013e0:	20000324 	.word	0x20000324
 80013e4:	20000328 	.word	0x20000328
 80013e8:	080090d8 	.word	0x080090d8
 80013ec:	080090dc 	.word	0x080090dc
 80013f0:	20000294 	.word	0x20000294
 80013f4:	200002d8 	.word	0x200002d8

080013f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b094      	sub	sp, #80	; 0x50
 80013fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013fe:	f107 0320 	add.w	r3, r7, #32
 8001402:	2230      	movs	r2, #48	; 0x30
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f004 fe90 	bl	800612c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <SystemClock_Config+0xc8>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	4a26      	ldr	r2, [pc, #152]	; (80014c0 <SystemClock_Config+0xc8>)
 8001426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142a:	6413      	str	r3, [r2, #64]	; 0x40
 800142c:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <SystemClock_Config+0xc8>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001438:	2300      	movs	r3, #0
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <SystemClock_Config+0xcc>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a20      	ldr	r2, [pc, #128]	; (80014c4 <SystemClock_Config+0xcc>)
 8001442:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <SystemClock_Config+0xcc>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001454:	2301      	movs	r3, #1
 8001456:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800145e:	2302      	movs	r3, #2
 8001460:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001462:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001466:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001468:	2304      	movs	r3, #4
 800146a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 800146c:	2348      	movs	r3, #72	; 0x48
 800146e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001470:	2302      	movs	r3, #2
 8001472:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001474:	2304      	movs	r3, #4
 8001476:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001478:	f107 0320 	add.w	r3, r7, #32
 800147c:	4618      	mov	r0, r3
 800147e:	f003 fad7 	bl	8004a30 <HAL_RCC_OscConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0x94>
		Error_Handler();
 8001488:	f000 f96e 	bl	8001768 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800148c:	230f      	movs	r3, #15
 800148e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001490:	2302      	movs	r3, #2
 8001492:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	2102      	movs	r1, #2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 fd39 	bl	8004f20 <HAL_RCC_ClockConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0xc0>
		Error_Handler();
 80014b4:	f000 f958 	bl	8001768 <Error_Handler>
	}
}
 80014b8:	bf00      	nop
 80014ba:	3750      	adds	r7, #80	; 0x50
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40007000 	.word	0x40007000

080014c8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <MX_I2C1_Init+0x50>)
 80014ce:	4a13      	ldr	r2, [pc, #76]	; (800151c <MX_I2C1_Init+0x54>)
 80014d0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_I2C1_Init+0x50>)
 80014d4:	4a12      	ldr	r2, [pc, #72]	; (8001520 <MX_I2C1_Init+0x58>)
 80014d6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_I2C1_Init+0x50>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_I2C1_Init+0x50>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_I2C1_Init+0x50>)
 80014e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ea:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <MX_I2C1_Init+0x50>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_I2C1_Init+0x50>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <MX_I2C1_Init+0x50>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_I2C1_Init+0x50>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001504:	4804      	ldr	r0, [pc, #16]	; (8001518 <MX_I2C1_Init+0x50>)
 8001506:	f000 ff0f 	bl	8002328 <HAL_I2C_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001510:	f000 f92a 	bl	8001768 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	200001f8 	.word	0x200001f8
 800151c:	40005400 	.word	0x40005400
 8001520:	000186a0 	.word	0x000186a0

08001524 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001538:	463b      	mov	r3, r7
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001540:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <MX_TIM1_Init+0x98>)
 8001542:	4a1f      	ldr	r2, [pc, #124]	; (80015c0 <MX_TIM1_Init+0x9c>)
 8001544:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 71;
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <MX_TIM1_Init+0x98>)
 8001548:	2247      	movs	r2, #71	; 0x47
 800154a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <MX_TIM1_Init+0x98>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <MX_TIM1_Init+0x98>)
 8001554:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001558:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <MX_TIM1_Init+0x98>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <MX_TIM1_Init+0x98>)
 8001562:	2200      	movs	r2, #0
 8001564:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <MX_TIM1_Init+0x98>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800156c:	4813      	ldr	r0, [pc, #76]	; (80015bc <MX_TIM1_Init+0x98>)
 800156e:	f003 fef7 	bl	8005360 <HAL_TIM_Base_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM1_Init+0x58>
		Error_Handler();
 8001578:	f000 f8f6 	bl	8001768 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001580:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001582:	f107 0308 	add.w	r3, r7, #8
 8001586:	4619      	mov	r1, r3
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <MX_TIM1_Init+0x98>)
 800158a:	f003 ff93 	bl	80054b4 <HAL_TIM_ConfigClockSource>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM1_Init+0x74>
		Error_Handler();
 8001594:	f000 f8e8 	bl	8001768 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80015a0:	463b      	mov	r3, r7
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_TIM1_Init+0x98>)
 80015a6:	f004 f967 	bl	8005878 <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 80015b0:	f000 f8da 	bl	8001768 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	2000024c 	.word	0x2000024c
 80015c0:	40010000 	.word	0x40010000

080015c4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015ca:	4a12      	ldr	r2, [pc, #72]	; (8001614 <MX_USART1_UART_Init+0x50>)
 80015cc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015d4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015ea:	220c      	movs	r2, #12
 80015ec:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015fc:	f004 f9aa 	bl	8005954 <HAL_UART_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001606:	f000 f8af 	bl	8001768 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000294 	.word	0x20000294
 8001614:	40011000 	.word	0x40011000

08001618 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <MX_USART2_UART_Init+0x50>)
 8001620:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001628:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800163e:	220c      	movs	r2, #12
 8001640:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001650:	f004 f980 	bl	8005954 <HAL_UART_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800165a:	f000 f885 	bl	8001768 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200002d8 	.word	0x200002d8
 8001668:	40004400 	.word	0x40004400

0800166c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b35      	ldr	r3, [pc, #212]	; (800175c <MX_GPIO_Init+0xf0>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a34      	ldr	r2, [pc, #208]	; (800175c <MX_GPIO_Init+0xf0>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b32      	ldr	r3, [pc, #200]	; (800175c <MX_GPIO_Init+0xf0>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b2e      	ldr	r3, [pc, #184]	; (800175c <MX_GPIO_Init+0xf0>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a2d      	ldr	r2, [pc, #180]	; (800175c <MX_GPIO_Init+0xf0>)
 80016a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b2b      	ldr	r3, [pc, #172]	; (800175c <MX_GPIO_Init+0xf0>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	4b27      	ldr	r3, [pc, #156]	; (800175c <MX_GPIO_Init+0xf0>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a26      	ldr	r2, [pc, #152]	; (800175c <MX_GPIO_Init+0xf0>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b24      	ldr	r3, [pc, #144]	; (800175c <MX_GPIO_Init+0xf0>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	4b20      	ldr	r3, [pc, #128]	; (800175c <MX_GPIO_Init+0xf0>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a1f      	ldr	r2, [pc, #124]	; (800175c <MX_GPIO_Init+0xf0>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <MX_GPIO_Init+0xf0>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_9, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 7108 	mov.w	r1, #544	; 0x220
 80016f8:	4819      	ldr	r0, [pc, #100]	; (8001760 <MX_GPIO_Init+0xf4>)
 80016fa:	f000 fdfb 	bl	80022f4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80016fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001702:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001704:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001708:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	4813      	ldr	r0, [pc, #76]	; (8001764 <MX_GPIO_Init+0xf8>)
 8001716:	f000 fc51 	bl	8001fbc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA9 */
	GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_9;
 800171a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800171e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001720:	2301      	movs	r3, #1
 8001722:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	480b      	ldr	r0, [pc, #44]	; (8001760 <MX_GPIO_Init+0xf4>)
 8001734:	f000 fc42 	bl	8001fbc <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	4804      	ldr	r0, [pc, #16]	; (8001760 <MX_GPIO_Init+0xf4>)
 800174e:	f000 fc35 	bl	8001fbc <HAL_GPIO_Init>

}
 8001752:	bf00      	nop
 8001754:	3728      	adds	r7, #40	; 0x28
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	40020000 	.word	0x40020000
 8001764:	40020800 	.word	0x40020800

08001768 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800176c:	b672      	cpsid	i
}
 800176e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001770:	e7fe      	b.n	8001770 <Error_Handler+0x8>
	...

08001774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <HAL_MspInit+0x4c>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	4a0f      	ldr	r2, [pc, #60]	; (80017c0 <HAL_MspInit+0x4c>)
 8001784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001788:	6453      	str	r3, [r2, #68]	; 0x44
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <HAL_MspInit+0x4c>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	603b      	str	r3, [r7, #0]
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_MspInit+0x4c>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <HAL_MspInit+0x4c>)
 80017a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_MspInit+0x4c>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017b2:	2007      	movs	r0, #7
 80017b4:	f000 fb90 	bl	8001ed8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40023800 	.word	0x40023800

080017c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a1d      	ldr	r2, [pc, #116]	; (8001858 <HAL_I2C_MspInit+0x94>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d134      	bne.n	8001850 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	4b1c      	ldr	r3, [pc, #112]	; (800185c <HAL_I2C_MspInit+0x98>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a1b      	ldr	r2, [pc, #108]	; (800185c <HAL_I2C_MspInit+0x98>)
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b19      	ldr	r3, [pc, #100]	; (800185c <HAL_I2C_MspInit+0x98>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001802:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001808:	2312      	movs	r3, #18
 800180a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001814:	2304      	movs	r3, #4
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	4619      	mov	r1, r3
 800181e:	4810      	ldr	r0, [pc, #64]	; (8001860 <HAL_I2C_MspInit+0x9c>)
 8001820:	f000 fbcc 	bl	8001fbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_I2C_MspInit+0x98>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	4a0b      	ldr	r2, [pc, #44]	; (800185c <HAL_I2C_MspInit+0x98>)
 800182e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001832:	6413      	str	r3, [r2, #64]	; 0x40
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_I2C_MspInit+0x98>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001840:	2200      	movs	r2, #0
 8001842:	2100      	movs	r1, #0
 8001844:	201f      	movs	r0, #31
 8001846:	f000 fb52 	bl	8001eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800184a:	201f      	movs	r0, #31
 800184c:	f000 fb6b 	bl	8001f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001850:	bf00      	nop
 8001852:	3728      	adds	r7, #40	; 0x28
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40005400 	.word	0x40005400
 800185c:	40023800 	.word	0x40023800
 8001860:	40020400 	.word	0x40020400

08001864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d10d      	bne.n	8001892 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_TIM_Base_MspInit+0x40>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	4a09      	ldr	r2, [pc, #36]	; (80018a4 <HAL_TIM_Base_MspInit+0x40>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6453      	str	r3, [r2, #68]	; 0x44
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <HAL_TIM_Base_MspInit+0x40>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40010000 	.word	0x40010000
 80018a4:	40023800 	.word	0x40023800

080018a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08c      	sub	sp, #48	; 0x30
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a32      	ldr	r2, [pc, #200]	; (8001990 <HAL_UART_MspInit+0xe8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d12d      	bne.n	8001926 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
 80018ce:	4b31      	ldr	r3, [pc, #196]	; (8001994 <HAL_UART_MspInit+0xec>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	4a30      	ldr	r2, [pc, #192]	; (8001994 <HAL_UART_MspInit+0xec>)
 80018d4:	f043 0310 	orr.w	r3, r3, #16
 80018d8:	6453      	str	r3, [r2, #68]	; 0x44
 80018da:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <HAL_UART_MspInit+0xec>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <HAL_UART_MspInit+0xec>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a29      	ldr	r2, [pc, #164]	; (8001994 <HAL_UART_MspInit+0xec>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b27      	ldr	r3, [pc, #156]	; (8001994 <HAL_UART_MspInit+0xec>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001902:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001914:	2307      	movs	r3, #7
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	4619      	mov	r1, r3
 800191e:	481e      	ldr	r0, [pc, #120]	; (8001998 <HAL_UART_MspInit+0xf0>)
 8001920:	f000 fb4c 	bl	8001fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001924:	e030      	b.n	8001988 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a1c      	ldr	r2, [pc, #112]	; (800199c <HAL_UART_MspInit+0xf4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d12b      	bne.n	8001988 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	4b17      	ldr	r3, [pc, #92]	; (8001994 <HAL_UART_MspInit+0xec>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	4a16      	ldr	r2, [pc, #88]	; (8001994 <HAL_UART_MspInit+0xec>)
 800193a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193e:	6413      	str	r3, [r2, #64]	; 0x40
 8001940:	4b14      	ldr	r3, [pc, #80]	; (8001994 <HAL_UART_MspInit+0xec>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_UART_MspInit+0xec>)
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	4a0f      	ldr	r2, [pc, #60]	; (8001994 <HAL_UART_MspInit+0xec>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6313      	str	r3, [r2, #48]	; 0x30
 800195c:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_UART_MspInit+0xec>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001968:	230c      	movs	r3, #12
 800196a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001978:	2307      	movs	r3, #7
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	f107 031c 	add.w	r3, r7, #28
 8001980:	4619      	mov	r1, r3
 8001982:	4805      	ldr	r0, [pc, #20]	; (8001998 <HAL_UART_MspInit+0xf0>)
 8001984:	f000 fb1a 	bl	8001fbc <HAL_GPIO_Init>
}
 8001988:	bf00      	nop
 800198a:	3730      	adds	r7, #48	; 0x30
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40011000 	.word	0x40011000
 8001994:	40023800 	.word	0x40023800
 8001998:	40020000 	.word	0x40020000
 800199c:	40004400 	.word	0x40004400

080019a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <NMI_Handler+0x4>

080019a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <MemManage_Handler+0x4>

080019b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <BusFault_Handler+0x4>

080019b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <UsageFault_Handler+0x4>

080019be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ec:	f000 f960 	bl	8001cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <I2C1_EV_IRQHandler+0x10>)
 80019fa:	f001 f8f9 	bl	8002bf0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200001f8 	.word	0x200001f8

08001a08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
	return 1;
 8001a0c:	2301      	movs	r3, #1
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <_kill>:

int _kill(int pid, int sig)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a22:	f004 fb59 	bl	80060d8 <__errno>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2216      	movs	r2, #22
 8001a2a:	601a      	str	r2, [r3, #0]
	return -1;
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <_exit>:

void _exit (int status)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ffe7 	bl	8001a18 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a4a:	e7fe      	b.n	8001a4a <_exit+0x12>

08001a4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e00a      	b.n	8001a74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a5e:	f3af 8000 	nop.w
 8001a62:	4601      	mov	r1, r0
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	60ba      	str	r2, [r7, #8]
 8001a6a:	b2ca      	uxtb	r2, r1
 8001a6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	3301      	adds	r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	dbf0      	blt.n	8001a5e <_read+0x12>
	}

return len;
 8001a7c:	687b      	ldr	r3, [r7, #4]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b086      	sub	sp, #24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e009      	b.n	8001aac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	60ba      	str	r2, [r7, #8]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbf1      	blt.n	8001a98 <_write+0x12>
	}
	return len;
 8001ab4:	687b      	ldr	r3, [r7, #4]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <_close>:

int _close(int file)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ae6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <_isatty>:

int _isatty(int file)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
	return 1;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
	return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b30:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <_sbrk+0x5c>)
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <_sbrk+0x60>)
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d102      	bne.n	8001b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <_sbrk+0x64>)
 8001b46:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <_sbrk+0x68>)
 8001b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d207      	bcs.n	8001b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b58:	f004 fabe 	bl	80060d8 <__errno>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	220c      	movs	r2, #12
 8001b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	e009      	b.n	8001b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <_sbrk+0x64>)
 8001b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20020000 	.word	0x20020000
 8001b88:	00000400 	.word	0x00000400
 8001b8c:	2000032c 	.word	0x2000032c
 8001b90:	20000348 	.word	0x20000348

08001b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <SystemInit+0x20>)
 8001b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <SystemInit+0x20>)
 8001ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bbc:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bbe:	490e      	ldr	r1, [pc, #56]	; (8001bf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bc0:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc4:	e002      	b.n	8001bcc <LoopCopyDataInit>

08001bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bca:	3304      	adds	r3, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd0:	d3f9      	bcc.n	8001bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd2:	4a0b      	ldr	r2, [pc, #44]	; (8001c00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bd4:	4c0b      	ldr	r4, [pc, #44]	; (8001c04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd8:	e001      	b.n	8001bde <LoopFillZerobss>

08001bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bdc:	3204      	adds	r2, #4

08001bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be0:	d3fb      	bcc.n	8001bda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001be2:	f7ff ffd7 	bl	8001b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001be6:	f004 fa7d 	bl	80060e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bea:	f7ff fb19 	bl	8001220 <main>
  bx  lr    
 8001bee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001bfc:	080094f4 	.word	0x080094f4
  ldr r2, =_sbss
 8001c00:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001c04:	20000344 	.word	0x20000344

08001c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC_IRQHandler>
	...

08001c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c10:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <HAL_Init+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <HAL_Init+0x40>)
 8001c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <HAL_Init+0x40>)
 8001c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <HAL_Init+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <HAL_Init+0x40>)
 8001c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c34:	2003      	movs	r0, #3
 8001c36:	f000 f94f 	bl	8001ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f000 f808 	bl	8001c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c40:	f7ff fd98 	bl	8001774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40023c00 	.word	0x40023c00

08001c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_InitTick+0x54>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_InitTick+0x58>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4619      	mov	r1, r3
 8001c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 f967 	bl	8001f42 <HAL_SYSTICK_Config>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00e      	b.n	8001c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b0f      	cmp	r3, #15
 8001c82:	d80a      	bhi.n	8001c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c84:	2200      	movs	r2, #0
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	f000 f92f 	bl	8001eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <HAL_InitTick+0x5c>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e000      	b.n	8001c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	20000004 	.word	0x20000004

08001cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_IncTick+0x20>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_IncTick+0x24>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <HAL_IncTick+0x24>)
 8001cc2:	6013      	str	r3, [r2, #0]
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000008 	.word	0x20000008
 8001cd4:	20000330 	.word	0x20000330

08001cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return uwTick;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <HAL_GetTick+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000330 	.word	0x20000330

08001cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf8:	f7ff ffee 	bl	8001cd8 <HAL_GetTick>
 8001cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d08:	d005      	beq.n	8001d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_Delay+0x44>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d16:	bf00      	nop
 8001d18:	f7ff ffde 	bl	8001cd8 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d8f7      	bhi.n	8001d18 <HAL_Delay+0x28>
  {
  }
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000008 	.word	0x20000008

08001d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d54:	4013      	ands	r3, r2
 8001d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6a:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	60d3      	str	r3, [r2, #12]
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <__NVIC_GetPriorityGrouping+0x18>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	0a1b      	lsrs	r3, r3, #8
 8001d8a:	f003 0307 	and.w	r3, r3, #7
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	db0b      	blt.n	8001dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	f003 021f 	and.w	r2, r3, #31
 8001db4:	4907      	ldr	r1, [pc, #28]	; (8001dd4 <__NVIC_EnableIRQ+0x38>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000e100 	.word	0xe000e100

08001dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	6039      	str	r1, [r7, #0]
 8001de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	db0a      	blt.n	8001e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	490c      	ldr	r1, [pc, #48]	; (8001e24 <__NVIC_SetPriority+0x4c>)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	0112      	lsls	r2, r2, #4
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e00:	e00a      	b.n	8001e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4908      	ldr	r1, [pc, #32]	; (8001e28 <__NVIC_SetPriority+0x50>)
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	3b04      	subs	r3, #4
 8001e10:	0112      	lsls	r2, r2, #4
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	440b      	add	r3, r1
 8001e16:	761a      	strb	r2, [r3, #24]
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000e100 	.word	0xe000e100
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	; 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f1c3 0307 	rsb	r3, r3, #7
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	bf28      	it	cs
 8001e4a:	2304      	movcs	r3, #4
 8001e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3304      	adds	r3, #4
 8001e52:	2b06      	cmp	r3, #6
 8001e54:	d902      	bls.n	8001e5c <NVIC_EncodePriority+0x30>
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3b03      	subs	r3, #3
 8001e5a:	e000      	b.n	8001e5e <NVIC_EncodePriority+0x32>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	f04f 32ff 	mov.w	r2, #4294967295
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	401a      	ands	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e74:	f04f 31ff 	mov.w	r1, #4294967295
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	43d9      	mvns	r1, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	4313      	orrs	r3, r2
         );
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3724      	adds	r7, #36	; 0x24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea4:	d301      	bcc.n	8001eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e00f      	b.n	8001eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <SysTick_Config+0x40>)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb2:	210f      	movs	r1, #15
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb8:	f7ff ff8e 	bl	8001dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <SysTick_Config+0x40>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec2:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <SysTick_Config+0x40>)
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	e000e010 	.word	0xe000e010

08001ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ff29 	bl	8001d38 <__NVIC_SetPriorityGrouping>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f00:	f7ff ff3e 	bl	8001d80 <__NVIC_GetPriorityGrouping>
 8001f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	6978      	ldr	r0, [r7, #20]
 8001f0c:	f7ff ff8e 	bl	8001e2c <NVIC_EncodePriority>
 8001f10:	4602      	mov	r2, r0
 8001f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff5d 	bl	8001dd8 <__NVIC_SetPriority>
}
 8001f1e:	bf00      	nop
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff31 	bl	8001d9c <__NVIC_EnableIRQ>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff ffa2 	bl	8001e94 <SysTick_Config>
 8001f50:	4603      	mov	r3, r0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d004      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2280      	movs	r2, #128	; 0x80
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e00c      	b.n	8001f92 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2205      	movs	r2, #5
 8001f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0201 	bic.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fac:	b2db      	uxtb	r3, r3
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
 8001fd6:	e159      	b.n	800228c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fd8:	2201      	movs	r2, #1
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	f040 8148 	bne.w	8002286 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d005      	beq.n	800200e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800200a:	2b02      	cmp	r3, #2
 800200c:	d130      	bne.n	8002070 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	2203      	movs	r2, #3
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002044:	2201      	movs	r2, #1
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f003 0201 	and.w	r2, r3, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b03      	cmp	r3, #3
 800207a:	d017      	beq.n	80020ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2203      	movs	r2, #3
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d123      	bne.n	8002100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	08da      	lsrs	r2, r3, #3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3208      	adds	r2, #8
 80020c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	220f      	movs	r2, #15
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	08da      	lsrs	r2, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3208      	adds	r2, #8
 80020fa:	69b9      	ldr	r1, [r7, #24]
 80020fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0203 	and.w	r2, r3, #3
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80a2 	beq.w	8002286 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	4b57      	ldr	r3, [pc, #348]	; (80022a4 <HAL_GPIO_Init+0x2e8>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	4a56      	ldr	r2, [pc, #344]	; (80022a4 <HAL_GPIO_Init+0x2e8>)
 800214c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002150:	6453      	str	r3, [r2, #68]	; 0x44
 8002152:	4b54      	ldr	r3, [pc, #336]	; (80022a4 <HAL_GPIO_Init+0x2e8>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800215e:	4a52      	ldr	r2, [pc, #328]	; (80022a8 <HAL_GPIO_Init+0x2ec>)
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	3302      	adds	r3, #2
 8002166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	220f      	movs	r2, #15
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a49      	ldr	r2, [pc, #292]	; (80022ac <HAL_GPIO_Init+0x2f0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d019      	beq.n	80021be <HAL_GPIO_Init+0x202>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a48      	ldr	r2, [pc, #288]	; (80022b0 <HAL_GPIO_Init+0x2f4>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <HAL_GPIO_Init+0x1fe>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a47      	ldr	r2, [pc, #284]	; (80022b4 <HAL_GPIO_Init+0x2f8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00d      	beq.n	80021b6 <HAL_GPIO_Init+0x1fa>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a46      	ldr	r2, [pc, #280]	; (80022b8 <HAL_GPIO_Init+0x2fc>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <HAL_GPIO_Init+0x1f6>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a45      	ldr	r2, [pc, #276]	; (80022bc <HAL_GPIO_Init+0x300>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d101      	bne.n	80021ae <HAL_GPIO_Init+0x1f2>
 80021aa:	2304      	movs	r3, #4
 80021ac:	e008      	b.n	80021c0 <HAL_GPIO_Init+0x204>
 80021ae:	2307      	movs	r3, #7
 80021b0:	e006      	b.n	80021c0 <HAL_GPIO_Init+0x204>
 80021b2:	2303      	movs	r3, #3
 80021b4:	e004      	b.n	80021c0 <HAL_GPIO_Init+0x204>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e002      	b.n	80021c0 <HAL_GPIO_Init+0x204>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <HAL_GPIO_Init+0x204>
 80021be:	2300      	movs	r3, #0
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	f002 0203 	and.w	r2, r2, #3
 80021c6:	0092      	lsls	r2, r2, #2
 80021c8:	4093      	lsls	r3, r2
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d0:	4935      	ldr	r1, [pc, #212]	; (80022a8 <HAL_GPIO_Init+0x2ec>)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	3302      	adds	r3, #2
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021de:	4b38      	ldr	r3, [pc, #224]	; (80022c0 <HAL_GPIO_Init+0x304>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002202:	4a2f      	ldr	r2, [pc, #188]	; (80022c0 <HAL_GPIO_Init+0x304>)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002208:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <HAL_GPIO_Init+0x304>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800222c:	4a24      	ldr	r2, [pc, #144]	; (80022c0 <HAL_GPIO_Init+0x304>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002232:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <HAL_GPIO_Init+0x304>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002256:	4a1a      	ldr	r2, [pc, #104]	; (80022c0 <HAL_GPIO_Init+0x304>)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800225c:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <HAL_GPIO_Init+0x304>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002280:	4a0f      	ldr	r2, [pc, #60]	; (80022c0 <HAL_GPIO_Init+0x304>)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3301      	adds	r3, #1
 800228a:	61fb      	str	r3, [r7, #28]
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	2b0f      	cmp	r3, #15
 8002290:	f67f aea2 	bls.w	8001fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3724      	adds	r7, #36	; 0x24
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40013800 	.word	0x40013800
 80022ac:	40020000 	.word	0x40020000
 80022b0:	40020400 	.word	0x40020400
 80022b4:	40020800 	.word	0x40020800
 80022b8:	40020c00 	.word	0x40020c00
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40013c00 	.word	0x40013c00

080022c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	e001      	b.n	80022e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
 8002300:	4613      	mov	r3, r2
 8002302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002304:	787b      	ldrb	r3, [r7, #1]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002310:	e003      	b.n	800231a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	041a      	lsls	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	619a      	str	r2, [r3, #24]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e12b      	b.n	8002592 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d106      	bne.n	8002354 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff fa38 	bl	80017c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2224      	movs	r2, #36	; 0x24
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800237a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800238a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800238c:	f002 ffc0 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 8002390:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4a81      	ldr	r2, [pc, #516]	; (800259c <HAL_I2C_Init+0x274>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d807      	bhi.n	80023ac <HAL_I2C_Init+0x84>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4a80      	ldr	r2, [pc, #512]	; (80025a0 <HAL_I2C_Init+0x278>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	bf94      	ite	ls
 80023a4:	2301      	movls	r3, #1
 80023a6:	2300      	movhi	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	e006      	b.n	80023ba <HAL_I2C_Init+0x92>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4a7d      	ldr	r2, [pc, #500]	; (80025a4 <HAL_I2C_Init+0x27c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	bf94      	ite	ls
 80023b4:	2301      	movls	r3, #1
 80023b6:	2300      	movhi	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0e7      	b.n	8002592 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4a78      	ldr	r2, [pc, #480]	; (80025a8 <HAL_I2C_Init+0x280>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	0c9b      	lsrs	r3, r3, #18
 80023cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	430a      	orrs	r2, r1
 80023e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4a6a      	ldr	r2, [pc, #424]	; (800259c <HAL_I2C_Init+0x274>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d802      	bhi.n	80023fc <HAL_I2C_Init+0xd4>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	3301      	adds	r3, #1
 80023fa:	e009      	b.n	8002410 <HAL_I2C_Init+0xe8>
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	4a69      	ldr	r2, [pc, #420]	; (80025ac <HAL_I2C_Init+0x284>)
 8002408:	fba2 2303 	umull	r2, r3, r2, r3
 800240c:	099b      	lsrs	r3, r3, #6
 800240e:	3301      	adds	r3, #1
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	430b      	orrs	r3, r1
 8002416:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002422:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	495c      	ldr	r1, [pc, #368]	; (800259c <HAL_I2C_Init+0x274>)
 800242c:	428b      	cmp	r3, r1
 800242e:	d819      	bhi.n	8002464 <HAL_I2C_Init+0x13c>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1e59      	subs	r1, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	fbb1 f3f3 	udiv	r3, r1, r3
 800243e:	1c59      	adds	r1, r3, #1
 8002440:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002444:	400b      	ands	r3, r1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00a      	beq.n	8002460 <HAL_I2C_Init+0x138>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1e59      	subs	r1, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fbb1 f3f3 	udiv	r3, r1, r3
 8002458:	3301      	adds	r3, #1
 800245a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800245e:	e051      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 8002460:	2304      	movs	r3, #4
 8002462:	e04f      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d111      	bne.n	8002490 <HAL_I2C_Init+0x168>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1e58      	subs	r0, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6859      	ldr	r1, [r3, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	440b      	add	r3, r1
 800247a:	fbb0 f3f3 	udiv	r3, r0, r3
 800247e:	3301      	adds	r3, #1
 8002480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002484:	2b00      	cmp	r3, #0
 8002486:	bf0c      	ite	eq
 8002488:	2301      	moveq	r3, #1
 800248a:	2300      	movne	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	e012      	b.n	80024b6 <HAL_I2C_Init+0x18e>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1e58      	subs	r0, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	0099      	lsls	r1, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a6:	3301      	adds	r3, #1
 80024a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Init+0x196>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e022      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10e      	bne.n	80024e4 <HAL_I2C_Init+0x1bc>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1e58      	subs	r0, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	460b      	mov	r3, r1
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	440b      	add	r3, r1
 80024d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d8:	3301      	adds	r3, #1
 80024da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e2:	e00f      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1e58      	subs	r0, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6859      	ldr	r1, [r3, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	0099      	lsls	r1, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024fa:	3301      	adds	r3, #1
 80024fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002500:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	6809      	ldr	r1, [r1, #0]
 8002508:	4313      	orrs	r3, r2
 800250a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69da      	ldr	r2, [r3, #28]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002532:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6911      	ldr	r1, [r2, #16]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68d2      	ldr	r2, [r2, #12]
 800253e:	4311      	orrs	r1, r2
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	430b      	orrs	r3, r1
 8002546:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	000186a0 	.word	0x000186a0
 80025a0:	001e847f 	.word	0x001e847f
 80025a4:	003d08ff 	.word	0x003d08ff
 80025a8:	431bde83 	.word	0x431bde83
 80025ac:	10624dd3 	.word	0x10624dd3

080025b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	4608      	mov	r0, r1
 80025ba:	4611      	mov	r1, r2
 80025bc:	461a      	mov	r2, r3
 80025be:	4603      	mov	r3, r0
 80025c0:	817b      	strh	r3, [r7, #10]
 80025c2:	460b      	mov	r3, r1
 80025c4:	813b      	strh	r3, [r7, #8]
 80025c6:	4613      	mov	r3, r2
 80025c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025ca:	f7ff fb85 	bl	8001cd8 <HAL_GetTick>
 80025ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b20      	cmp	r3, #32
 80025da:	f040 80d9 	bne.w	8002790 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	2319      	movs	r3, #25
 80025e4:	2201      	movs	r2, #1
 80025e6:	496d      	ldr	r1, [pc, #436]	; (800279c <HAL_I2C_Mem_Write+0x1ec>)
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f001 fff7 	bl	80045dc <I2C_WaitOnFlagUntilTimeout>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80025f4:	2302      	movs	r3, #2
 80025f6:	e0cc      	b.n	8002792 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_I2C_Mem_Write+0x56>
 8002602:	2302      	movs	r3, #2
 8002604:	e0c5      	b.n	8002792 <HAL_I2C_Mem_Write+0x1e2>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b01      	cmp	r3, #1
 800261a:	d007      	beq.n	800262c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0201 	orr.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800263a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2221      	movs	r2, #33	; 0x21
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2240      	movs	r2, #64	; 0x40
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a3a      	ldr	r2, [r7, #32]
 8002656:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800265c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4a4d      	ldr	r2, [pc, #308]	; (80027a0 <HAL_I2C_Mem_Write+0x1f0>)
 800266c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800266e:	88f8      	ldrh	r0, [r7, #6]
 8002670:	893a      	ldrh	r2, [r7, #8]
 8002672:	8979      	ldrh	r1, [r7, #10]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	9301      	str	r3, [sp, #4]
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	4603      	mov	r3, r0
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f001 fd86 	bl	8004190 <I2C_RequestMemoryWrite>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d052      	beq.n	8002730 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e081      	b.n	8002792 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f002 f878 	bl	8004788 <I2C_WaitOnTXEFlagUntilTimeout>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00d      	beq.n	80026ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d107      	bne.n	80026b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e06b      	b.n	8002792 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	781a      	ldrb	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d11b      	bne.n	8002730 <HAL_I2C_Mem_Write+0x180>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d017      	beq.n	8002730 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	781a      	ldrb	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1aa      	bne.n	800268e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f002 f864 	bl	800480a <I2C_WaitOnBTFFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00d      	beq.n	8002764 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	2b04      	cmp	r3, #4
 800274e:	d107      	bne.n	8002760 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e016      	b.n	8002792 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	e000      	b.n	8002792 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002790:	2302      	movs	r3, #2
  }
}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	00100002 	.word	0x00100002
 80027a0:	ffff0000 	.word	0xffff0000

080027a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08c      	sub	sp, #48	; 0x30
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	4608      	mov	r0, r1
 80027ae:	4611      	mov	r1, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	817b      	strh	r3, [r7, #10]
 80027b6:	460b      	mov	r3, r1
 80027b8:	813b      	strh	r3, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027be:	f7ff fa8b 	bl	8001cd8 <HAL_GetTick>
 80027c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b20      	cmp	r3, #32
 80027ce:	f040 8208 	bne.w	8002be2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	2319      	movs	r3, #25
 80027d8:	2201      	movs	r2, #1
 80027da:	497b      	ldr	r1, [pc, #492]	; (80029c8 <HAL_I2C_Mem_Read+0x224>)
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f001 fefd 	bl	80045dc <I2C_WaitOnFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80027e8:	2302      	movs	r3, #2
 80027ea:	e1fb      	b.n	8002be4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_I2C_Mem_Read+0x56>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e1f4      	b.n	8002be4 <HAL_I2C_Mem_Read+0x440>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b01      	cmp	r3, #1
 800280e:	d007      	beq.n	8002820 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800282e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2222      	movs	r2, #34	; 0x22
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2240      	movs	r2, #64	; 0x40
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800284a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002850:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4a5b      	ldr	r2, [pc, #364]	; (80029cc <HAL_I2C_Mem_Read+0x228>)
 8002860:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002862:	88f8      	ldrh	r0, [r7, #6]
 8002864:	893a      	ldrh	r2, [r7, #8]
 8002866:	8979      	ldrh	r1, [r7, #10]
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	9301      	str	r3, [sp, #4]
 800286c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	4603      	mov	r3, r0
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f001 fd22 	bl	80042bc <I2C_RequestMemoryRead>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e1b0      	b.n	8002be4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002886:	2b00      	cmp	r3, #0
 8002888:	d113      	bne.n	80028b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800288a:	2300      	movs	r3, #0
 800288c:	623b      	str	r3, [r7, #32]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	623b      	str	r3, [r7, #32]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	623b      	str	r3, [r7, #32]
 800289e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	e184      	b.n	8002bbc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d11b      	bne.n	80028f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	e164      	b.n	8002bbc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d11b      	bne.n	8002932 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002908:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002918:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800291a:	2300      	movs	r3, #0
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	61bb      	str	r3, [r7, #24]
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	e144      	b.n	8002bbc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002948:	e138      	b.n	8002bbc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294e:	2b03      	cmp	r3, #3
 8002950:	f200 80f1 	bhi.w	8002b36 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002958:	2b01      	cmp	r3, #1
 800295a:	d123      	bne.n	80029a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800295c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f001 ffc5 	bl	80048f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e139      	b.n	8002be4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029a2:	e10b      	b.n	8002bbc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d14e      	bne.n	8002a4a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b2:	2200      	movs	r2, #0
 80029b4:	4906      	ldr	r1, [pc, #24]	; (80029d0 <HAL_I2C_Mem_Read+0x22c>)
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f001 fe10 	bl	80045dc <I2C_WaitOnFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d008      	beq.n	80029d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e10e      	b.n	8002be4 <HAL_I2C_Mem_Read+0x440>
 80029c6:	bf00      	nop
 80029c8:	00100002 	.word	0x00100002
 80029cc:	ffff0000 	.word	0xffff0000
 80029d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a48:	e0b8      	b.n	8002bbc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a50:	2200      	movs	r2, #0
 8002a52:	4966      	ldr	r1, [pc, #408]	; (8002bec <HAL_I2C_Mem_Read+0x448>)
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f001 fdc1 	bl	80045dc <I2C_WaitOnFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0bf      	b.n	8002be4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aac:	2200      	movs	r2, #0
 8002aae:	494f      	ldr	r1, [pc, #316]	; (8002bec <HAL_I2C_Mem_Read+0x448>)
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f001 fd93 	bl	80045dc <I2C_WaitOnFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e091      	b.n	8002be4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ace:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b34:	e042      	b.n	8002bbc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f001 fed8 	bl	80048f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e04c      	b.n	8002be4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	691a      	ldr	r2, [r3, #16]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d118      	bne.n	8002bbc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f47f aec2 	bne.w	800294a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e000      	b.n	8002be4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002be2:	2302      	movs	r3, #2
  }
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3728      	adds	r7, #40	; 0x28
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	00010004 	.word	0x00010004

08002bf0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c10:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c18:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d003      	beq.n	8002c28 <HAL_I2C_EV_IRQHandler+0x38>
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	2b40      	cmp	r3, #64	; 0x40
 8002c24:	f040 80c1 	bne.w	8002daa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10d      	bne.n	8002c5e <HAL_I2C_EV_IRQHandler+0x6e>
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002c48:	d003      	beq.n	8002c52 <HAL_I2C_EV_IRQHandler+0x62>
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002c50:	d101      	bne.n	8002c56 <HAL_I2C_EV_IRQHandler+0x66>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <HAL_I2C_EV_IRQHandler+0x68>
 8002c56:	2300      	movs	r3, #0
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	f000 8132 	beq.w	8002ec2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00c      	beq.n	8002c82 <HAL_I2C_EV_IRQHandler+0x92>
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	0a5b      	lsrs	r3, r3, #9
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d006      	beq.n	8002c82 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f001 fec0 	bl	80049fa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fcdc 	bl	8003638 <I2C_Master_SB>
 8002c80:	e092      	b.n	8002da8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	08db      	lsrs	r3, r3, #3
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <HAL_I2C_EV_IRQHandler+0xb2>
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	0a5b      	lsrs	r3, r3, #9
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fd52 	bl	8003744 <I2C_Master_ADD10>
 8002ca0:	e082      	b.n	8002da8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	085b      	lsrs	r3, r3, #1
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d009      	beq.n	8002cc2 <HAL_I2C_EV_IRQHandler+0xd2>
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	0a5b      	lsrs	r3, r3, #9
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fd6c 	bl	8003798 <I2C_Master_ADDR>
 8002cc0:	e072      	b.n	8002da8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	089b      	lsrs	r3, r3, #2
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d03b      	beq.n	8002d46 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cdc:	f000 80f3 	beq.w	8002ec6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	09db      	lsrs	r3, r3, #7
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00f      	beq.n	8002d0c <HAL_I2C_EV_IRQHandler+0x11c>
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	0a9b      	lsrs	r3, r3, #10
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d009      	beq.n	8002d0c <HAL_I2C_EV_IRQHandler+0x11c>
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d103      	bne.n	8002d0c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f94c 	bl	8002fa2 <I2C_MasterTransmit_TXE>
 8002d0a:	e04d      	b.n	8002da8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	089b      	lsrs	r3, r3, #2
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80d6 	beq.w	8002ec6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	0a5b      	lsrs	r3, r3, #9
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 80cf 	beq.w	8002ec6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002d28:	7bbb      	ldrb	r3, [r7, #14]
 8002d2a:	2b21      	cmp	r3, #33	; 0x21
 8002d2c:	d103      	bne.n	8002d36 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f9d3 	bl	80030da <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d34:	e0c7      	b.n	8002ec6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	2b40      	cmp	r3, #64	; 0x40
 8002d3a:	f040 80c4 	bne.w	8002ec6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fa41 	bl	80031c6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d44:	e0bf      	b.n	8002ec6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d54:	f000 80b7 	beq.w	8002ec6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	099b      	lsrs	r3, r3, #6
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00f      	beq.n	8002d84 <HAL_I2C_EV_IRQHandler+0x194>
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	0a9b      	lsrs	r3, r3, #10
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d009      	beq.n	8002d84 <HAL_I2C_EV_IRQHandler+0x194>
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	089b      	lsrs	r3, r3, #2
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d103      	bne.n	8002d84 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fab6 	bl	80032ee <I2C_MasterReceive_RXNE>
 8002d82:	e011      	b.n	8002da8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	089b      	lsrs	r3, r3, #2
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 809a 	beq.w	8002ec6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	0a5b      	lsrs	r3, r3, #9
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 8093 	beq.w	8002ec6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 fb5f 	bl	8003464 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002da6:	e08e      	b.n	8002ec6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002da8:	e08d      	b.n	8002ec6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d004      	beq.n	8002dbc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	e007      	b.n	8002dcc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	085b      	lsrs	r3, r3, #1
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d012      	beq.n	8002dfe <HAL_I2C_EV_IRQHandler+0x20e>
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	0a5b      	lsrs	r3, r3, #9
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00c      	beq.n	8002dfe <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002df4:	69b9      	ldr	r1, [r7, #24]
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 ff1d 	bl	8003c36 <I2C_Slave_ADDR>
 8002dfc:	e066      	b.n	8002ecc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <HAL_I2C_EV_IRQHandler+0x22e>
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	0a5b      	lsrs	r3, r3, #9
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 ff58 	bl	8003ccc <I2C_Slave_STOPF>
 8002e1c:	e056      	b.n	8002ecc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e1e:	7bbb      	ldrb	r3, [r7, #14]
 8002e20:	2b21      	cmp	r3, #33	; 0x21
 8002e22:	d002      	beq.n	8002e2a <HAL_I2C_EV_IRQHandler+0x23a>
 8002e24:	7bbb      	ldrb	r3, [r7, #14]
 8002e26:	2b29      	cmp	r3, #41	; 0x29
 8002e28:	d125      	bne.n	8002e76 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	09db      	lsrs	r3, r3, #7
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00f      	beq.n	8002e56 <HAL_I2C_EV_IRQHandler+0x266>
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	0a9b      	lsrs	r3, r3, #10
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d009      	beq.n	8002e56 <HAL_I2C_EV_IRQHandler+0x266>
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	089b      	lsrs	r3, r3, #2
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d103      	bne.n	8002e56 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fe33 	bl	8003aba <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e54:	e039      	b.n	8002eca <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	089b      	lsrs	r3, r3, #2
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d033      	beq.n	8002eca <HAL_I2C_EV_IRQHandler+0x2da>
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	0a5b      	lsrs	r3, r3, #9
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d02d      	beq.n	8002eca <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fe60 	bl	8003b34 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e74:	e029      	b.n	8002eca <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	099b      	lsrs	r3, r3, #6
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00f      	beq.n	8002ea2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	0a9b      	lsrs	r3, r3, #10
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	089b      	lsrs	r3, r3, #2
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d103      	bne.n	8002ea2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fe6b 	bl	8003b76 <I2C_SlaveReceive_RXNE>
 8002ea0:	e014      	b.n	8002ecc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	089b      	lsrs	r3, r3, #2
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00e      	beq.n	8002ecc <HAL_I2C_EV_IRQHandler+0x2dc>
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	0a5b      	lsrs	r3, r3, #9
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d008      	beq.n	8002ecc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fe99 	bl	8003bf2 <I2C_SlaveReceive_BTF>
 8002ec0:	e004      	b.n	8002ecc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002ec2:	bf00      	nop
 8002ec4:	e002      	b.n	8002ecc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ec6:	bf00      	nop
 8002ec8:	e000      	b.n	8002ecc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002eca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002ecc:	3720      	adds	r7, #32
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	70fb      	strb	r3, [r7, #3]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fb8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d150      	bne.n	800306a <I2C_MasterTransmit_TXE+0xc8>
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	2b21      	cmp	r3, #33	; 0x21
 8002fcc:	d14d      	bne.n	800306a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d01d      	beq.n	8003010 <I2C_MasterTransmit_TXE+0x6e>
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d01a      	beq.n	8003010 <I2C_MasterTransmit_TXE+0x6e>
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fe0:	d016      	beq.n	8003010 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ff0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2211      	movs	r2, #17
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff ff62 	bl	8002ed2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800300e:	e060      	b.n	80030d2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800301e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b40      	cmp	r3, #64	; 0x40
 8003048:	d107      	bne.n	800305a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff ff7d 	bl	8002f52 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003058:	e03b      	b.n	80030d2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff ff35 	bl	8002ed2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003068:	e033      	b.n	80030d2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	2b21      	cmp	r3, #33	; 0x21
 800306e:	d005      	beq.n	800307c <I2C_MasterTransmit_TXE+0xda>
 8003070:	7bbb      	ldrb	r3, [r7, #14]
 8003072:	2b40      	cmp	r3, #64	; 0x40
 8003074:	d12d      	bne.n	80030d2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	2b22      	cmp	r3, #34	; 0x22
 800307a:	d12a      	bne.n	80030d2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d108      	bne.n	8003098 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003094:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003096:	e01c      	b.n	80030d2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b40      	cmp	r3, #64	; 0x40
 80030a2:	d103      	bne.n	80030ac <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f88e 	bl	80031c6 <I2C_MemoryTransmit_TXE_BTF>
}
 80030aa:	e012      	b.n	80030d2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	781a      	ldrb	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030d0:	e7ff      	b.n	80030d2 <I2C_MasterTransmit_TXE+0x130>
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b21      	cmp	r3, #33	; 0x21
 80030f2:	d164      	bne.n	80031be <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d012      	beq.n	8003124 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	781a      	ldrb	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003122:	e04c      	b.n	80031be <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b08      	cmp	r3, #8
 8003128:	d01d      	beq.n	8003166 <I2C_MasterTransmit_BTF+0x8c>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b20      	cmp	r3, #32
 800312e:	d01a      	beq.n	8003166 <I2C_MasterTransmit_BTF+0x8c>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003136:	d016      	beq.n	8003166 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003146:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2211      	movs	r2, #17
 800314c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff feb7 	bl	8002ed2 <HAL_I2C_MasterTxCpltCallback>
}
 8003164:	e02b      	b.n	80031be <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003174:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003184:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b40      	cmp	r3, #64	; 0x40
 800319e:	d107      	bne.n	80031b0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff fed2 	bl	8002f52 <HAL_I2C_MemTxCpltCallback>
}
 80031ae:	e006      	b.n	80031be <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff fe8a 	bl	8002ed2 <HAL_I2C_MasterTxCpltCallback>
}
 80031be:	bf00      	nop
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d11d      	bne.n	800321a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d10b      	bne.n	80031fe <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f6:	1c9a      	adds	r2, r3, #2
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80031fc:	e073      	b.n	80032e6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003202:	b29b      	uxth	r3, r3
 8003204:	121b      	asrs	r3, r3, #8
 8003206:	b2da      	uxtb	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003218:	e065      	b.n	80032e6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321e:	2b01      	cmp	r3, #1
 8003220:	d10b      	bne.n	800323a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003226:	b2da      	uxtb	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003238:	e055      	b.n	80032e6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800323e:	2b02      	cmp	r3, #2
 8003240:	d151      	bne.n	80032e6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	2b22      	cmp	r3, #34	; 0x22
 8003246:	d10d      	bne.n	8003264 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003256:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003262:	e040      	b.n	80032e6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d015      	beq.n	800329a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	2b21      	cmp	r3, #33	; 0x21
 8003272:	d112      	bne.n	800329a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	781a      	ldrb	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003298:	e025      	b.n	80032e6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d120      	bne.n	80032e6 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	2b21      	cmp	r3, #33	; 0x21
 80032a8:	d11d      	bne.n	80032e6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032b8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff fe36 	bl	8002f52 <HAL_I2C_MemTxCpltCallback>
}
 80032e6:	bf00      	nop
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b084      	sub	sp, #16
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b22      	cmp	r3, #34	; 0x22
 8003300:	f040 80ac 	bne.w	800345c <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003308:	b29b      	uxth	r3, r3
 800330a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b03      	cmp	r3, #3
 8003310:	d921      	bls.n	8003356 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b03      	cmp	r3, #3
 8003340:	f040 808c 	bne.w	800345c <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003352:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003354:	e082      	b.n	800345c <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	2b02      	cmp	r3, #2
 800335c:	d075      	beq.n	800344a <I2C_MasterReceive_RXNE+0x15c>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d002      	beq.n	800336a <I2C_MasterReceive_RXNE+0x7c>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d16f      	bne.n	800344a <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f001 fa8e 	bl	800488c <I2C_WaitOnSTOPRequestThroughIT>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d142      	bne.n	80033fc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003384:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003394:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b40      	cmp	r3, #64	; 0x40
 80033ce:	d10a      	bne.n	80033e6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff fdc1 	bl	8002f66 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80033e4:	e03a      	b.n	800345c <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2212      	movs	r2, #18
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff fd76 	bl	8002ee6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80033fa:	e02f      	b.n	800345c <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800340a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff fd99 	bl	8002f7a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003448:	e008      	b.n	800345c <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003458:	605a      	str	r2, [r3, #4]
}
 800345a:	e7ff      	b.n	800345c <I2C_MasterReceive_RXNE+0x16e>
 800345c:	bf00      	nop
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b04      	cmp	r3, #4
 800347a:	d11b      	bne.n	80034b4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800348a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80034b2:	e0bd      	b.n	8003630 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d129      	bne.n	8003512 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034cc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d00a      	beq.n	80034ea <I2C_MasterReceive_BTF+0x86>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d007      	beq.n	80034ea <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034e8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003510:	e08e      	b.n	8003630 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003516:	b29b      	uxth	r3, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d176      	bne.n	800360a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d002      	beq.n	8003528 <I2C_MasterReceive_BTF+0xc4>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2b10      	cmp	r3, #16
 8003526:	d108      	bne.n	800353a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	e019      	b.n	800356e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b04      	cmp	r3, #4
 800353e:	d002      	beq.n	8003546 <I2C_MasterReceive_BTF+0xe2>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d108      	bne.n	8003558 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	e00a      	b.n	800356e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b10      	cmp	r3, #16
 800355c:	d007      	beq.n	800356e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800356c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80035c8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d10a      	bne.n	80035f4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff fcba 	bl	8002f66 <HAL_I2C_MemRxCpltCallback>
}
 80035f2:	e01d      	b.n	8003630 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2212      	movs	r2, #18
 8003600:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff fc6f 	bl	8002ee6 <HAL_I2C_MasterRxCpltCallback>
}
 8003608:	e012      	b.n	8003630 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003630:	bf00      	nop
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b40      	cmp	r3, #64	; 0x40
 800364a:	d117      	bne.n	800367c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003650:	2b00      	cmp	r3, #0
 8003652:	d109      	bne.n	8003668 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003658:	b2db      	uxtb	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003664:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003666:	e067      	b.n	8003738 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	b2da      	uxtb	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	611a      	str	r2, [r3, #16]
}
 800367a:	e05d      	b.n	8003738 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003684:	d133      	bne.n	80036ee <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b21      	cmp	r3, #33	; 0x21
 8003690:	d109      	bne.n	80036a6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	b2db      	uxtb	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036a2:	611a      	str	r2, [r3, #16]
 80036a4:	e008      	b.n	80036b8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d004      	beq.n	80036ca <I2C_Master_SB+0x92>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d108      	bne.n	80036dc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d032      	beq.n	8003738 <I2C_Master_SB+0x100>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d02d      	beq.n	8003738 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ea:	605a      	str	r2, [r3, #4]
}
 80036ec:	e024      	b.n	8003738 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10e      	bne.n	8003714 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	11db      	asrs	r3, r3, #7
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	f003 0306 	and.w	r3, r3, #6
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f063 030f 	orn	r3, r3, #15
 800370a:	b2da      	uxtb	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	611a      	str	r2, [r3, #16]
}
 8003712:	e011      	b.n	8003738 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003718:	2b01      	cmp	r3, #1
 800371a:	d10d      	bne.n	8003738 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003720:	b29b      	uxth	r3, r3
 8003722:	11db      	asrs	r3, r3, #7
 8003724:	b2db      	uxtb	r3, r3
 8003726:	f003 0306 	and.w	r3, r3, #6
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f063 030e 	orn	r3, r3, #14
 8003730:	b2da      	uxtb	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	611a      	str	r2, [r3, #16]
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003750:	b2da      	uxtb	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375c:	2b00      	cmp	r3, #0
 800375e:	d004      	beq.n	800376a <I2C_Master_ADD10+0x26>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003766:	2b00      	cmp	r3, #0
 8003768:	d108      	bne.n	800377c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00c      	beq.n	800378c <I2C_Master_ADD10+0x48>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003778:	2b00      	cmp	r3, #0
 800377a:	d007      	beq.n	800378c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800378a:	605a      	str	r2, [r3, #4]
  }
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003798:	b480      	push	{r7}
 800379a:	b091      	sub	sp, #68	; 0x44
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b22      	cmp	r3, #34	; 0x22
 80037c0:	f040 8169 	bne.w	8003a96 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10f      	bne.n	80037ec <I2C_Master_ADDR+0x54>
 80037cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80037d0:	2b40      	cmp	r3, #64	; 0x40
 80037d2:	d10b      	bne.n	80037ec <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d4:	2300      	movs	r3, #0
 80037d6:	633b      	str	r3, [r7, #48]	; 0x30
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	633b      	str	r3, [r7, #48]	; 0x30
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	633b      	str	r3, [r7, #48]	; 0x30
 80037e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ea:	e160      	b.n	8003aae <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d11d      	bne.n	8003830 <I2C_Master_ADDR+0x98>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037fc:	d118      	bne.n	8003830 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fe:	2300      	movs	r3, #0
 8003800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003812:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003822:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	651a      	str	r2, [r3, #80]	; 0x50
 800382e:	e13e      	b.n	8003aae <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d113      	bne.n	8003862 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383a:	2300      	movs	r3, #0
 800383c:	62bb      	str	r3, [r7, #40]	; 0x28
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	62bb      	str	r3, [r7, #40]	; 0x28
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	e115      	b.n	8003a8e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	2b01      	cmp	r3, #1
 800386a:	f040 808a 	bne.w	8003982 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003874:	d137      	bne.n	80038e6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003884:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003894:	d113      	bne.n	80038be <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a6:	2300      	movs	r3, #0
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	e0e7      	b.n	8003a8e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038be:	2300      	movs	r3, #0
 80038c0:	623b      	str	r3, [r7, #32]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	623b      	str	r3, [r7, #32]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	623b      	str	r3, [r7, #32]
 80038d2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	e0d3      	b.n	8003a8e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80038e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d02e      	beq.n	800394a <I2C_Master_ADDR+0x1b2>
 80038ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	d02b      	beq.n	800394a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80038f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f4:	2b12      	cmp	r3, #18
 80038f6:	d102      	bne.n	80038fe <I2C_Master_ADDR+0x166>
 80038f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d125      	bne.n	800394a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80038fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003900:	2b04      	cmp	r3, #4
 8003902:	d00e      	beq.n	8003922 <I2C_Master_ADDR+0x18a>
 8003904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003906:	2b02      	cmp	r3, #2
 8003908:	d00b      	beq.n	8003922 <I2C_Master_ADDR+0x18a>
 800390a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390c:	2b10      	cmp	r3, #16
 800390e:	d008      	beq.n	8003922 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	e007      	b.n	8003932 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003930:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003932:	2300      	movs	r3, #0
 8003934:	61fb      	str	r3, [r7, #28]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	61fb      	str	r3, [r7, #28]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	e0a1      	b.n	8003a8e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003958:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800395a:	2300      	movs	r3, #0
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	61bb      	str	r3, [r7, #24]
 800396e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	e085      	b.n	8003a8e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d14d      	bne.n	8003a28 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800398c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398e:	2b04      	cmp	r3, #4
 8003990:	d016      	beq.n	80039c0 <I2C_Master_ADDR+0x228>
 8003992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003994:	2b02      	cmp	r3, #2
 8003996:	d013      	beq.n	80039c0 <I2C_Master_ADDR+0x228>
 8003998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399a:	2b10      	cmp	r3, #16
 800399c:	d010      	beq.n	80039c0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ac:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	e007      	b.n	80039d0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039ce:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039de:	d117      	bne.n	8003a10 <I2C_Master_ADDR+0x278>
 80039e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039e6:	d00b      	beq.n	8003a00 <I2C_Master_ADDR+0x268>
 80039e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d008      	beq.n	8003a00 <I2C_Master_ADDR+0x268>
 80039ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d005      	beq.n	8003a00 <I2C_Master_ADDR+0x268>
 80039f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f6:	2b10      	cmp	r3, #16
 80039f8:	d002      	beq.n	8003a00 <I2C_Master_ADDR+0x268>
 80039fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d107      	bne.n	8003a10 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a0e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	e032      	b.n	8003a8e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a36:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a46:	d117      	bne.n	8003a78 <I2C_Master_ADDR+0x2e0>
 8003a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a4e:	d00b      	beq.n	8003a68 <I2C_Master_ADDR+0x2d0>
 8003a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d008      	beq.n	8003a68 <I2C_Master_ADDR+0x2d0>
 8003a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d005      	beq.n	8003a68 <I2C_Master_ADDR+0x2d0>
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5e:	2b10      	cmp	r3, #16
 8003a60:	d002      	beq.n	8003a68 <I2C_Master_ADDR+0x2d0>
 8003a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d107      	bne.n	8003a78 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a76:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003a94:	e00b      	b.n	8003aae <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
}
 8003aac:	e7ff      	b.n	8003aae <I2C_Master_ADDR+0x316>
 8003aae:	bf00      	nop
 8003ab0:	3744      	adds	r7, #68	; 0x44
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d02b      	beq.n	8003b2c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	781a      	ldrb	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d114      	bne.n	8003b2c <I2C_SlaveTransmit_TXE+0x72>
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	2b29      	cmp	r3, #41	; 0x29
 8003b06:	d111      	bne.n	8003b2c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b16:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2221      	movs	r2, #33	; 0x21
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2228      	movs	r2, #40	; 0x28
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7ff f9e7 	bl	8002efa <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d011      	beq.n	8003b6a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	781a      	ldrb	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b84:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d02c      	beq.n	8003bea <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d114      	bne.n	8003bea <I2C_SlaveReceive_RXNE+0x74>
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8003bc4:	d111      	bne.n	8003bea <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2222      	movs	r2, #34	; 0x22
 8003bda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2228      	movs	r2, #40	; 0x28
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff f992 	bl	8002f0e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003bea:	bf00      	nop
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d012      	beq.n	8003c2a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003c40:	2300      	movs	r3, #0
 8003c42:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c50:	2b28      	cmp	r3, #40	; 0x28
 8003c52:	d127      	bne.n	8003ca4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c62:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	089b      	lsrs	r3, r3, #2
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003c70:	2301      	movs	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	09db      	lsrs	r3, r3, #7
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d103      	bne.n	8003c88 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	81bb      	strh	r3, [r7, #12]
 8003c86:	e002      	b.n	8003c8e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003c96:	89ba      	ldrh	r2, [r7, #12]
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff f940 	bl	8002f22 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003ca2:	e00e      	b.n	8003cc2 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60bb      	str	r3, [r7, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003cc2:	bf00      	nop
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cda:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003cec:	2300      	movs	r3, #0
 8003cee:	60bb      	str	r3, [r7, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d18:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d28:	d172      	bne.n	8003e10 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	2b22      	cmp	r3, #34	; 0x22
 8003d2e:	d002      	beq.n	8003d36 <I2C_Slave_STOPF+0x6a>
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	2b2a      	cmp	r3, #42	; 0x2a
 8003d34:	d135      	bne.n	8003da2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f043 0204 	orr.w	r2, r3, #4
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d68:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fe f915 	bl	8001f9e <HAL_DMA_GetState>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d049      	beq.n	8003e0e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7e:	4a69      	ldr	r2, [pc, #420]	; (8003f24 <I2C_Slave_STOPF+0x258>)
 8003d80:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe f8e7 	bl	8001f5a <HAL_DMA_Abort_IT>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d03d      	beq.n	8003e0e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003da0:	e035      	b.n	8003e0e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f043 0204 	orr.w	r2, r3, #4
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dd4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fe f8df 	bl	8001f9e <HAL_DMA_GetState>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d014      	beq.n	8003e10 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dea:	4a4e      	ldr	r2, [pc, #312]	; (8003f24 <I2C_Slave_STOPF+0x258>)
 8003dec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fe f8b1 	bl	8001f5a <HAL_DMA_Abort_IT>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d008      	beq.n	8003e10 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e08:	4610      	mov	r0, r2
 8003e0a:	4798      	blx	r3
 8003e0c:	e000      	b.n	8003e10 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e0e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d03e      	beq.n	8003e98 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d112      	bne.n	8003e4e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e58:	2b40      	cmp	r3, #64	; 0x40
 8003e5a:	d112      	bne.n	8003e82 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	f043 0204 	orr.w	r2, r3, #4
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f843 	bl	8003f2c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003ea6:	e039      	b.n	8003f1c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8003eac:	d109      	bne.n	8003ec2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2228      	movs	r2, #40	; 0x28
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff f826 	bl	8002f0e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b28      	cmp	r3, #40	; 0x28
 8003ecc:	d111      	bne.n	8003ef2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a15      	ldr	r2, [pc, #84]	; (8003f28 <I2C_Slave_STOPF+0x25c>)
 8003ed2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff f827 	bl	8002f3e <HAL_I2C_ListenCpltCallback>
}
 8003ef0:	e014      	b.n	8003f1c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	2b22      	cmp	r3, #34	; 0x22
 8003ef8:	d002      	beq.n	8003f00 <I2C_Slave_STOPF+0x234>
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	2b22      	cmp	r3, #34	; 0x22
 8003efe:	d10d      	bne.n	8003f1c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fe fff9 	bl	8002f0e <HAL_I2C_SlaveRxCpltCallback>
}
 8003f1c:	bf00      	nop
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	0800448d 	.word	0x0800448d
 8003f28:	ffff0000 	.word	0xffff0000

08003f2c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f42:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f44:	7bbb      	ldrb	r3, [r7, #14]
 8003f46:	2b10      	cmp	r3, #16
 8003f48:	d002      	beq.n	8003f50 <I2C_ITError+0x24>
 8003f4a:	7bbb      	ldrb	r3, [r7, #14]
 8003f4c:	2b40      	cmp	r3, #64	; 0x40
 8003f4e:	d10a      	bne.n	8003f66 <I2C_ITError+0x3a>
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
 8003f52:	2b22      	cmp	r3, #34	; 0x22
 8003f54:	d107      	bne.n	8003f66 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f64:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f6c:	2b28      	cmp	r3, #40	; 0x28
 8003f6e:	d107      	bne.n	8003f80 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2228      	movs	r2, #40	; 0x28
 8003f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f7e:	e015      	b.n	8003fac <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f8e:	d00a      	beq.n	8003fa6 <I2C_ITError+0x7a>
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	2b60      	cmp	r3, #96	; 0x60
 8003f94:	d007      	beq.n	8003fa6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fba:	d162      	bne.n	8004082 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d020      	beq.n	800401c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fde:	4a6a      	ldr	r2, [pc, #424]	; (8004188 <I2C_ITError+0x25c>)
 8003fe0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fd ffb7 	bl	8001f5a <HAL_DMA_Abort_IT>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 8089 	beq.w	8004106 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004016:	4610      	mov	r0, r2
 8004018:	4798      	blx	r3
 800401a:	e074      	b.n	8004106 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004020:	4a59      	ldr	r2, [pc, #356]	; (8004188 <I2C_ITError+0x25c>)
 8004022:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004028:	4618      	mov	r0, r3
 800402a:	f7fd ff96 	bl	8001f5a <HAL_DMA_Abort_IT>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d068      	beq.n	8004106 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403e:	2b40      	cmp	r3, #64	; 0x40
 8004040:	d10b      	bne.n	800405a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0201 	bic.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800407c:	4610      	mov	r0, r2
 800407e:	4798      	blx	r3
 8004080:	e041      	b.n	8004106 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b60      	cmp	r3, #96	; 0x60
 800408c:	d125      	bne.n	80040da <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a6:	2b40      	cmp	r3, #64	; 0x40
 80040a8:	d10b      	bne.n	80040c2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	b2d2      	uxtb	r2, r2
 80040b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0201 	bic.w	r2, r2, #1
 80040d0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fe ff5b 	bl	8002f8e <HAL_I2C_AbortCpltCallback>
 80040d8:	e015      	b.n	8004106 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e4:	2b40      	cmp	r3, #64	; 0x40
 80040e6:	d10b      	bne.n	8004100 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7fe ff3a 	bl	8002f7a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10e      	bne.n	8004134 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800411c:	2b00      	cmp	r3, #0
 800411e:	d109      	bne.n	8004134 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004126:	2b00      	cmp	r3, #0
 8004128:	d104      	bne.n	8004134 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004130:	2b00      	cmp	r3, #0
 8004132:	d007      	beq.n	8004144 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004142:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b04      	cmp	r3, #4
 8004156:	d113      	bne.n	8004180 <I2C_ITError+0x254>
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	2b28      	cmp	r3, #40	; 0x28
 800415c:	d110      	bne.n	8004180 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a0a      	ldr	r2, [pc, #40]	; (800418c <I2C_ITError+0x260>)
 8004162:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fe fedf 	bl	8002f3e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004180:	bf00      	nop
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	0800448d 	.word	0x0800448d
 800418c:	ffff0000 	.word	0xffff0000

08004190 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	4608      	mov	r0, r1
 800419a:	4611      	mov	r1, r2
 800419c:	461a      	mov	r2, r3
 800419e:	4603      	mov	r3, r0
 80041a0:	817b      	strh	r3, [r7, #10]
 80041a2:	460b      	mov	r3, r1
 80041a4:	813b      	strh	r3, [r7, #8]
 80041a6:	4613      	mov	r3, r2
 80041a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fa08 	bl	80045dc <I2C_WaitOnFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00d      	beq.n	80041ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e0:	d103      	bne.n	80041ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e05f      	b.n	80042ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041ee:	897b      	ldrh	r3, [r7, #10]
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	461a      	mov	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	6a3a      	ldr	r2, [r7, #32]
 8004202:	492d      	ldr	r1, [pc, #180]	; (80042b8 <I2C_RequestMemoryWrite+0x128>)
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 fa40 	bl	800468a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e04c      	b.n	80042ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800422a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422c:	6a39      	ldr	r1, [r7, #32]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 faaa 	bl	8004788 <I2C_WaitOnTXEFlagUntilTimeout>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00d      	beq.n	8004256 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	2b04      	cmp	r3, #4
 8004240:	d107      	bne.n	8004252 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004250:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e02b      	b.n	80042ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004256:	88fb      	ldrh	r3, [r7, #6]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d105      	bne.n	8004268 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800425c:	893b      	ldrh	r3, [r7, #8]
 800425e:	b2da      	uxtb	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	611a      	str	r2, [r3, #16]
 8004266:	e021      	b.n	80042ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004268:	893b      	ldrh	r3, [r7, #8]
 800426a:	0a1b      	lsrs	r3, r3, #8
 800426c:	b29b      	uxth	r3, r3
 800426e:	b2da      	uxtb	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004278:	6a39      	ldr	r1, [r7, #32]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 fa84 	bl	8004788 <I2C_WaitOnTXEFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00d      	beq.n	80042a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	2b04      	cmp	r3, #4
 800428c:	d107      	bne.n	800429e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e005      	b.n	80042ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042a2:	893b      	ldrh	r3, [r7, #8]
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	00010002 	.word	0x00010002

080042bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	4608      	mov	r0, r1
 80042c6:	4611      	mov	r1, r2
 80042c8:	461a      	mov	r2, r3
 80042ca:	4603      	mov	r3, r0
 80042cc:	817b      	strh	r3, [r7, #10]
 80042ce:	460b      	mov	r3, r1
 80042d0:	813b      	strh	r3, [r7, #8]
 80042d2:	4613      	mov	r3, r2
 80042d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f96a 	bl	80045dc <I2C_WaitOnFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00d      	beq.n	800432a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800431c:	d103      	bne.n	8004326 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004324:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e0aa      	b.n	8004480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800432a:	897b      	ldrh	r3, [r7, #10]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	461a      	mov	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004338:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	6a3a      	ldr	r2, [r7, #32]
 800433e:	4952      	ldr	r1, [pc, #328]	; (8004488 <I2C_RequestMemoryRead+0x1cc>)
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f9a2 	bl	800468a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e097      	b.n	8004480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004368:	6a39      	ldr	r1, [r7, #32]
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 fa0c 	bl	8004788 <I2C_WaitOnTXEFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00d      	beq.n	8004392 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	2b04      	cmp	r3, #4
 800437c:	d107      	bne.n	800438e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800438c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e076      	b.n	8004480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004392:	88fb      	ldrh	r3, [r7, #6]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d105      	bne.n	80043a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004398:	893b      	ldrh	r3, [r7, #8]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	611a      	str	r2, [r3, #16]
 80043a2:	e021      	b.n	80043e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043a4:	893b      	ldrh	r3, [r7, #8]
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b4:	6a39      	ldr	r1, [r7, #32]
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f9e6 	bl	8004788 <I2C_WaitOnTXEFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00d      	beq.n	80043de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d107      	bne.n	80043da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e050      	b.n	8004480 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043de:	893b      	ldrh	r3, [r7, #8]
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ea:	6a39      	ldr	r1, [r7, #32]
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f9cb 	bl	8004788 <I2C_WaitOnTXEFlagUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00d      	beq.n	8004414 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d107      	bne.n	8004410 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800440e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e035      	b.n	8004480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004422:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	2200      	movs	r2, #0
 800442c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 f8d3 	bl	80045dc <I2C_WaitOnFlagUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00d      	beq.n	8004458 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800444a:	d103      	bne.n	8004454 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004452:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e013      	b.n	8004480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004458:	897b      	ldrh	r3, [r7, #10]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	f043 0301 	orr.w	r3, r3, #1
 8004460:	b2da      	uxtb	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	6a3a      	ldr	r2, [r7, #32]
 800446c:	4906      	ldr	r1, [pc, #24]	; (8004488 <I2C_RequestMemoryRead+0x1cc>)
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 f90b 	bl	800468a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	00010002 	.word	0x00010002

0800448c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80044a6:	4b4b      	ldr	r3, [pc, #300]	; (80045d4 <I2C_DMAAbort+0x148>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	08db      	lsrs	r3, r3, #3
 80044ac:	4a4a      	ldr	r2, [pc, #296]	; (80045d8 <I2C_DMAAbort+0x14c>)
 80044ae:	fba2 2303 	umull	r2, r3, r2, r3
 80044b2:	0a1a      	lsrs	r2, r3, #8
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	00da      	lsls	r2, r3, #3
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	f043 0220 	orr.w	r2, r3, #32
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80044d2:	e00a      	b.n	80044ea <I2C_DMAAbort+0x5e>
    }
    count--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044e8:	d0ea      	beq.n	80044c0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f6:	2200      	movs	r2, #0
 80044f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	2200      	movs	r2, #0
 8004508:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004518:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2200      	movs	r2, #0
 800451e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452c:	2200      	movs	r2, #0
 800452e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453c:	2200      	movs	r2, #0
 800453e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0201 	bic.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b60      	cmp	r3, #96	; 0x60
 800455a:	d10e      	bne.n	800457a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2200      	movs	r2, #0
 8004570:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004572:	6978      	ldr	r0, [r7, #20]
 8004574:	f7fe fd0b 	bl	8002f8e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004578:	e027      	b.n	80045ca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800457a:	7cfb      	ldrb	r3, [r7, #19]
 800457c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004580:	2b28      	cmp	r3, #40	; 0x28
 8004582:	d117      	bne.n	80045b4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2200      	movs	r2, #0
 80045a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2228      	movs	r2, #40	; 0x28
 80045ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045b2:	e007      	b.n	80045c4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80045c4:	6978      	ldr	r0, [r7, #20]
 80045c6:	f7fe fcd8 	bl	8002f7a <HAL_I2C_ErrorCallback>
}
 80045ca:	bf00      	nop
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000000 	.word	0x20000000
 80045d8:	14f8b589 	.word	0x14f8b589

080045dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	603b      	str	r3, [r7, #0]
 80045e8:	4613      	mov	r3, r2
 80045ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045ec:	e025      	b.n	800463a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f4:	d021      	beq.n	800463a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f6:	f7fd fb6f 	bl	8001cd8 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d302      	bcc.n	800460c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d116      	bne.n	800463a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f043 0220 	orr.w	r2, r3, #32
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e023      	b.n	8004682 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	0c1b      	lsrs	r3, r3, #16
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b01      	cmp	r3, #1
 8004642:	d10d      	bne.n	8004660 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	43da      	mvns	r2, r3
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	4013      	ands	r3, r2
 8004650:	b29b      	uxth	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	bf0c      	ite	eq
 8004656:	2301      	moveq	r3, #1
 8004658:	2300      	movne	r3, #0
 800465a:	b2db      	uxtb	r3, r3
 800465c:	461a      	mov	r2, r3
 800465e:	e00c      	b.n	800467a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	43da      	mvns	r2, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4013      	ands	r3, r2
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	bf0c      	ite	eq
 8004672:	2301      	moveq	r3, #1
 8004674:	2300      	movne	r3, #0
 8004676:	b2db      	uxtb	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	429a      	cmp	r2, r3
 800467e:	d0b6      	beq.n	80045ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	607a      	str	r2, [r7, #4]
 8004696:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004698:	e051      	b.n	800473e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a8:	d123      	bne.n	80046f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	f043 0204 	orr.w	r2, r3, #4
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e046      	b.n	8004780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d021      	beq.n	800473e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046fa:	f7fd faed 	bl	8001cd8 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	429a      	cmp	r2, r3
 8004708:	d302      	bcc.n	8004710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d116      	bne.n	800473e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	f043 0220 	orr.w	r2, r3, #32
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e020      	b.n	8004780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	0c1b      	lsrs	r3, r3, #16
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	d10c      	bne.n	8004762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	43da      	mvns	r2, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4013      	ands	r3, r2
 8004754:	b29b      	uxth	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	bf14      	ite	ne
 800475a:	2301      	movne	r3, #1
 800475c:	2300      	moveq	r3, #0
 800475e:	b2db      	uxtb	r3, r3
 8004760:	e00b      	b.n	800477a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	43da      	mvns	r2, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	4013      	ands	r3, r2
 800476e:	b29b      	uxth	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	bf14      	ite	ne
 8004774:	2301      	movne	r3, #1
 8004776:	2300      	moveq	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d18d      	bne.n	800469a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004794:	e02d      	b.n	80047f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 f900 	bl	800499c <I2C_IsAcknowledgeFailed>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e02d      	b.n	8004802 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ac:	d021      	beq.n	80047f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ae:	f7fd fa93 	bl	8001cd8 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d302      	bcc.n	80047c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d116      	bne.n	80047f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f043 0220 	orr.w	r2, r3, #32
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e007      	b.n	8004802 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fc:	2b80      	cmp	r3, #128	; 0x80
 80047fe:	d1ca      	bne.n	8004796 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b084      	sub	sp, #16
 800480e:	af00      	add	r7, sp, #0
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004816:	e02d      	b.n	8004874 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 f8bf 	bl	800499c <I2C_IsAcknowledgeFailed>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e02d      	b.n	8004884 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482e:	d021      	beq.n	8004874 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004830:	f7fd fa52 	bl	8001cd8 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	429a      	cmp	r2, r3
 800483e:	d302      	bcc.n	8004846 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d116      	bne.n	8004874 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	f043 0220 	orr.w	r2, r3, #32
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e007      	b.n	8004884 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b04      	cmp	r3, #4
 8004880:	d1ca      	bne.n	8004818 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004898:	4b13      	ldr	r3, [pc, #76]	; (80048e8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	08db      	lsrs	r3, r3, #3
 800489e:	4a13      	ldr	r2, [pc, #76]	; (80048ec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80048a0:	fba2 2303 	umull	r2, r3, r2, r3
 80048a4:	0a1a      	lsrs	r2, r3, #8
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3b01      	subs	r3, #1
 80048b2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d107      	bne.n	80048ca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f043 0220 	orr.w	r2, r3, #32
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e008      	b.n	80048dc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d8:	d0e9      	beq.n	80048ae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	20000000 	.word	0x20000000
 80048ec:	14f8b589 	.word	0x14f8b589

080048f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048fc:	e042      	b.n	8004984 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	2b10      	cmp	r3, #16
 800490a:	d119      	bne.n	8004940 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0210 	mvn.w	r2, #16
 8004914:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e029      	b.n	8004994 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004940:	f7fd f9ca 	bl	8001cd8 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	429a      	cmp	r2, r3
 800494e:	d302      	bcc.n	8004956 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d116      	bne.n	8004984 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	f043 0220 	orr.w	r2, r3, #32
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e007      	b.n	8004994 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498e:	2b40      	cmp	r3, #64	; 0x40
 8004990:	d1b5      	bne.n	80048fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b2:	d11b      	bne.n	80049ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	f043 0204 	orr.w	r2, r3, #4
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004a0a:	d103      	bne.n	8004a14 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a12:	e007      	b.n	8004a24 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004a1c:	d102      	bne.n	8004a24 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2208      	movs	r2, #8
 8004a22:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e267      	b.n	8004f12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d075      	beq.n	8004b3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a4e:	4b88      	ldr	r3, [pc, #544]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 030c 	and.w	r3, r3, #12
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d00c      	beq.n	8004a74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a5a:	4b85      	ldr	r3, [pc, #532]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d112      	bne.n	8004a8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a66:	4b82      	ldr	r3, [pc, #520]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a72:	d10b      	bne.n	8004a8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a74:	4b7e      	ldr	r3, [pc, #504]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d05b      	beq.n	8004b38 <HAL_RCC_OscConfig+0x108>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d157      	bne.n	8004b38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e242      	b.n	8004f12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a94:	d106      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x74>
 8004a96:	4b76      	ldr	r3, [pc, #472]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a75      	ldr	r2, [pc, #468]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	e01d      	b.n	8004ae0 <HAL_RCC_OscConfig+0xb0>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004aac:	d10c      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x98>
 8004aae:	4b70      	ldr	r3, [pc, #448]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a6f      	ldr	r2, [pc, #444]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	4b6d      	ldr	r3, [pc, #436]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a6c      	ldr	r2, [pc, #432]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	e00b      	b.n	8004ae0 <HAL_RCC_OscConfig+0xb0>
 8004ac8:	4b69      	ldr	r3, [pc, #420]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a68      	ldr	r2, [pc, #416]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	4b66      	ldr	r3, [pc, #408]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a65      	ldr	r2, [pc, #404]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d013      	beq.n	8004b10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae8:	f7fd f8f6 	bl	8001cd8 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004af0:	f7fd f8f2 	bl	8001cd8 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b64      	cmp	r3, #100	; 0x64
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e207      	b.n	8004f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b02:	4b5b      	ldr	r3, [pc, #364]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0f0      	beq.n	8004af0 <HAL_RCC_OscConfig+0xc0>
 8004b0e:	e014      	b.n	8004b3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b10:	f7fd f8e2 	bl	8001cd8 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b18:	f7fd f8de 	bl	8001cd8 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b64      	cmp	r3, #100	; 0x64
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e1f3      	b.n	8004f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b2a:	4b51      	ldr	r3, [pc, #324]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f0      	bne.n	8004b18 <HAL_RCC_OscConfig+0xe8>
 8004b36:	e000      	b.n	8004b3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d063      	beq.n	8004c0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b46:	4b4a      	ldr	r3, [pc, #296]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00b      	beq.n	8004b6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b52:	4b47      	ldr	r3, [pc, #284]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d11c      	bne.n	8004b98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b5e:	4b44      	ldr	r3, [pc, #272]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d116      	bne.n	8004b98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b6a:	4b41      	ldr	r3, [pc, #260]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <HAL_RCC_OscConfig+0x152>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d001      	beq.n	8004b82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e1c7      	b.n	8004f12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b82:	4b3b      	ldr	r3, [pc, #236]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	4937      	ldr	r1, [pc, #220]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b96:	e03a      	b.n	8004c0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d020      	beq.n	8004be2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ba0:	4b34      	ldr	r3, [pc, #208]	; (8004c74 <HAL_RCC_OscConfig+0x244>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba6:	f7fd f897 	bl	8001cd8 <HAL_GetTick>
 8004baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bae:	f7fd f893 	bl	8001cd8 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e1a8      	b.n	8004f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc0:	4b2b      	ldr	r3, [pc, #172]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0f0      	beq.n	8004bae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bcc:	4b28      	ldr	r3, [pc, #160]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	4925      	ldr	r1, [pc, #148]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	600b      	str	r3, [r1, #0]
 8004be0:	e015      	b.n	8004c0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004be2:	4b24      	ldr	r3, [pc, #144]	; (8004c74 <HAL_RCC_OscConfig+0x244>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be8:	f7fd f876 	bl	8001cd8 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bf0:	f7fd f872 	bl	8001cd8 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e187      	b.n	8004f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c02:	4b1b      	ldr	r3, [pc, #108]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f0      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d036      	beq.n	8004c88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d016      	beq.n	8004c50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c22:	4b15      	ldr	r3, [pc, #84]	; (8004c78 <HAL_RCC_OscConfig+0x248>)
 8004c24:	2201      	movs	r2, #1
 8004c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c28:	f7fd f856 	bl	8001cd8 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c30:	f7fd f852 	bl	8001cd8 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e167      	b.n	8004f12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c42:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <HAL_RCC_OscConfig+0x240>)
 8004c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f0      	beq.n	8004c30 <HAL_RCC_OscConfig+0x200>
 8004c4e:	e01b      	b.n	8004c88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c50:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <HAL_RCC_OscConfig+0x248>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c56:	f7fd f83f 	bl	8001cd8 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c5c:	e00e      	b.n	8004c7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c5e:	f7fd f83b 	bl	8001cd8 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d907      	bls.n	8004c7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e150      	b.n	8004f12 <HAL_RCC_OscConfig+0x4e2>
 8004c70:	40023800 	.word	0x40023800
 8004c74:	42470000 	.word	0x42470000
 8004c78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c7c:	4b88      	ldr	r3, [pc, #544]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1ea      	bne.n	8004c5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 8097 	beq.w	8004dc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c96:	2300      	movs	r3, #0
 8004c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c9a:	4b81      	ldr	r3, [pc, #516]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10f      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60bb      	str	r3, [r7, #8]
 8004caa:	4b7d      	ldr	r3, [pc, #500]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	4a7c      	ldr	r2, [pc, #496]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8004cb6:	4b7a      	ldr	r3, [pc, #488]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cbe:	60bb      	str	r3, [r7, #8]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc6:	4b77      	ldr	r3, [pc, #476]	; (8004ea4 <HAL_RCC_OscConfig+0x474>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d118      	bne.n	8004d04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cd2:	4b74      	ldr	r3, [pc, #464]	; (8004ea4 <HAL_RCC_OscConfig+0x474>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a73      	ldr	r2, [pc, #460]	; (8004ea4 <HAL_RCC_OscConfig+0x474>)
 8004cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cde:	f7fc fffb 	bl	8001cd8 <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce6:	f7fc fff7 	bl	8001cd8 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e10c      	b.n	8004f12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf8:	4b6a      	ldr	r3, [pc, #424]	; (8004ea4 <HAL_RCC_OscConfig+0x474>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0f0      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d106      	bne.n	8004d1a <HAL_RCC_OscConfig+0x2ea>
 8004d0c:	4b64      	ldr	r3, [pc, #400]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d10:	4a63      	ldr	r2, [pc, #396]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004d12:	f043 0301 	orr.w	r3, r3, #1
 8004d16:	6713      	str	r3, [r2, #112]	; 0x70
 8004d18:	e01c      	b.n	8004d54 <HAL_RCC_OscConfig+0x324>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	2b05      	cmp	r3, #5
 8004d20:	d10c      	bne.n	8004d3c <HAL_RCC_OscConfig+0x30c>
 8004d22:	4b5f      	ldr	r3, [pc, #380]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d26:	4a5e      	ldr	r2, [pc, #376]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004d28:	f043 0304 	orr.w	r3, r3, #4
 8004d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d2e:	4b5c      	ldr	r3, [pc, #368]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d32:	4a5b      	ldr	r2, [pc, #364]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004d34:	f043 0301 	orr.w	r3, r3, #1
 8004d38:	6713      	str	r3, [r2, #112]	; 0x70
 8004d3a:	e00b      	b.n	8004d54 <HAL_RCC_OscConfig+0x324>
 8004d3c:	4b58      	ldr	r3, [pc, #352]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d40:	4a57      	ldr	r2, [pc, #348]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004d42:	f023 0301 	bic.w	r3, r3, #1
 8004d46:	6713      	str	r3, [r2, #112]	; 0x70
 8004d48:	4b55      	ldr	r3, [pc, #340]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4c:	4a54      	ldr	r2, [pc, #336]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004d4e:	f023 0304 	bic.w	r3, r3, #4
 8004d52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d015      	beq.n	8004d88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5c:	f7fc ffbc 	bl	8001cd8 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d62:	e00a      	b.n	8004d7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d64:	f7fc ffb8 	bl	8001cd8 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e0cb      	b.n	8004f12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7a:	4b49      	ldr	r3, [pc, #292]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0ee      	beq.n	8004d64 <HAL_RCC_OscConfig+0x334>
 8004d86:	e014      	b.n	8004db2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d88:	f7fc ffa6 	bl	8001cd8 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d8e:	e00a      	b.n	8004da6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d90:	f7fc ffa2 	bl	8001cd8 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e0b5      	b.n	8004f12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004da6:	4b3e      	ldr	r3, [pc, #248]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1ee      	bne.n	8004d90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d105      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004db8:	4b39      	ldr	r3, [pc, #228]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbc:	4a38      	ldr	r2, [pc, #224]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004dbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 80a1 	beq.w	8004f10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dce:	4b34      	ldr	r3, [pc, #208]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 030c 	and.w	r3, r3, #12
 8004dd6:	2b08      	cmp	r3, #8
 8004dd8:	d05c      	beq.n	8004e94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d141      	bne.n	8004e66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de2:	4b31      	ldr	r3, [pc, #196]	; (8004ea8 <HAL_RCC_OscConfig+0x478>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de8:	f7fc ff76 	bl	8001cd8 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004df0:	f7fc ff72 	bl	8001cd8 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e087      	b.n	8004f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e02:	4b27      	ldr	r3, [pc, #156]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1f0      	bne.n	8004df0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69da      	ldr	r2, [r3, #28]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	019b      	lsls	r3, r3, #6
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e24:	085b      	lsrs	r3, r3, #1
 8004e26:	3b01      	subs	r3, #1
 8004e28:	041b      	lsls	r3, r3, #16
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	061b      	lsls	r3, r3, #24
 8004e32:	491b      	ldr	r1, [pc, #108]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e38:	4b1b      	ldr	r3, [pc, #108]	; (8004ea8 <HAL_RCC_OscConfig+0x478>)
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3e:	f7fc ff4b 	bl	8001cd8 <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e44:	e008      	b.n	8004e58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e46:	f7fc ff47 	bl	8001cd8 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e05c      	b.n	8004f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e58:	4b11      	ldr	r3, [pc, #68]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0f0      	beq.n	8004e46 <HAL_RCC_OscConfig+0x416>
 8004e64:	e054      	b.n	8004f10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e66:	4b10      	ldr	r3, [pc, #64]	; (8004ea8 <HAL_RCC_OscConfig+0x478>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6c:	f7fc ff34 	bl	8001cd8 <HAL_GetTick>
 8004e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e74:	f7fc ff30 	bl	8001cd8 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e045      	b.n	8004f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e86:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <HAL_RCC_OscConfig+0x470>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1f0      	bne.n	8004e74 <HAL_RCC_OscConfig+0x444>
 8004e92:	e03d      	b.n	8004f10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d107      	bne.n	8004eac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e038      	b.n	8004f12 <HAL_RCC_OscConfig+0x4e2>
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	40007000 	.word	0x40007000
 8004ea8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004eac:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <HAL_RCC_OscConfig+0x4ec>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d028      	beq.n	8004f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d121      	bne.n	8004f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d11a      	bne.n	8004f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004edc:	4013      	ands	r3, r2
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ee2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d111      	bne.n	8004f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef2:	085b      	lsrs	r3, r3, #1
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d107      	bne.n	8004f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d001      	beq.n	8004f10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e000      	b.n	8004f12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40023800 	.word	0x40023800

08004f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e0cc      	b.n	80050ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f34:	4b68      	ldr	r3, [pc, #416]	; (80050d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d90c      	bls.n	8004f5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f42:	4b65      	ldr	r3, [pc, #404]	; (80050d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	b2d2      	uxtb	r2, r2
 8004f48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f4a:	4b63      	ldr	r3, [pc, #396]	; (80050d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d001      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e0b8      	b.n	80050ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d020      	beq.n	8004faa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f74:	4b59      	ldr	r3, [pc, #356]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	4a58      	ldr	r2, [pc, #352]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d005      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f8c:	4b53      	ldr	r3, [pc, #332]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	4a52      	ldr	r2, [pc, #328]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f98:	4b50      	ldr	r3, [pc, #320]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	494d      	ldr	r1, [pc, #308]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d044      	beq.n	8005040 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d107      	bne.n	8004fce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fbe:	4b47      	ldr	r3, [pc, #284]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d119      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e07f      	b.n	80050ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d003      	beq.n	8004fde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d107      	bne.n	8004fee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fde:	4b3f      	ldr	r3, [pc, #252]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d109      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e06f      	b.n	80050ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fee:	4b3b      	ldr	r3, [pc, #236]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e067      	b.n	80050ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ffe:	4b37      	ldr	r3, [pc, #220]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f023 0203 	bic.w	r2, r3, #3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	4934      	ldr	r1, [pc, #208]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 800500c:	4313      	orrs	r3, r2
 800500e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005010:	f7fc fe62 	bl	8001cd8 <HAL_GetTick>
 8005014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005016:	e00a      	b.n	800502e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005018:	f7fc fe5e 	bl	8001cd8 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	f241 3288 	movw	r2, #5000	; 0x1388
 8005026:	4293      	cmp	r3, r2
 8005028:	d901      	bls.n	800502e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e04f      	b.n	80050ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502e:	4b2b      	ldr	r3, [pc, #172]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 020c 	and.w	r2, r3, #12
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	429a      	cmp	r2, r3
 800503e:	d1eb      	bne.n	8005018 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005040:	4b25      	ldr	r3, [pc, #148]	; (80050d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d20c      	bcs.n	8005068 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504e:	4b22      	ldr	r3, [pc, #136]	; (80050d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	b2d2      	uxtb	r2, r2
 8005054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005056:	4b20      	ldr	r3, [pc, #128]	; (80050d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d001      	beq.n	8005068 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e032      	b.n	80050ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b00      	cmp	r3, #0
 8005072:	d008      	beq.n	8005086 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005074:	4b19      	ldr	r3, [pc, #100]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	4916      	ldr	r1, [pc, #88]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	4313      	orrs	r3, r2
 8005084:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d009      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005092:	4b12      	ldr	r3, [pc, #72]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	490e      	ldr	r1, [pc, #56]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050a6:	f000 f821 	bl	80050ec <HAL_RCC_GetSysClockFreq>
 80050aa:	4602      	mov	r2, r0
 80050ac:	4b0b      	ldr	r3, [pc, #44]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	091b      	lsrs	r3, r3, #4
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	490a      	ldr	r1, [pc, #40]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 80050b8:	5ccb      	ldrb	r3, [r1, r3]
 80050ba:	fa22 f303 	lsr.w	r3, r2, r3
 80050be:	4a09      	ldr	r2, [pc, #36]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 80050c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050c2:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <HAL_RCC_ClockConfig+0x1c8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fc fdc2 	bl	8001c50 <HAL_InitTick>

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	40023c00 	.word	0x40023c00
 80050dc:	40023800 	.word	0x40023800
 80050e0:	080090f0 	.word	0x080090f0
 80050e4:	20000000 	.word	0x20000000
 80050e8:	20000004 	.word	0x20000004

080050ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050f0:	b094      	sub	sp, #80	; 0x50
 80050f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	647b      	str	r3, [r7, #68]	; 0x44
 80050f8:	2300      	movs	r3, #0
 80050fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050fc:	2300      	movs	r3, #0
 80050fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005104:	4b79      	ldr	r3, [pc, #484]	; (80052ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f003 030c 	and.w	r3, r3, #12
 800510c:	2b08      	cmp	r3, #8
 800510e:	d00d      	beq.n	800512c <HAL_RCC_GetSysClockFreq+0x40>
 8005110:	2b08      	cmp	r3, #8
 8005112:	f200 80e1 	bhi.w	80052d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <HAL_RCC_GetSysClockFreq+0x34>
 800511a:	2b04      	cmp	r3, #4
 800511c:	d003      	beq.n	8005126 <HAL_RCC_GetSysClockFreq+0x3a>
 800511e:	e0db      	b.n	80052d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005120:	4b73      	ldr	r3, [pc, #460]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005122:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005124:	e0db      	b.n	80052de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005126:	4b73      	ldr	r3, [pc, #460]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005128:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800512a:	e0d8      	b.n	80052de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800512c:	4b6f      	ldr	r3, [pc, #444]	; (80052ec <HAL_RCC_GetSysClockFreq+0x200>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005134:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005136:	4b6d      	ldr	r3, [pc, #436]	; (80052ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d063      	beq.n	800520a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005142:	4b6a      	ldr	r3, [pc, #424]	; (80052ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	099b      	lsrs	r3, r3, #6
 8005148:	2200      	movs	r2, #0
 800514a:	63bb      	str	r3, [r7, #56]	; 0x38
 800514c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005154:	633b      	str	r3, [r7, #48]	; 0x30
 8005156:	2300      	movs	r3, #0
 8005158:	637b      	str	r3, [r7, #52]	; 0x34
 800515a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800515e:	4622      	mov	r2, r4
 8005160:	462b      	mov	r3, r5
 8005162:	f04f 0000 	mov.w	r0, #0
 8005166:	f04f 0100 	mov.w	r1, #0
 800516a:	0159      	lsls	r1, r3, #5
 800516c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005170:	0150      	lsls	r0, r2, #5
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4621      	mov	r1, r4
 8005178:	1a51      	subs	r1, r2, r1
 800517a:	6139      	str	r1, [r7, #16]
 800517c:	4629      	mov	r1, r5
 800517e:	eb63 0301 	sbc.w	r3, r3, r1
 8005182:	617b      	str	r3, [r7, #20]
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	f04f 0300 	mov.w	r3, #0
 800518c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005190:	4659      	mov	r1, fp
 8005192:	018b      	lsls	r3, r1, #6
 8005194:	4651      	mov	r1, sl
 8005196:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800519a:	4651      	mov	r1, sl
 800519c:	018a      	lsls	r2, r1, #6
 800519e:	4651      	mov	r1, sl
 80051a0:	ebb2 0801 	subs.w	r8, r2, r1
 80051a4:	4659      	mov	r1, fp
 80051a6:	eb63 0901 	sbc.w	r9, r3, r1
 80051aa:	f04f 0200 	mov.w	r2, #0
 80051ae:	f04f 0300 	mov.w	r3, #0
 80051b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051be:	4690      	mov	r8, r2
 80051c0:	4699      	mov	r9, r3
 80051c2:	4623      	mov	r3, r4
 80051c4:	eb18 0303 	adds.w	r3, r8, r3
 80051c8:	60bb      	str	r3, [r7, #8]
 80051ca:	462b      	mov	r3, r5
 80051cc:	eb49 0303 	adc.w	r3, r9, r3
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051de:	4629      	mov	r1, r5
 80051e0:	024b      	lsls	r3, r1, #9
 80051e2:	4621      	mov	r1, r4
 80051e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051e8:	4621      	mov	r1, r4
 80051ea:	024a      	lsls	r2, r1, #9
 80051ec:	4610      	mov	r0, r2
 80051ee:	4619      	mov	r1, r3
 80051f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f2:	2200      	movs	r2, #0
 80051f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051fc:	f7fb fd4c 	bl	8000c98 <__aeabi_uldivmod>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4613      	mov	r3, r2
 8005206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005208:	e058      	b.n	80052bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800520a:	4b38      	ldr	r3, [pc, #224]	; (80052ec <HAL_RCC_GetSysClockFreq+0x200>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	099b      	lsrs	r3, r3, #6
 8005210:	2200      	movs	r2, #0
 8005212:	4618      	mov	r0, r3
 8005214:	4611      	mov	r1, r2
 8005216:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800521a:	623b      	str	r3, [r7, #32]
 800521c:	2300      	movs	r3, #0
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
 8005220:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005224:	4642      	mov	r2, r8
 8005226:	464b      	mov	r3, r9
 8005228:	f04f 0000 	mov.w	r0, #0
 800522c:	f04f 0100 	mov.w	r1, #0
 8005230:	0159      	lsls	r1, r3, #5
 8005232:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005236:	0150      	lsls	r0, r2, #5
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	4641      	mov	r1, r8
 800523e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005242:	4649      	mov	r1, r9
 8005244:	eb63 0b01 	sbc.w	fp, r3, r1
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005254:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005258:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800525c:	ebb2 040a 	subs.w	r4, r2, sl
 8005260:	eb63 050b 	sbc.w	r5, r3, fp
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	00eb      	lsls	r3, r5, #3
 800526e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005272:	00e2      	lsls	r2, r4, #3
 8005274:	4614      	mov	r4, r2
 8005276:	461d      	mov	r5, r3
 8005278:	4643      	mov	r3, r8
 800527a:	18e3      	adds	r3, r4, r3
 800527c:	603b      	str	r3, [r7, #0]
 800527e:	464b      	mov	r3, r9
 8005280:	eb45 0303 	adc.w	r3, r5, r3
 8005284:	607b      	str	r3, [r7, #4]
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005292:	4629      	mov	r1, r5
 8005294:	028b      	lsls	r3, r1, #10
 8005296:	4621      	mov	r1, r4
 8005298:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800529c:	4621      	mov	r1, r4
 800529e:	028a      	lsls	r2, r1, #10
 80052a0:	4610      	mov	r0, r2
 80052a2:	4619      	mov	r1, r3
 80052a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052a6:	2200      	movs	r2, #0
 80052a8:	61bb      	str	r3, [r7, #24]
 80052aa:	61fa      	str	r2, [r7, #28]
 80052ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052b0:	f7fb fcf2 	bl	8000c98 <__aeabi_uldivmod>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4613      	mov	r3, r2
 80052ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052bc:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <HAL_RCC_GetSysClockFreq+0x200>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	0c1b      	lsrs	r3, r3, #16
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	3301      	adds	r3, #1
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80052cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052d6:	e002      	b.n	80052de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052d8:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80052da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3750      	adds	r7, #80	; 0x50
 80052e4:	46bd      	mov	sp, r7
 80052e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ea:	bf00      	nop
 80052ec:	40023800 	.word	0x40023800
 80052f0:	00f42400 	.word	0x00f42400
 80052f4:	007a1200 	.word	0x007a1200

080052f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052fc:	4b03      	ldr	r3, [pc, #12]	; (800530c <HAL_RCC_GetHCLKFreq+0x14>)
 80052fe:	681b      	ldr	r3, [r3, #0]
}
 8005300:	4618      	mov	r0, r3
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	20000000 	.word	0x20000000

08005310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005314:	f7ff fff0 	bl	80052f8 <HAL_RCC_GetHCLKFreq>
 8005318:	4602      	mov	r2, r0
 800531a:	4b05      	ldr	r3, [pc, #20]	; (8005330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	0a9b      	lsrs	r3, r3, #10
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	4903      	ldr	r1, [pc, #12]	; (8005334 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005326:	5ccb      	ldrb	r3, [r1, r3]
 8005328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800532c:	4618      	mov	r0, r3
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40023800 	.word	0x40023800
 8005334:	08009100 	.word	0x08009100

08005338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800533c:	f7ff ffdc 	bl	80052f8 <HAL_RCC_GetHCLKFreq>
 8005340:	4602      	mov	r2, r0
 8005342:	4b05      	ldr	r3, [pc, #20]	; (8005358 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	0b5b      	lsrs	r3, r3, #13
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	4903      	ldr	r1, [pc, #12]	; (800535c <HAL_RCC_GetPCLK2Freq+0x24>)
 800534e:	5ccb      	ldrb	r3, [r1, r3]
 8005350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005354:	4618      	mov	r0, r3
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40023800 	.word	0x40023800
 800535c:	08009100 	.word	0x08009100

08005360 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e041      	b.n	80053f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fc fa6c 	bl	8001864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3304      	adds	r3, #4
 800539c:	4619      	mov	r1, r3
 800539e:	4610      	mov	r0, r2
 80053a0:	f000 f950 	bl	8005644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
	...

08005400 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b01      	cmp	r3, #1
 8005412:	d001      	beq.n	8005418 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e03c      	b.n	8005492 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1e      	ldr	r2, [pc, #120]	; (80054a0 <HAL_TIM_Base_Start+0xa0>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d018      	beq.n	800545c <HAL_TIM_Base_Start+0x5c>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005432:	d013      	beq.n	800545c <HAL_TIM_Base_Start+0x5c>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a1a      	ldr	r2, [pc, #104]	; (80054a4 <HAL_TIM_Base_Start+0xa4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d00e      	beq.n	800545c <HAL_TIM_Base_Start+0x5c>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a19      	ldr	r2, [pc, #100]	; (80054a8 <HAL_TIM_Base_Start+0xa8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d009      	beq.n	800545c <HAL_TIM_Base_Start+0x5c>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a17      	ldr	r2, [pc, #92]	; (80054ac <HAL_TIM_Base_Start+0xac>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d004      	beq.n	800545c <HAL_TIM_Base_Start+0x5c>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a16      	ldr	r2, [pc, #88]	; (80054b0 <HAL_TIM_Base_Start+0xb0>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d111      	bne.n	8005480 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b06      	cmp	r3, #6
 800546c:	d010      	beq.n	8005490 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f042 0201 	orr.w	r2, r2, #1
 800547c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547e:	e007      	b.n	8005490 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f042 0201 	orr.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40010000 	.word	0x40010000
 80054a4:	40000400 	.word	0x40000400
 80054a8:	40000800 	.word	0x40000800
 80054ac:	40000c00 	.word	0x40000c00
 80054b0:	40014000 	.word	0x40014000

080054b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_TIM_ConfigClockSource+0x1c>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e0b4      	b.n	800563a <HAL_TIM_ConfigClockSource+0x186>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005508:	d03e      	beq.n	8005588 <HAL_TIM_ConfigClockSource+0xd4>
 800550a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800550e:	f200 8087 	bhi.w	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005516:	f000 8086 	beq.w	8005626 <HAL_TIM_ConfigClockSource+0x172>
 800551a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551e:	d87f      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005520:	2b70      	cmp	r3, #112	; 0x70
 8005522:	d01a      	beq.n	800555a <HAL_TIM_ConfigClockSource+0xa6>
 8005524:	2b70      	cmp	r3, #112	; 0x70
 8005526:	d87b      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005528:	2b60      	cmp	r3, #96	; 0x60
 800552a:	d050      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x11a>
 800552c:	2b60      	cmp	r3, #96	; 0x60
 800552e:	d877      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005530:	2b50      	cmp	r3, #80	; 0x50
 8005532:	d03c      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0xfa>
 8005534:	2b50      	cmp	r3, #80	; 0x50
 8005536:	d873      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005538:	2b40      	cmp	r3, #64	; 0x40
 800553a:	d058      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x13a>
 800553c:	2b40      	cmp	r3, #64	; 0x40
 800553e:	d86f      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005540:	2b30      	cmp	r3, #48	; 0x30
 8005542:	d064      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x15a>
 8005544:	2b30      	cmp	r3, #48	; 0x30
 8005546:	d86b      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005548:	2b20      	cmp	r3, #32
 800554a:	d060      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x15a>
 800554c:	2b20      	cmp	r3, #32
 800554e:	d867      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005550:	2b00      	cmp	r3, #0
 8005552:	d05c      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x15a>
 8005554:	2b10      	cmp	r3, #16
 8005556:	d05a      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x15a>
 8005558:	e062      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6818      	ldr	r0, [r3, #0]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6899      	ldr	r1, [r3, #8]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f000 f965 	bl	8005838 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800557c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	609a      	str	r2, [r3, #8]
      break;
 8005586:	e04f      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	6899      	ldr	r1, [r3, #8]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f000 f94e 	bl	8005838 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055aa:	609a      	str	r2, [r3, #8]
      break;
 80055ac:	e03c      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6859      	ldr	r1, [r3, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	461a      	mov	r2, r3
 80055bc:	f000 f8c2 	bl	8005744 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2150      	movs	r1, #80	; 0x50
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 f91b 	bl	8005802 <TIM_ITRx_SetConfig>
      break;
 80055cc:	e02c      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6859      	ldr	r1, [r3, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	461a      	mov	r2, r3
 80055dc:	f000 f8e1 	bl	80057a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2160      	movs	r1, #96	; 0x60
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 f90b 	bl	8005802 <TIM_ITRx_SetConfig>
      break;
 80055ec:	e01c      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6818      	ldr	r0, [r3, #0]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6859      	ldr	r1, [r3, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	461a      	mov	r2, r3
 80055fc:	f000 f8a2 	bl	8005744 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2140      	movs	r1, #64	; 0x40
 8005606:	4618      	mov	r0, r3
 8005608:	f000 f8fb 	bl	8005802 <TIM_ITRx_SetConfig>
      break;
 800560c:	e00c      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4619      	mov	r1, r3
 8005618:	4610      	mov	r0, r2
 800561a:	f000 f8f2 	bl	8005802 <TIM_ITRx_SetConfig>
      break;
 800561e:	e003      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	73fb      	strb	r3, [r7, #15]
      break;
 8005624:	e000      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005626:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005638:	7bfb      	ldrb	r3, [r7, #15]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a34      	ldr	r2, [pc, #208]	; (8005728 <TIM_Base_SetConfig+0xe4>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00f      	beq.n	800567c <TIM_Base_SetConfig+0x38>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005662:	d00b      	beq.n	800567c <TIM_Base_SetConfig+0x38>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a31      	ldr	r2, [pc, #196]	; (800572c <TIM_Base_SetConfig+0xe8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d007      	beq.n	800567c <TIM_Base_SetConfig+0x38>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a30      	ldr	r2, [pc, #192]	; (8005730 <TIM_Base_SetConfig+0xec>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d003      	beq.n	800567c <TIM_Base_SetConfig+0x38>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a2f      	ldr	r2, [pc, #188]	; (8005734 <TIM_Base_SetConfig+0xf0>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d108      	bne.n	800568e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a25      	ldr	r2, [pc, #148]	; (8005728 <TIM_Base_SetConfig+0xe4>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d01b      	beq.n	80056ce <TIM_Base_SetConfig+0x8a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569c:	d017      	beq.n	80056ce <TIM_Base_SetConfig+0x8a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a22      	ldr	r2, [pc, #136]	; (800572c <TIM_Base_SetConfig+0xe8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d013      	beq.n	80056ce <TIM_Base_SetConfig+0x8a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a21      	ldr	r2, [pc, #132]	; (8005730 <TIM_Base_SetConfig+0xec>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00f      	beq.n	80056ce <TIM_Base_SetConfig+0x8a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a20      	ldr	r2, [pc, #128]	; (8005734 <TIM_Base_SetConfig+0xf0>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00b      	beq.n	80056ce <TIM_Base_SetConfig+0x8a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a1f      	ldr	r2, [pc, #124]	; (8005738 <TIM_Base_SetConfig+0xf4>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d007      	beq.n	80056ce <TIM_Base_SetConfig+0x8a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a1e      	ldr	r2, [pc, #120]	; (800573c <TIM_Base_SetConfig+0xf8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d003      	beq.n	80056ce <TIM_Base_SetConfig+0x8a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a1d      	ldr	r2, [pc, #116]	; (8005740 <TIM_Base_SetConfig+0xfc>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d108      	bne.n	80056e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4313      	orrs	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a08      	ldr	r2, [pc, #32]	; (8005728 <TIM_Base_SetConfig+0xe4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d103      	bne.n	8005714 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	615a      	str	r2, [r3, #20]
}
 800571a:	bf00      	nop
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40010000 	.word	0x40010000
 800572c:	40000400 	.word	0x40000400
 8005730:	40000800 	.word	0x40000800
 8005734:	40000c00 	.word	0x40000c00
 8005738:	40014000 	.word	0x40014000
 800573c:	40014400 	.word	0x40014400
 8005740:	40014800 	.word	0x40014800

08005744 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	f023 0201 	bic.w	r2, r3, #1
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800576e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f023 030a 	bic.w	r3, r3, #10
 8005780:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	4313      	orrs	r3, r2
 8005788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	621a      	str	r2, [r3, #32]
}
 8005796:	bf00      	nop
 8005798:	371c      	adds	r7, #28
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b087      	sub	sp, #28
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	f023 0210 	bic.w	r2, r3, #16
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	031b      	lsls	r3, r3, #12
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	621a      	str	r2, [r3, #32]
}
 80057f6:	bf00      	nop
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005802:	b480      	push	{r7}
 8005804:	b085      	sub	sp, #20
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005818:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	f043 0307 	orr.w	r3, r3, #7
 8005824:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	609a      	str	r2, [r3, #8]
}
 800582c:	bf00      	nop
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005852:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	021a      	lsls	r2, r3, #8
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	431a      	orrs	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4313      	orrs	r3, r2
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	4313      	orrs	r3, r2
 8005864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	609a      	str	r2, [r3, #8]
}
 800586c:	bf00      	nop
 800586e:	371c      	adds	r7, #28
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005888:	2b01      	cmp	r3, #1
 800588a:	d101      	bne.n	8005890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800588c:	2302      	movs	r3, #2
 800588e:	e050      	b.n	8005932 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a1c      	ldr	r2, [pc, #112]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d018      	beq.n	8005906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058dc:	d013      	beq.n	8005906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a18      	ldr	r2, [pc, #96]	; (8005944 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00e      	beq.n	8005906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a16      	ldr	r2, [pc, #88]	; (8005948 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d009      	beq.n	8005906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a15      	ldr	r2, [pc, #84]	; (800594c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d004      	beq.n	8005906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a13      	ldr	r2, [pc, #76]	; (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d10c      	bne.n	8005920 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800590c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	4313      	orrs	r3, r2
 8005916:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	40010000 	.word	0x40010000
 8005944:	40000400 	.word	0x40000400
 8005948:	40000800 	.word	0x40000800
 800594c:	40000c00 	.word	0x40000c00
 8005950:	40014000 	.word	0x40014000

08005954 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e03f      	b.n	80059e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7fb ff94 	bl	80018a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2224      	movs	r2, #36	; 0x24
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005996:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f929 	bl	8005bf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695a      	ldr	r2, [r3, #20]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2220      	movs	r2, #32
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b08a      	sub	sp, #40	; 0x28
 80059f2:	af02      	add	r7, sp, #8
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	603b      	str	r3, [r7, #0]
 80059fa:	4613      	mov	r3, r2
 80059fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b20      	cmp	r3, #32
 8005a0c:	d17c      	bne.n	8005b08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <HAL_UART_Transmit+0x2c>
 8005a14:	88fb      	ldrh	r3, [r7, #6]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e075      	b.n	8005b0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_UART_Transmit+0x3e>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e06e      	b.n	8005b0a <HAL_UART_Transmit+0x11c>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2221      	movs	r2, #33	; 0x21
 8005a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a42:	f7fc f949 	bl	8001cd8 <HAL_GetTick>
 8005a46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	88fa      	ldrh	r2, [r7, #6]
 8005a4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	88fa      	ldrh	r2, [r7, #6]
 8005a52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a5c:	d108      	bne.n	8005a70 <HAL_UART_Transmit+0x82>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d104      	bne.n	8005a70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	61bb      	str	r3, [r7, #24]
 8005a6e:	e003      	b.n	8005a78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a74:	2300      	movs	r3, #0
 8005a76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005a80:	e02a      	b.n	8005ad8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	2180      	movs	r1, #128	; 0x80
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 f840 	bl	8005b12 <UART_WaitOnFlagUntilTimeout>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e036      	b.n	8005b0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10b      	bne.n	8005aba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ab0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	3302      	adds	r3, #2
 8005ab6:	61bb      	str	r3, [r7, #24]
 8005ab8:	e007      	b.n	8005aca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	781a      	ldrb	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1cf      	bne.n	8005a82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2140      	movs	r1, #64	; 0x40
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 f810 	bl	8005b12 <UART_WaitOnFlagUntilTimeout>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e006      	b.n	8005b0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b04:	2300      	movs	r3, #0
 8005b06:	e000      	b.n	8005b0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b08:	2302      	movs	r3, #2
  }
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3720      	adds	r7, #32
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b090      	sub	sp, #64	; 0x40
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	60f8      	str	r0, [r7, #12]
 8005b1a:	60b9      	str	r1, [r7, #8]
 8005b1c:	603b      	str	r3, [r7, #0]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b22:	e050      	b.n	8005bc6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2a:	d04c      	beq.n	8005bc6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d007      	beq.n	8005b42 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b32:	f7fc f8d1 	bl	8001cd8 <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d241      	bcs.n	8005bc6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	330c      	adds	r3, #12
 8005b48:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	e853 3f00 	ldrex	r3, [r3]
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	330c      	adds	r3, #12
 8005b60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b62:	637a      	str	r2, [r7, #52]	; 0x34
 8005b64:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b6a:	e841 2300 	strex	r3, r2, [r1]
 8005b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1e5      	bne.n	8005b42 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3314      	adds	r3, #20
 8005b7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	e853 3f00 	ldrex	r3, [r3]
 8005b84:	613b      	str	r3, [r7, #16]
   return(result);
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f023 0301 	bic.w	r3, r3, #1
 8005b8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3314      	adds	r3, #20
 8005b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b96:	623a      	str	r2, [r7, #32]
 8005b98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9a:	69f9      	ldr	r1, [r7, #28]
 8005b9c:	6a3a      	ldr	r2, [r7, #32]
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e5      	bne.n	8005b76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e00f      	b.n	8005be6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	bf0c      	ite	eq
 8005bd6:	2301      	moveq	r3, #1
 8005bd8:	2300      	movne	r3, #0
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	461a      	mov	r2, r3
 8005bde:	79fb      	ldrb	r3, [r7, #7]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d09f      	beq.n	8005b24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3740      	adds	r7, #64	; 0x40
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bf4:	b0c0      	sub	sp, #256	; 0x100
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0c:	68d9      	ldr	r1, [r3, #12]
 8005c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	ea40 0301 	orr.w	r3, r0, r1
 8005c18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	431a      	orrs	r2, r3
 8005c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c48:	f021 010c 	bic.w	r1, r1, #12
 8005c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c56:	430b      	orrs	r3, r1
 8005c58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6a:	6999      	ldr	r1, [r3, #24]
 8005c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	ea40 0301 	orr.w	r3, r0, r1
 8005c76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	4b8f      	ldr	r3, [pc, #572]	; (8005ebc <UART_SetConfig+0x2cc>)
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d005      	beq.n	8005c90 <UART_SetConfig+0xa0>
 8005c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	4b8d      	ldr	r3, [pc, #564]	; (8005ec0 <UART_SetConfig+0x2d0>)
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d104      	bne.n	8005c9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c90:	f7ff fb52 	bl	8005338 <HAL_RCC_GetPCLK2Freq>
 8005c94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005c98:	e003      	b.n	8005ca2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c9a:	f7ff fb39 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 8005c9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cac:	f040 810c 	bne.w	8005ec8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005cbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005cc2:	4622      	mov	r2, r4
 8005cc4:	462b      	mov	r3, r5
 8005cc6:	1891      	adds	r1, r2, r2
 8005cc8:	65b9      	str	r1, [r7, #88]	; 0x58
 8005cca:	415b      	adcs	r3, r3
 8005ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	eb12 0801 	adds.w	r8, r2, r1
 8005cd8:	4629      	mov	r1, r5
 8005cda:	eb43 0901 	adc.w	r9, r3, r1
 8005cde:	f04f 0200 	mov.w	r2, #0
 8005ce2:	f04f 0300 	mov.w	r3, #0
 8005ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cf2:	4690      	mov	r8, r2
 8005cf4:	4699      	mov	r9, r3
 8005cf6:	4623      	mov	r3, r4
 8005cf8:	eb18 0303 	adds.w	r3, r8, r3
 8005cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d00:	462b      	mov	r3, r5
 8005d02:	eb49 0303 	adc.w	r3, r9, r3
 8005d06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d1e:	460b      	mov	r3, r1
 8005d20:	18db      	adds	r3, r3, r3
 8005d22:	653b      	str	r3, [r7, #80]	; 0x50
 8005d24:	4613      	mov	r3, r2
 8005d26:	eb42 0303 	adc.w	r3, r2, r3
 8005d2a:	657b      	str	r3, [r7, #84]	; 0x54
 8005d2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d34:	f7fa ffb0 	bl	8000c98 <__aeabi_uldivmod>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4b61      	ldr	r3, [pc, #388]	; (8005ec4 <UART_SetConfig+0x2d4>)
 8005d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d42:	095b      	lsrs	r3, r3, #5
 8005d44:	011c      	lsls	r4, r3, #4
 8005d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005d54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005d58:	4642      	mov	r2, r8
 8005d5a:	464b      	mov	r3, r9
 8005d5c:	1891      	adds	r1, r2, r2
 8005d5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d60:	415b      	adcs	r3, r3
 8005d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d68:	4641      	mov	r1, r8
 8005d6a:	eb12 0a01 	adds.w	sl, r2, r1
 8005d6e:	4649      	mov	r1, r9
 8005d70:	eb43 0b01 	adc.w	fp, r3, r1
 8005d74:	f04f 0200 	mov.w	r2, #0
 8005d78:	f04f 0300 	mov.w	r3, #0
 8005d7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d88:	4692      	mov	sl, r2
 8005d8a:	469b      	mov	fp, r3
 8005d8c:	4643      	mov	r3, r8
 8005d8e:	eb1a 0303 	adds.w	r3, sl, r3
 8005d92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d96:	464b      	mov	r3, r9
 8005d98:	eb4b 0303 	adc.w	r3, fp, r3
 8005d9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005db0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005db4:	460b      	mov	r3, r1
 8005db6:	18db      	adds	r3, r3, r3
 8005db8:	643b      	str	r3, [r7, #64]	; 0x40
 8005dba:	4613      	mov	r3, r2
 8005dbc:	eb42 0303 	adc.w	r3, r2, r3
 8005dc0:	647b      	str	r3, [r7, #68]	; 0x44
 8005dc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005dc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005dca:	f7fa ff65 	bl	8000c98 <__aeabi_uldivmod>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	4b3b      	ldr	r3, [pc, #236]	; (8005ec4 <UART_SetConfig+0x2d4>)
 8005dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8005dda:	095b      	lsrs	r3, r3, #5
 8005ddc:	2264      	movs	r2, #100	; 0x64
 8005dde:	fb02 f303 	mul.w	r3, r2, r3
 8005de2:	1acb      	subs	r3, r1, r3
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005dea:	4b36      	ldr	r3, [pc, #216]	; (8005ec4 <UART_SetConfig+0x2d4>)
 8005dec:	fba3 2302 	umull	r2, r3, r3, r2
 8005df0:	095b      	lsrs	r3, r3, #5
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005df8:	441c      	add	r4, r3
 8005dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005e08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	464b      	mov	r3, r9
 8005e10:	1891      	adds	r1, r2, r2
 8005e12:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e14:	415b      	adcs	r3, r3
 8005e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e1c:	4641      	mov	r1, r8
 8005e1e:	1851      	adds	r1, r2, r1
 8005e20:	6339      	str	r1, [r7, #48]	; 0x30
 8005e22:	4649      	mov	r1, r9
 8005e24:	414b      	adcs	r3, r1
 8005e26:	637b      	str	r3, [r7, #52]	; 0x34
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e34:	4659      	mov	r1, fp
 8005e36:	00cb      	lsls	r3, r1, #3
 8005e38:	4651      	mov	r1, sl
 8005e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e3e:	4651      	mov	r1, sl
 8005e40:	00ca      	lsls	r2, r1, #3
 8005e42:	4610      	mov	r0, r2
 8005e44:	4619      	mov	r1, r3
 8005e46:	4603      	mov	r3, r0
 8005e48:	4642      	mov	r2, r8
 8005e4a:	189b      	adds	r3, r3, r2
 8005e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e50:	464b      	mov	r3, r9
 8005e52:	460a      	mov	r2, r1
 8005e54:	eb42 0303 	adc.w	r3, r2, r3
 8005e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005e6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005e70:	460b      	mov	r3, r1
 8005e72:	18db      	adds	r3, r3, r3
 8005e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e76:	4613      	mov	r3, r2
 8005e78:	eb42 0303 	adc.w	r3, r2, r3
 8005e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005e86:	f7fa ff07 	bl	8000c98 <__aeabi_uldivmod>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4b0d      	ldr	r3, [pc, #52]	; (8005ec4 <UART_SetConfig+0x2d4>)
 8005e90:	fba3 1302 	umull	r1, r3, r3, r2
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	2164      	movs	r1, #100	; 0x64
 8005e98:	fb01 f303 	mul.w	r3, r1, r3
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	3332      	adds	r3, #50	; 0x32
 8005ea2:	4a08      	ldr	r2, [pc, #32]	; (8005ec4 <UART_SetConfig+0x2d4>)
 8005ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea8:	095b      	lsrs	r3, r3, #5
 8005eaa:	f003 0207 	and.w	r2, r3, #7
 8005eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4422      	add	r2, r4
 8005eb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005eb8:	e105      	b.n	80060c6 <UART_SetConfig+0x4d6>
 8005eba:	bf00      	nop
 8005ebc:	40011000 	.word	0x40011000
 8005ec0:	40011400 	.word	0x40011400
 8005ec4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ed2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ed6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005eda:	4642      	mov	r2, r8
 8005edc:	464b      	mov	r3, r9
 8005ede:	1891      	adds	r1, r2, r2
 8005ee0:	6239      	str	r1, [r7, #32]
 8005ee2:	415b      	adcs	r3, r3
 8005ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005eea:	4641      	mov	r1, r8
 8005eec:	1854      	adds	r4, r2, r1
 8005eee:	4649      	mov	r1, r9
 8005ef0:	eb43 0501 	adc.w	r5, r3, r1
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	00eb      	lsls	r3, r5, #3
 8005efe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f02:	00e2      	lsls	r2, r4, #3
 8005f04:	4614      	mov	r4, r2
 8005f06:	461d      	mov	r5, r3
 8005f08:	4643      	mov	r3, r8
 8005f0a:	18e3      	adds	r3, r4, r3
 8005f0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f10:	464b      	mov	r3, r9
 8005f12:	eb45 0303 	adc.w	r3, r5, r3
 8005f16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f2a:	f04f 0200 	mov.w	r2, #0
 8005f2e:	f04f 0300 	mov.w	r3, #0
 8005f32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f36:	4629      	mov	r1, r5
 8005f38:	008b      	lsls	r3, r1, #2
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f40:	4621      	mov	r1, r4
 8005f42:	008a      	lsls	r2, r1, #2
 8005f44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005f48:	f7fa fea6 	bl	8000c98 <__aeabi_uldivmod>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4b60      	ldr	r3, [pc, #384]	; (80060d4 <UART_SetConfig+0x4e4>)
 8005f52:	fba3 2302 	umull	r2, r3, r3, r2
 8005f56:	095b      	lsrs	r3, r3, #5
 8005f58:	011c      	lsls	r4, r3, #4
 8005f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005f6c:	4642      	mov	r2, r8
 8005f6e:	464b      	mov	r3, r9
 8005f70:	1891      	adds	r1, r2, r2
 8005f72:	61b9      	str	r1, [r7, #24]
 8005f74:	415b      	adcs	r3, r3
 8005f76:	61fb      	str	r3, [r7, #28]
 8005f78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f7c:	4641      	mov	r1, r8
 8005f7e:	1851      	adds	r1, r2, r1
 8005f80:	6139      	str	r1, [r7, #16]
 8005f82:	4649      	mov	r1, r9
 8005f84:	414b      	adcs	r3, r1
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	f04f 0200 	mov.w	r2, #0
 8005f8c:	f04f 0300 	mov.w	r3, #0
 8005f90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f94:	4659      	mov	r1, fp
 8005f96:	00cb      	lsls	r3, r1, #3
 8005f98:	4651      	mov	r1, sl
 8005f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f9e:	4651      	mov	r1, sl
 8005fa0:	00ca      	lsls	r2, r1, #3
 8005fa2:	4610      	mov	r0, r2
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	4642      	mov	r2, r8
 8005faa:	189b      	adds	r3, r3, r2
 8005fac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fb0:	464b      	mov	r3, r9
 8005fb2:	460a      	mov	r2, r1
 8005fb4:	eb42 0303 	adc.w	r3, r2, r3
 8005fb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005fc8:	f04f 0200 	mov.w	r2, #0
 8005fcc:	f04f 0300 	mov.w	r3, #0
 8005fd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005fd4:	4649      	mov	r1, r9
 8005fd6:	008b      	lsls	r3, r1, #2
 8005fd8:	4641      	mov	r1, r8
 8005fda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fde:	4641      	mov	r1, r8
 8005fe0:	008a      	lsls	r2, r1, #2
 8005fe2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005fe6:	f7fa fe57 	bl	8000c98 <__aeabi_uldivmod>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4b39      	ldr	r3, [pc, #228]	; (80060d4 <UART_SetConfig+0x4e4>)
 8005ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	2164      	movs	r1, #100	; 0x64
 8005ff8:	fb01 f303 	mul.w	r3, r1, r3
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	3332      	adds	r3, #50	; 0x32
 8006002:	4a34      	ldr	r2, [pc, #208]	; (80060d4 <UART_SetConfig+0x4e4>)
 8006004:	fba2 2303 	umull	r2, r3, r2, r3
 8006008:	095b      	lsrs	r3, r3, #5
 800600a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800600e:	441c      	add	r4, r3
 8006010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006014:	2200      	movs	r2, #0
 8006016:	673b      	str	r3, [r7, #112]	; 0x70
 8006018:	677a      	str	r2, [r7, #116]	; 0x74
 800601a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800601e:	4642      	mov	r2, r8
 8006020:	464b      	mov	r3, r9
 8006022:	1891      	adds	r1, r2, r2
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	415b      	adcs	r3, r3
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800602e:	4641      	mov	r1, r8
 8006030:	1851      	adds	r1, r2, r1
 8006032:	6039      	str	r1, [r7, #0]
 8006034:	4649      	mov	r1, r9
 8006036:	414b      	adcs	r3, r1
 8006038:	607b      	str	r3, [r7, #4]
 800603a:	f04f 0200 	mov.w	r2, #0
 800603e:	f04f 0300 	mov.w	r3, #0
 8006042:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006046:	4659      	mov	r1, fp
 8006048:	00cb      	lsls	r3, r1, #3
 800604a:	4651      	mov	r1, sl
 800604c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006050:	4651      	mov	r1, sl
 8006052:	00ca      	lsls	r2, r1, #3
 8006054:	4610      	mov	r0, r2
 8006056:	4619      	mov	r1, r3
 8006058:	4603      	mov	r3, r0
 800605a:	4642      	mov	r2, r8
 800605c:	189b      	adds	r3, r3, r2
 800605e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006060:	464b      	mov	r3, r9
 8006062:	460a      	mov	r2, r1
 8006064:	eb42 0303 	adc.w	r3, r2, r3
 8006068:	66fb      	str	r3, [r7, #108]	; 0x6c
 800606a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	663b      	str	r3, [r7, #96]	; 0x60
 8006074:	667a      	str	r2, [r7, #100]	; 0x64
 8006076:	f04f 0200 	mov.w	r2, #0
 800607a:	f04f 0300 	mov.w	r3, #0
 800607e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006082:	4649      	mov	r1, r9
 8006084:	008b      	lsls	r3, r1, #2
 8006086:	4641      	mov	r1, r8
 8006088:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800608c:	4641      	mov	r1, r8
 800608e:	008a      	lsls	r2, r1, #2
 8006090:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006094:	f7fa fe00 	bl	8000c98 <__aeabi_uldivmod>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4b0d      	ldr	r3, [pc, #52]	; (80060d4 <UART_SetConfig+0x4e4>)
 800609e:	fba3 1302 	umull	r1, r3, r3, r2
 80060a2:	095b      	lsrs	r3, r3, #5
 80060a4:	2164      	movs	r1, #100	; 0x64
 80060a6:	fb01 f303 	mul.w	r3, r1, r3
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	3332      	adds	r3, #50	; 0x32
 80060b0:	4a08      	ldr	r2, [pc, #32]	; (80060d4 <UART_SetConfig+0x4e4>)
 80060b2:	fba2 2303 	umull	r2, r3, r2, r3
 80060b6:	095b      	lsrs	r3, r3, #5
 80060b8:	f003 020f 	and.w	r2, r3, #15
 80060bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4422      	add	r2, r4
 80060c4:	609a      	str	r2, [r3, #8]
}
 80060c6:	bf00      	nop
 80060c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80060cc:	46bd      	mov	sp, r7
 80060ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060d2:	bf00      	nop
 80060d4:	51eb851f 	.word	0x51eb851f

080060d8 <__errno>:
 80060d8:	4b01      	ldr	r3, [pc, #4]	; (80060e0 <__errno+0x8>)
 80060da:	6818      	ldr	r0, [r3, #0]
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	2000000c 	.word	0x2000000c

080060e4 <__libc_init_array>:
 80060e4:	b570      	push	{r4, r5, r6, lr}
 80060e6:	4d0d      	ldr	r5, [pc, #52]	; (800611c <__libc_init_array+0x38>)
 80060e8:	4c0d      	ldr	r4, [pc, #52]	; (8006120 <__libc_init_array+0x3c>)
 80060ea:	1b64      	subs	r4, r4, r5
 80060ec:	10a4      	asrs	r4, r4, #2
 80060ee:	2600      	movs	r6, #0
 80060f0:	42a6      	cmp	r6, r4
 80060f2:	d109      	bne.n	8006108 <__libc_init_array+0x24>
 80060f4:	4d0b      	ldr	r5, [pc, #44]	; (8006124 <__libc_init_array+0x40>)
 80060f6:	4c0c      	ldr	r4, [pc, #48]	; (8006128 <__libc_init_array+0x44>)
 80060f8:	f002 ffe0 	bl	80090bc <_init>
 80060fc:	1b64      	subs	r4, r4, r5
 80060fe:	10a4      	asrs	r4, r4, #2
 8006100:	2600      	movs	r6, #0
 8006102:	42a6      	cmp	r6, r4
 8006104:	d105      	bne.n	8006112 <__libc_init_array+0x2e>
 8006106:	bd70      	pop	{r4, r5, r6, pc}
 8006108:	f855 3b04 	ldr.w	r3, [r5], #4
 800610c:	4798      	blx	r3
 800610e:	3601      	adds	r6, #1
 8006110:	e7ee      	b.n	80060f0 <__libc_init_array+0xc>
 8006112:	f855 3b04 	ldr.w	r3, [r5], #4
 8006116:	4798      	blx	r3
 8006118:	3601      	adds	r6, #1
 800611a:	e7f2      	b.n	8006102 <__libc_init_array+0x1e>
 800611c:	080094ec 	.word	0x080094ec
 8006120:	080094ec 	.word	0x080094ec
 8006124:	080094ec 	.word	0x080094ec
 8006128:	080094f0 	.word	0x080094f0

0800612c <memset>:
 800612c:	4402      	add	r2, r0
 800612e:	4603      	mov	r3, r0
 8006130:	4293      	cmp	r3, r2
 8006132:	d100      	bne.n	8006136 <memset+0xa>
 8006134:	4770      	bx	lr
 8006136:	f803 1b01 	strb.w	r1, [r3], #1
 800613a:	e7f9      	b.n	8006130 <memset+0x4>

0800613c <__cvt>:
 800613c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006140:	ec55 4b10 	vmov	r4, r5, d0
 8006144:	2d00      	cmp	r5, #0
 8006146:	460e      	mov	r6, r1
 8006148:	4619      	mov	r1, r3
 800614a:	462b      	mov	r3, r5
 800614c:	bfbb      	ittet	lt
 800614e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006152:	461d      	movlt	r5, r3
 8006154:	2300      	movge	r3, #0
 8006156:	232d      	movlt	r3, #45	; 0x2d
 8006158:	700b      	strb	r3, [r1, #0]
 800615a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800615c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006160:	4691      	mov	r9, r2
 8006162:	f023 0820 	bic.w	r8, r3, #32
 8006166:	bfbc      	itt	lt
 8006168:	4622      	movlt	r2, r4
 800616a:	4614      	movlt	r4, r2
 800616c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006170:	d005      	beq.n	800617e <__cvt+0x42>
 8006172:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006176:	d100      	bne.n	800617a <__cvt+0x3e>
 8006178:	3601      	adds	r6, #1
 800617a:	2102      	movs	r1, #2
 800617c:	e000      	b.n	8006180 <__cvt+0x44>
 800617e:	2103      	movs	r1, #3
 8006180:	ab03      	add	r3, sp, #12
 8006182:	9301      	str	r3, [sp, #4]
 8006184:	ab02      	add	r3, sp, #8
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	ec45 4b10 	vmov	d0, r4, r5
 800618c:	4653      	mov	r3, sl
 800618e:	4632      	mov	r2, r6
 8006190:	f000 fcea 	bl	8006b68 <_dtoa_r>
 8006194:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006198:	4607      	mov	r7, r0
 800619a:	d102      	bne.n	80061a2 <__cvt+0x66>
 800619c:	f019 0f01 	tst.w	r9, #1
 80061a0:	d022      	beq.n	80061e8 <__cvt+0xac>
 80061a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061a6:	eb07 0906 	add.w	r9, r7, r6
 80061aa:	d110      	bne.n	80061ce <__cvt+0x92>
 80061ac:	783b      	ldrb	r3, [r7, #0]
 80061ae:	2b30      	cmp	r3, #48	; 0x30
 80061b0:	d10a      	bne.n	80061c8 <__cvt+0x8c>
 80061b2:	2200      	movs	r2, #0
 80061b4:	2300      	movs	r3, #0
 80061b6:	4620      	mov	r0, r4
 80061b8:	4629      	mov	r1, r5
 80061ba:	f7fa fc8d 	bl	8000ad8 <__aeabi_dcmpeq>
 80061be:	b918      	cbnz	r0, 80061c8 <__cvt+0x8c>
 80061c0:	f1c6 0601 	rsb	r6, r6, #1
 80061c4:	f8ca 6000 	str.w	r6, [sl]
 80061c8:	f8da 3000 	ldr.w	r3, [sl]
 80061cc:	4499      	add	r9, r3
 80061ce:	2200      	movs	r2, #0
 80061d0:	2300      	movs	r3, #0
 80061d2:	4620      	mov	r0, r4
 80061d4:	4629      	mov	r1, r5
 80061d6:	f7fa fc7f 	bl	8000ad8 <__aeabi_dcmpeq>
 80061da:	b108      	cbz	r0, 80061e0 <__cvt+0xa4>
 80061dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80061e0:	2230      	movs	r2, #48	; 0x30
 80061e2:	9b03      	ldr	r3, [sp, #12]
 80061e4:	454b      	cmp	r3, r9
 80061e6:	d307      	bcc.n	80061f8 <__cvt+0xbc>
 80061e8:	9b03      	ldr	r3, [sp, #12]
 80061ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061ec:	1bdb      	subs	r3, r3, r7
 80061ee:	4638      	mov	r0, r7
 80061f0:	6013      	str	r3, [r2, #0]
 80061f2:	b004      	add	sp, #16
 80061f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f8:	1c59      	adds	r1, r3, #1
 80061fa:	9103      	str	r1, [sp, #12]
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	e7f0      	b.n	80061e2 <__cvt+0xa6>

08006200 <__exponent>:
 8006200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006202:	4603      	mov	r3, r0
 8006204:	2900      	cmp	r1, #0
 8006206:	bfb8      	it	lt
 8006208:	4249      	neglt	r1, r1
 800620a:	f803 2b02 	strb.w	r2, [r3], #2
 800620e:	bfb4      	ite	lt
 8006210:	222d      	movlt	r2, #45	; 0x2d
 8006212:	222b      	movge	r2, #43	; 0x2b
 8006214:	2909      	cmp	r1, #9
 8006216:	7042      	strb	r2, [r0, #1]
 8006218:	dd2a      	ble.n	8006270 <__exponent+0x70>
 800621a:	f10d 0407 	add.w	r4, sp, #7
 800621e:	46a4      	mov	ip, r4
 8006220:	270a      	movs	r7, #10
 8006222:	46a6      	mov	lr, r4
 8006224:	460a      	mov	r2, r1
 8006226:	fb91 f6f7 	sdiv	r6, r1, r7
 800622a:	fb07 1516 	mls	r5, r7, r6, r1
 800622e:	3530      	adds	r5, #48	; 0x30
 8006230:	2a63      	cmp	r2, #99	; 0x63
 8006232:	f104 34ff 	add.w	r4, r4, #4294967295
 8006236:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800623a:	4631      	mov	r1, r6
 800623c:	dcf1      	bgt.n	8006222 <__exponent+0x22>
 800623e:	3130      	adds	r1, #48	; 0x30
 8006240:	f1ae 0502 	sub.w	r5, lr, #2
 8006244:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006248:	1c44      	adds	r4, r0, #1
 800624a:	4629      	mov	r1, r5
 800624c:	4561      	cmp	r1, ip
 800624e:	d30a      	bcc.n	8006266 <__exponent+0x66>
 8006250:	f10d 0209 	add.w	r2, sp, #9
 8006254:	eba2 020e 	sub.w	r2, r2, lr
 8006258:	4565      	cmp	r5, ip
 800625a:	bf88      	it	hi
 800625c:	2200      	movhi	r2, #0
 800625e:	4413      	add	r3, r2
 8006260:	1a18      	subs	r0, r3, r0
 8006262:	b003      	add	sp, #12
 8006264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006266:	f811 2b01 	ldrb.w	r2, [r1], #1
 800626a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800626e:	e7ed      	b.n	800624c <__exponent+0x4c>
 8006270:	2330      	movs	r3, #48	; 0x30
 8006272:	3130      	adds	r1, #48	; 0x30
 8006274:	7083      	strb	r3, [r0, #2]
 8006276:	70c1      	strb	r1, [r0, #3]
 8006278:	1d03      	adds	r3, r0, #4
 800627a:	e7f1      	b.n	8006260 <__exponent+0x60>

0800627c <_printf_float>:
 800627c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006280:	ed2d 8b02 	vpush	{d8}
 8006284:	b08d      	sub	sp, #52	; 0x34
 8006286:	460c      	mov	r4, r1
 8006288:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800628c:	4616      	mov	r6, r2
 800628e:	461f      	mov	r7, r3
 8006290:	4605      	mov	r5, r0
 8006292:	f001 fa57 	bl	8007744 <_localeconv_r>
 8006296:	f8d0 a000 	ldr.w	sl, [r0]
 800629a:	4650      	mov	r0, sl
 800629c:	f7f9 ffa0 	bl	80001e0 <strlen>
 80062a0:	2300      	movs	r3, #0
 80062a2:	930a      	str	r3, [sp, #40]	; 0x28
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	9305      	str	r3, [sp, #20]
 80062a8:	f8d8 3000 	ldr.w	r3, [r8]
 80062ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80062b0:	3307      	adds	r3, #7
 80062b2:	f023 0307 	bic.w	r3, r3, #7
 80062b6:	f103 0208 	add.w	r2, r3, #8
 80062ba:	f8c8 2000 	str.w	r2, [r8]
 80062be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80062c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80062ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80062ce:	9307      	str	r3, [sp, #28]
 80062d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80062d4:	ee08 0a10 	vmov	s16, r0
 80062d8:	4b9f      	ldr	r3, [pc, #636]	; (8006558 <_printf_float+0x2dc>)
 80062da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062de:	f04f 32ff 	mov.w	r2, #4294967295
 80062e2:	f7fa fc2b 	bl	8000b3c <__aeabi_dcmpun>
 80062e6:	bb88      	cbnz	r0, 800634c <_printf_float+0xd0>
 80062e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062ec:	4b9a      	ldr	r3, [pc, #616]	; (8006558 <_printf_float+0x2dc>)
 80062ee:	f04f 32ff 	mov.w	r2, #4294967295
 80062f2:	f7fa fc05 	bl	8000b00 <__aeabi_dcmple>
 80062f6:	bb48      	cbnz	r0, 800634c <_printf_float+0xd0>
 80062f8:	2200      	movs	r2, #0
 80062fa:	2300      	movs	r3, #0
 80062fc:	4640      	mov	r0, r8
 80062fe:	4649      	mov	r1, r9
 8006300:	f7fa fbf4 	bl	8000aec <__aeabi_dcmplt>
 8006304:	b110      	cbz	r0, 800630c <_printf_float+0x90>
 8006306:	232d      	movs	r3, #45	; 0x2d
 8006308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800630c:	4b93      	ldr	r3, [pc, #588]	; (800655c <_printf_float+0x2e0>)
 800630e:	4894      	ldr	r0, [pc, #592]	; (8006560 <_printf_float+0x2e4>)
 8006310:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006314:	bf94      	ite	ls
 8006316:	4698      	movls	r8, r3
 8006318:	4680      	movhi	r8, r0
 800631a:	2303      	movs	r3, #3
 800631c:	6123      	str	r3, [r4, #16]
 800631e:	9b05      	ldr	r3, [sp, #20]
 8006320:	f023 0204 	bic.w	r2, r3, #4
 8006324:	6022      	str	r2, [r4, #0]
 8006326:	f04f 0900 	mov.w	r9, #0
 800632a:	9700      	str	r7, [sp, #0]
 800632c:	4633      	mov	r3, r6
 800632e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006330:	4621      	mov	r1, r4
 8006332:	4628      	mov	r0, r5
 8006334:	f000 f9d8 	bl	80066e8 <_printf_common>
 8006338:	3001      	adds	r0, #1
 800633a:	f040 8090 	bne.w	800645e <_printf_float+0x1e2>
 800633e:	f04f 30ff 	mov.w	r0, #4294967295
 8006342:	b00d      	add	sp, #52	; 0x34
 8006344:	ecbd 8b02 	vpop	{d8}
 8006348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800634c:	4642      	mov	r2, r8
 800634e:	464b      	mov	r3, r9
 8006350:	4640      	mov	r0, r8
 8006352:	4649      	mov	r1, r9
 8006354:	f7fa fbf2 	bl	8000b3c <__aeabi_dcmpun>
 8006358:	b140      	cbz	r0, 800636c <_printf_float+0xf0>
 800635a:	464b      	mov	r3, r9
 800635c:	2b00      	cmp	r3, #0
 800635e:	bfbc      	itt	lt
 8006360:	232d      	movlt	r3, #45	; 0x2d
 8006362:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006366:	487f      	ldr	r0, [pc, #508]	; (8006564 <_printf_float+0x2e8>)
 8006368:	4b7f      	ldr	r3, [pc, #508]	; (8006568 <_printf_float+0x2ec>)
 800636a:	e7d1      	b.n	8006310 <_printf_float+0x94>
 800636c:	6863      	ldr	r3, [r4, #4]
 800636e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006372:	9206      	str	r2, [sp, #24]
 8006374:	1c5a      	adds	r2, r3, #1
 8006376:	d13f      	bne.n	80063f8 <_printf_float+0x17c>
 8006378:	2306      	movs	r3, #6
 800637a:	6063      	str	r3, [r4, #4]
 800637c:	9b05      	ldr	r3, [sp, #20]
 800637e:	6861      	ldr	r1, [r4, #4]
 8006380:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006384:	2300      	movs	r3, #0
 8006386:	9303      	str	r3, [sp, #12]
 8006388:	ab0a      	add	r3, sp, #40	; 0x28
 800638a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800638e:	ab09      	add	r3, sp, #36	; 0x24
 8006390:	ec49 8b10 	vmov	d0, r8, r9
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	6022      	str	r2, [r4, #0]
 8006398:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800639c:	4628      	mov	r0, r5
 800639e:	f7ff fecd 	bl	800613c <__cvt>
 80063a2:	9b06      	ldr	r3, [sp, #24]
 80063a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063a6:	2b47      	cmp	r3, #71	; 0x47
 80063a8:	4680      	mov	r8, r0
 80063aa:	d108      	bne.n	80063be <_printf_float+0x142>
 80063ac:	1cc8      	adds	r0, r1, #3
 80063ae:	db02      	blt.n	80063b6 <_printf_float+0x13a>
 80063b0:	6863      	ldr	r3, [r4, #4]
 80063b2:	4299      	cmp	r1, r3
 80063b4:	dd41      	ble.n	800643a <_printf_float+0x1be>
 80063b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80063ba:	fa5f fb8b 	uxtb.w	fp, fp
 80063be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80063c2:	d820      	bhi.n	8006406 <_printf_float+0x18a>
 80063c4:	3901      	subs	r1, #1
 80063c6:	465a      	mov	r2, fp
 80063c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80063cc:	9109      	str	r1, [sp, #36]	; 0x24
 80063ce:	f7ff ff17 	bl	8006200 <__exponent>
 80063d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063d4:	1813      	adds	r3, r2, r0
 80063d6:	2a01      	cmp	r2, #1
 80063d8:	4681      	mov	r9, r0
 80063da:	6123      	str	r3, [r4, #16]
 80063dc:	dc02      	bgt.n	80063e4 <_printf_float+0x168>
 80063de:	6822      	ldr	r2, [r4, #0]
 80063e0:	07d2      	lsls	r2, r2, #31
 80063e2:	d501      	bpl.n	80063e8 <_printf_float+0x16c>
 80063e4:	3301      	adds	r3, #1
 80063e6:	6123      	str	r3, [r4, #16]
 80063e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d09c      	beq.n	800632a <_printf_float+0xae>
 80063f0:	232d      	movs	r3, #45	; 0x2d
 80063f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063f6:	e798      	b.n	800632a <_printf_float+0xae>
 80063f8:	9a06      	ldr	r2, [sp, #24]
 80063fa:	2a47      	cmp	r2, #71	; 0x47
 80063fc:	d1be      	bne.n	800637c <_printf_float+0x100>
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1bc      	bne.n	800637c <_printf_float+0x100>
 8006402:	2301      	movs	r3, #1
 8006404:	e7b9      	b.n	800637a <_printf_float+0xfe>
 8006406:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800640a:	d118      	bne.n	800643e <_printf_float+0x1c2>
 800640c:	2900      	cmp	r1, #0
 800640e:	6863      	ldr	r3, [r4, #4]
 8006410:	dd0b      	ble.n	800642a <_printf_float+0x1ae>
 8006412:	6121      	str	r1, [r4, #16]
 8006414:	b913      	cbnz	r3, 800641c <_printf_float+0x1a0>
 8006416:	6822      	ldr	r2, [r4, #0]
 8006418:	07d0      	lsls	r0, r2, #31
 800641a:	d502      	bpl.n	8006422 <_printf_float+0x1a6>
 800641c:	3301      	adds	r3, #1
 800641e:	440b      	add	r3, r1
 8006420:	6123      	str	r3, [r4, #16]
 8006422:	65a1      	str	r1, [r4, #88]	; 0x58
 8006424:	f04f 0900 	mov.w	r9, #0
 8006428:	e7de      	b.n	80063e8 <_printf_float+0x16c>
 800642a:	b913      	cbnz	r3, 8006432 <_printf_float+0x1b6>
 800642c:	6822      	ldr	r2, [r4, #0]
 800642e:	07d2      	lsls	r2, r2, #31
 8006430:	d501      	bpl.n	8006436 <_printf_float+0x1ba>
 8006432:	3302      	adds	r3, #2
 8006434:	e7f4      	b.n	8006420 <_printf_float+0x1a4>
 8006436:	2301      	movs	r3, #1
 8006438:	e7f2      	b.n	8006420 <_printf_float+0x1a4>
 800643a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800643e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006440:	4299      	cmp	r1, r3
 8006442:	db05      	blt.n	8006450 <_printf_float+0x1d4>
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	6121      	str	r1, [r4, #16]
 8006448:	07d8      	lsls	r0, r3, #31
 800644a:	d5ea      	bpl.n	8006422 <_printf_float+0x1a6>
 800644c:	1c4b      	adds	r3, r1, #1
 800644e:	e7e7      	b.n	8006420 <_printf_float+0x1a4>
 8006450:	2900      	cmp	r1, #0
 8006452:	bfd4      	ite	le
 8006454:	f1c1 0202 	rsble	r2, r1, #2
 8006458:	2201      	movgt	r2, #1
 800645a:	4413      	add	r3, r2
 800645c:	e7e0      	b.n	8006420 <_printf_float+0x1a4>
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	055a      	lsls	r2, r3, #21
 8006462:	d407      	bmi.n	8006474 <_printf_float+0x1f8>
 8006464:	6923      	ldr	r3, [r4, #16]
 8006466:	4642      	mov	r2, r8
 8006468:	4631      	mov	r1, r6
 800646a:	4628      	mov	r0, r5
 800646c:	47b8      	blx	r7
 800646e:	3001      	adds	r0, #1
 8006470:	d12c      	bne.n	80064cc <_printf_float+0x250>
 8006472:	e764      	b.n	800633e <_printf_float+0xc2>
 8006474:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006478:	f240 80e0 	bls.w	800663c <_printf_float+0x3c0>
 800647c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006480:	2200      	movs	r2, #0
 8006482:	2300      	movs	r3, #0
 8006484:	f7fa fb28 	bl	8000ad8 <__aeabi_dcmpeq>
 8006488:	2800      	cmp	r0, #0
 800648a:	d034      	beq.n	80064f6 <_printf_float+0x27a>
 800648c:	4a37      	ldr	r2, [pc, #220]	; (800656c <_printf_float+0x2f0>)
 800648e:	2301      	movs	r3, #1
 8006490:	4631      	mov	r1, r6
 8006492:	4628      	mov	r0, r5
 8006494:	47b8      	blx	r7
 8006496:	3001      	adds	r0, #1
 8006498:	f43f af51 	beq.w	800633e <_printf_float+0xc2>
 800649c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064a0:	429a      	cmp	r2, r3
 80064a2:	db02      	blt.n	80064aa <_printf_float+0x22e>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	07d8      	lsls	r0, r3, #31
 80064a8:	d510      	bpl.n	80064cc <_printf_float+0x250>
 80064aa:	ee18 3a10 	vmov	r3, s16
 80064ae:	4652      	mov	r2, sl
 80064b0:	4631      	mov	r1, r6
 80064b2:	4628      	mov	r0, r5
 80064b4:	47b8      	blx	r7
 80064b6:	3001      	adds	r0, #1
 80064b8:	f43f af41 	beq.w	800633e <_printf_float+0xc2>
 80064bc:	f04f 0800 	mov.w	r8, #0
 80064c0:	f104 091a 	add.w	r9, r4, #26
 80064c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c6:	3b01      	subs	r3, #1
 80064c8:	4543      	cmp	r3, r8
 80064ca:	dc09      	bgt.n	80064e0 <_printf_float+0x264>
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	079b      	lsls	r3, r3, #30
 80064d0:	f100 8105 	bmi.w	80066de <_printf_float+0x462>
 80064d4:	68e0      	ldr	r0, [r4, #12]
 80064d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064d8:	4298      	cmp	r0, r3
 80064da:	bfb8      	it	lt
 80064dc:	4618      	movlt	r0, r3
 80064de:	e730      	b.n	8006342 <_printf_float+0xc6>
 80064e0:	2301      	movs	r3, #1
 80064e2:	464a      	mov	r2, r9
 80064e4:	4631      	mov	r1, r6
 80064e6:	4628      	mov	r0, r5
 80064e8:	47b8      	blx	r7
 80064ea:	3001      	adds	r0, #1
 80064ec:	f43f af27 	beq.w	800633e <_printf_float+0xc2>
 80064f0:	f108 0801 	add.w	r8, r8, #1
 80064f4:	e7e6      	b.n	80064c4 <_printf_float+0x248>
 80064f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	dc39      	bgt.n	8006570 <_printf_float+0x2f4>
 80064fc:	4a1b      	ldr	r2, [pc, #108]	; (800656c <_printf_float+0x2f0>)
 80064fe:	2301      	movs	r3, #1
 8006500:	4631      	mov	r1, r6
 8006502:	4628      	mov	r0, r5
 8006504:	47b8      	blx	r7
 8006506:	3001      	adds	r0, #1
 8006508:	f43f af19 	beq.w	800633e <_printf_float+0xc2>
 800650c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006510:	4313      	orrs	r3, r2
 8006512:	d102      	bne.n	800651a <_printf_float+0x29e>
 8006514:	6823      	ldr	r3, [r4, #0]
 8006516:	07d9      	lsls	r1, r3, #31
 8006518:	d5d8      	bpl.n	80064cc <_printf_float+0x250>
 800651a:	ee18 3a10 	vmov	r3, s16
 800651e:	4652      	mov	r2, sl
 8006520:	4631      	mov	r1, r6
 8006522:	4628      	mov	r0, r5
 8006524:	47b8      	blx	r7
 8006526:	3001      	adds	r0, #1
 8006528:	f43f af09 	beq.w	800633e <_printf_float+0xc2>
 800652c:	f04f 0900 	mov.w	r9, #0
 8006530:	f104 0a1a 	add.w	sl, r4, #26
 8006534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006536:	425b      	negs	r3, r3
 8006538:	454b      	cmp	r3, r9
 800653a:	dc01      	bgt.n	8006540 <_printf_float+0x2c4>
 800653c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800653e:	e792      	b.n	8006466 <_printf_float+0x1ea>
 8006540:	2301      	movs	r3, #1
 8006542:	4652      	mov	r2, sl
 8006544:	4631      	mov	r1, r6
 8006546:	4628      	mov	r0, r5
 8006548:	47b8      	blx	r7
 800654a:	3001      	adds	r0, #1
 800654c:	f43f aef7 	beq.w	800633e <_printf_float+0xc2>
 8006550:	f109 0901 	add.w	r9, r9, #1
 8006554:	e7ee      	b.n	8006534 <_printf_float+0x2b8>
 8006556:	bf00      	nop
 8006558:	7fefffff 	.word	0x7fefffff
 800655c:	0800910c 	.word	0x0800910c
 8006560:	08009110 	.word	0x08009110
 8006564:	08009118 	.word	0x08009118
 8006568:	08009114 	.word	0x08009114
 800656c:	0800911c 	.word	0x0800911c
 8006570:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006572:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006574:	429a      	cmp	r2, r3
 8006576:	bfa8      	it	ge
 8006578:	461a      	movge	r2, r3
 800657a:	2a00      	cmp	r2, #0
 800657c:	4691      	mov	r9, r2
 800657e:	dc37      	bgt.n	80065f0 <_printf_float+0x374>
 8006580:	f04f 0b00 	mov.w	fp, #0
 8006584:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006588:	f104 021a 	add.w	r2, r4, #26
 800658c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800658e:	9305      	str	r3, [sp, #20]
 8006590:	eba3 0309 	sub.w	r3, r3, r9
 8006594:	455b      	cmp	r3, fp
 8006596:	dc33      	bgt.n	8006600 <_printf_float+0x384>
 8006598:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800659c:	429a      	cmp	r2, r3
 800659e:	db3b      	blt.n	8006618 <_printf_float+0x39c>
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	07da      	lsls	r2, r3, #31
 80065a4:	d438      	bmi.n	8006618 <_printf_float+0x39c>
 80065a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065a8:	9a05      	ldr	r2, [sp, #20]
 80065aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065ac:	1a9a      	subs	r2, r3, r2
 80065ae:	eba3 0901 	sub.w	r9, r3, r1
 80065b2:	4591      	cmp	r9, r2
 80065b4:	bfa8      	it	ge
 80065b6:	4691      	movge	r9, r2
 80065b8:	f1b9 0f00 	cmp.w	r9, #0
 80065bc:	dc35      	bgt.n	800662a <_printf_float+0x3ae>
 80065be:	f04f 0800 	mov.w	r8, #0
 80065c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065c6:	f104 0a1a 	add.w	sl, r4, #26
 80065ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065ce:	1a9b      	subs	r3, r3, r2
 80065d0:	eba3 0309 	sub.w	r3, r3, r9
 80065d4:	4543      	cmp	r3, r8
 80065d6:	f77f af79 	ble.w	80064cc <_printf_float+0x250>
 80065da:	2301      	movs	r3, #1
 80065dc:	4652      	mov	r2, sl
 80065de:	4631      	mov	r1, r6
 80065e0:	4628      	mov	r0, r5
 80065e2:	47b8      	blx	r7
 80065e4:	3001      	adds	r0, #1
 80065e6:	f43f aeaa 	beq.w	800633e <_printf_float+0xc2>
 80065ea:	f108 0801 	add.w	r8, r8, #1
 80065ee:	e7ec      	b.n	80065ca <_printf_float+0x34e>
 80065f0:	4613      	mov	r3, r2
 80065f2:	4631      	mov	r1, r6
 80065f4:	4642      	mov	r2, r8
 80065f6:	4628      	mov	r0, r5
 80065f8:	47b8      	blx	r7
 80065fa:	3001      	adds	r0, #1
 80065fc:	d1c0      	bne.n	8006580 <_printf_float+0x304>
 80065fe:	e69e      	b.n	800633e <_printf_float+0xc2>
 8006600:	2301      	movs	r3, #1
 8006602:	4631      	mov	r1, r6
 8006604:	4628      	mov	r0, r5
 8006606:	9205      	str	r2, [sp, #20]
 8006608:	47b8      	blx	r7
 800660a:	3001      	adds	r0, #1
 800660c:	f43f ae97 	beq.w	800633e <_printf_float+0xc2>
 8006610:	9a05      	ldr	r2, [sp, #20]
 8006612:	f10b 0b01 	add.w	fp, fp, #1
 8006616:	e7b9      	b.n	800658c <_printf_float+0x310>
 8006618:	ee18 3a10 	vmov	r3, s16
 800661c:	4652      	mov	r2, sl
 800661e:	4631      	mov	r1, r6
 8006620:	4628      	mov	r0, r5
 8006622:	47b8      	blx	r7
 8006624:	3001      	adds	r0, #1
 8006626:	d1be      	bne.n	80065a6 <_printf_float+0x32a>
 8006628:	e689      	b.n	800633e <_printf_float+0xc2>
 800662a:	9a05      	ldr	r2, [sp, #20]
 800662c:	464b      	mov	r3, r9
 800662e:	4442      	add	r2, r8
 8006630:	4631      	mov	r1, r6
 8006632:	4628      	mov	r0, r5
 8006634:	47b8      	blx	r7
 8006636:	3001      	adds	r0, #1
 8006638:	d1c1      	bne.n	80065be <_printf_float+0x342>
 800663a:	e680      	b.n	800633e <_printf_float+0xc2>
 800663c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800663e:	2a01      	cmp	r2, #1
 8006640:	dc01      	bgt.n	8006646 <_printf_float+0x3ca>
 8006642:	07db      	lsls	r3, r3, #31
 8006644:	d538      	bpl.n	80066b8 <_printf_float+0x43c>
 8006646:	2301      	movs	r3, #1
 8006648:	4642      	mov	r2, r8
 800664a:	4631      	mov	r1, r6
 800664c:	4628      	mov	r0, r5
 800664e:	47b8      	blx	r7
 8006650:	3001      	adds	r0, #1
 8006652:	f43f ae74 	beq.w	800633e <_printf_float+0xc2>
 8006656:	ee18 3a10 	vmov	r3, s16
 800665a:	4652      	mov	r2, sl
 800665c:	4631      	mov	r1, r6
 800665e:	4628      	mov	r0, r5
 8006660:	47b8      	blx	r7
 8006662:	3001      	adds	r0, #1
 8006664:	f43f ae6b 	beq.w	800633e <_printf_float+0xc2>
 8006668:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800666c:	2200      	movs	r2, #0
 800666e:	2300      	movs	r3, #0
 8006670:	f7fa fa32 	bl	8000ad8 <__aeabi_dcmpeq>
 8006674:	b9d8      	cbnz	r0, 80066ae <_printf_float+0x432>
 8006676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006678:	f108 0201 	add.w	r2, r8, #1
 800667c:	3b01      	subs	r3, #1
 800667e:	4631      	mov	r1, r6
 8006680:	4628      	mov	r0, r5
 8006682:	47b8      	blx	r7
 8006684:	3001      	adds	r0, #1
 8006686:	d10e      	bne.n	80066a6 <_printf_float+0x42a>
 8006688:	e659      	b.n	800633e <_printf_float+0xc2>
 800668a:	2301      	movs	r3, #1
 800668c:	4652      	mov	r2, sl
 800668e:	4631      	mov	r1, r6
 8006690:	4628      	mov	r0, r5
 8006692:	47b8      	blx	r7
 8006694:	3001      	adds	r0, #1
 8006696:	f43f ae52 	beq.w	800633e <_printf_float+0xc2>
 800669a:	f108 0801 	add.w	r8, r8, #1
 800669e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066a0:	3b01      	subs	r3, #1
 80066a2:	4543      	cmp	r3, r8
 80066a4:	dcf1      	bgt.n	800668a <_printf_float+0x40e>
 80066a6:	464b      	mov	r3, r9
 80066a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80066ac:	e6dc      	b.n	8006468 <_printf_float+0x1ec>
 80066ae:	f04f 0800 	mov.w	r8, #0
 80066b2:	f104 0a1a 	add.w	sl, r4, #26
 80066b6:	e7f2      	b.n	800669e <_printf_float+0x422>
 80066b8:	2301      	movs	r3, #1
 80066ba:	4642      	mov	r2, r8
 80066bc:	e7df      	b.n	800667e <_printf_float+0x402>
 80066be:	2301      	movs	r3, #1
 80066c0:	464a      	mov	r2, r9
 80066c2:	4631      	mov	r1, r6
 80066c4:	4628      	mov	r0, r5
 80066c6:	47b8      	blx	r7
 80066c8:	3001      	adds	r0, #1
 80066ca:	f43f ae38 	beq.w	800633e <_printf_float+0xc2>
 80066ce:	f108 0801 	add.w	r8, r8, #1
 80066d2:	68e3      	ldr	r3, [r4, #12]
 80066d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066d6:	1a5b      	subs	r3, r3, r1
 80066d8:	4543      	cmp	r3, r8
 80066da:	dcf0      	bgt.n	80066be <_printf_float+0x442>
 80066dc:	e6fa      	b.n	80064d4 <_printf_float+0x258>
 80066de:	f04f 0800 	mov.w	r8, #0
 80066e2:	f104 0919 	add.w	r9, r4, #25
 80066e6:	e7f4      	b.n	80066d2 <_printf_float+0x456>

080066e8 <_printf_common>:
 80066e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ec:	4616      	mov	r6, r2
 80066ee:	4699      	mov	r9, r3
 80066f0:	688a      	ldr	r2, [r1, #8]
 80066f2:	690b      	ldr	r3, [r1, #16]
 80066f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066f8:	4293      	cmp	r3, r2
 80066fa:	bfb8      	it	lt
 80066fc:	4613      	movlt	r3, r2
 80066fe:	6033      	str	r3, [r6, #0]
 8006700:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006704:	4607      	mov	r7, r0
 8006706:	460c      	mov	r4, r1
 8006708:	b10a      	cbz	r2, 800670e <_printf_common+0x26>
 800670a:	3301      	adds	r3, #1
 800670c:	6033      	str	r3, [r6, #0]
 800670e:	6823      	ldr	r3, [r4, #0]
 8006710:	0699      	lsls	r1, r3, #26
 8006712:	bf42      	ittt	mi
 8006714:	6833      	ldrmi	r3, [r6, #0]
 8006716:	3302      	addmi	r3, #2
 8006718:	6033      	strmi	r3, [r6, #0]
 800671a:	6825      	ldr	r5, [r4, #0]
 800671c:	f015 0506 	ands.w	r5, r5, #6
 8006720:	d106      	bne.n	8006730 <_printf_common+0x48>
 8006722:	f104 0a19 	add.w	sl, r4, #25
 8006726:	68e3      	ldr	r3, [r4, #12]
 8006728:	6832      	ldr	r2, [r6, #0]
 800672a:	1a9b      	subs	r3, r3, r2
 800672c:	42ab      	cmp	r3, r5
 800672e:	dc26      	bgt.n	800677e <_printf_common+0x96>
 8006730:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006734:	1e13      	subs	r3, r2, #0
 8006736:	6822      	ldr	r2, [r4, #0]
 8006738:	bf18      	it	ne
 800673a:	2301      	movne	r3, #1
 800673c:	0692      	lsls	r2, r2, #26
 800673e:	d42b      	bmi.n	8006798 <_printf_common+0xb0>
 8006740:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006744:	4649      	mov	r1, r9
 8006746:	4638      	mov	r0, r7
 8006748:	47c0      	blx	r8
 800674a:	3001      	adds	r0, #1
 800674c:	d01e      	beq.n	800678c <_printf_common+0xa4>
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	68e5      	ldr	r5, [r4, #12]
 8006752:	6832      	ldr	r2, [r6, #0]
 8006754:	f003 0306 	and.w	r3, r3, #6
 8006758:	2b04      	cmp	r3, #4
 800675a:	bf08      	it	eq
 800675c:	1aad      	subeq	r5, r5, r2
 800675e:	68a3      	ldr	r3, [r4, #8]
 8006760:	6922      	ldr	r2, [r4, #16]
 8006762:	bf0c      	ite	eq
 8006764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006768:	2500      	movne	r5, #0
 800676a:	4293      	cmp	r3, r2
 800676c:	bfc4      	itt	gt
 800676e:	1a9b      	subgt	r3, r3, r2
 8006770:	18ed      	addgt	r5, r5, r3
 8006772:	2600      	movs	r6, #0
 8006774:	341a      	adds	r4, #26
 8006776:	42b5      	cmp	r5, r6
 8006778:	d11a      	bne.n	80067b0 <_printf_common+0xc8>
 800677a:	2000      	movs	r0, #0
 800677c:	e008      	b.n	8006790 <_printf_common+0xa8>
 800677e:	2301      	movs	r3, #1
 8006780:	4652      	mov	r2, sl
 8006782:	4649      	mov	r1, r9
 8006784:	4638      	mov	r0, r7
 8006786:	47c0      	blx	r8
 8006788:	3001      	adds	r0, #1
 800678a:	d103      	bne.n	8006794 <_printf_common+0xac>
 800678c:	f04f 30ff 	mov.w	r0, #4294967295
 8006790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006794:	3501      	adds	r5, #1
 8006796:	e7c6      	b.n	8006726 <_printf_common+0x3e>
 8006798:	18e1      	adds	r1, r4, r3
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	2030      	movs	r0, #48	; 0x30
 800679e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067a2:	4422      	add	r2, r4
 80067a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067ac:	3302      	adds	r3, #2
 80067ae:	e7c7      	b.n	8006740 <_printf_common+0x58>
 80067b0:	2301      	movs	r3, #1
 80067b2:	4622      	mov	r2, r4
 80067b4:	4649      	mov	r1, r9
 80067b6:	4638      	mov	r0, r7
 80067b8:	47c0      	blx	r8
 80067ba:	3001      	adds	r0, #1
 80067bc:	d0e6      	beq.n	800678c <_printf_common+0xa4>
 80067be:	3601      	adds	r6, #1
 80067c0:	e7d9      	b.n	8006776 <_printf_common+0x8e>
	...

080067c4 <_printf_i>:
 80067c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067c8:	7e0f      	ldrb	r7, [r1, #24]
 80067ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067cc:	2f78      	cmp	r7, #120	; 0x78
 80067ce:	4691      	mov	r9, r2
 80067d0:	4680      	mov	r8, r0
 80067d2:	460c      	mov	r4, r1
 80067d4:	469a      	mov	sl, r3
 80067d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067da:	d807      	bhi.n	80067ec <_printf_i+0x28>
 80067dc:	2f62      	cmp	r7, #98	; 0x62
 80067de:	d80a      	bhi.n	80067f6 <_printf_i+0x32>
 80067e0:	2f00      	cmp	r7, #0
 80067e2:	f000 80d8 	beq.w	8006996 <_printf_i+0x1d2>
 80067e6:	2f58      	cmp	r7, #88	; 0x58
 80067e8:	f000 80a3 	beq.w	8006932 <_printf_i+0x16e>
 80067ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067f4:	e03a      	b.n	800686c <_printf_i+0xa8>
 80067f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067fa:	2b15      	cmp	r3, #21
 80067fc:	d8f6      	bhi.n	80067ec <_printf_i+0x28>
 80067fe:	a101      	add	r1, pc, #4	; (adr r1, 8006804 <_printf_i+0x40>)
 8006800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006804:	0800685d 	.word	0x0800685d
 8006808:	08006871 	.word	0x08006871
 800680c:	080067ed 	.word	0x080067ed
 8006810:	080067ed 	.word	0x080067ed
 8006814:	080067ed 	.word	0x080067ed
 8006818:	080067ed 	.word	0x080067ed
 800681c:	08006871 	.word	0x08006871
 8006820:	080067ed 	.word	0x080067ed
 8006824:	080067ed 	.word	0x080067ed
 8006828:	080067ed 	.word	0x080067ed
 800682c:	080067ed 	.word	0x080067ed
 8006830:	0800697d 	.word	0x0800697d
 8006834:	080068a1 	.word	0x080068a1
 8006838:	0800695f 	.word	0x0800695f
 800683c:	080067ed 	.word	0x080067ed
 8006840:	080067ed 	.word	0x080067ed
 8006844:	0800699f 	.word	0x0800699f
 8006848:	080067ed 	.word	0x080067ed
 800684c:	080068a1 	.word	0x080068a1
 8006850:	080067ed 	.word	0x080067ed
 8006854:	080067ed 	.word	0x080067ed
 8006858:	08006967 	.word	0x08006967
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	1d1a      	adds	r2, r3, #4
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	602a      	str	r2, [r5, #0]
 8006864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800686c:	2301      	movs	r3, #1
 800686e:	e0a3      	b.n	80069b8 <_printf_i+0x1f4>
 8006870:	6820      	ldr	r0, [r4, #0]
 8006872:	6829      	ldr	r1, [r5, #0]
 8006874:	0606      	lsls	r6, r0, #24
 8006876:	f101 0304 	add.w	r3, r1, #4
 800687a:	d50a      	bpl.n	8006892 <_printf_i+0xce>
 800687c:	680e      	ldr	r6, [r1, #0]
 800687e:	602b      	str	r3, [r5, #0]
 8006880:	2e00      	cmp	r6, #0
 8006882:	da03      	bge.n	800688c <_printf_i+0xc8>
 8006884:	232d      	movs	r3, #45	; 0x2d
 8006886:	4276      	negs	r6, r6
 8006888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800688c:	485e      	ldr	r0, [pc, #376]	; (8006a08 <_printf_i+0x244>)
 800688e:	230a      	movs	r3, #10
 8006890:	e019      	b.n	80068c6 <_printf_i+0x102>
 8006892:	680e      	ldr	r6, [r1, #0]
 8006894:	602b      	str	r3, [r5, #0]
 8006896:	f010 0f40 	tst.w	r0, #64	; 0x40
 800689a:	bf18      	it	ne
 800689c:	b236      	sxthne	r6, r6
 800689e:	e7ef      	b.n	8006880 <_printf_i+0xbc>
 80068a0:	682b      	ldr	r3, [r5, #0]
 80068a2:	6820      	ldr	r0, [r4, #0]
 80068a4:	1d19      	adds	r1, r3, #4
 80068a6:	6029      	str	r1, [r5, #0]
 80068a8:	0601      	lsls	r1, r0, #24
 80068aa:	d501      	bpl.n	80068b0 <_printf_i+0xec>
 80068ac:	681e      	ldr	r6, [r3, #0]
 80068ae:	e002      	b.n	80068b6 <_printf_i+0xf2>
 80068b0:	0646      	lsls	r6, r0, #25
 80068b2:	d5fb      	bpl.n	80068ac <_printf_i+0xe8>
 80068b4:	881e      	ldrh	r6, [r3, #0]
 80068b6:	4854      	ldr	r0, [pc, #336]	; (8006a08 <_printf_i+0x244>)
 80068b8:	2f6f      	cmp	r7, #111	; 0x6f
 80068ba:	bf0c      	ite	eq
 80068bc:	2308      	moveq	r3, #8
 80068be:	230a      	movne	r3, #10
 80068c0:	2100      	movs	r1, #0
 80068c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068c6:	6865      	ldr	r5, [r4, #4]
 80068c8:	60a5      	str	r5, [r4, #8]
 80068ca:	2d00      	cmp	r5, #0
 80068cc:	bfa2      	ittt	ge
 80068ce:	6821      	ldrge	r1, [r4, #0]
 80068d0:	f021 0104 	bicge.w	r1, r1, #4
 80068d4:	6021      	strge	r1, [r4, #0]
 80068d6:	b90e      	cbnz	r6, 80068dc <_printf_i+0x118>
 80068d8:	2d00      	cmp	r5, #0
 80068da:	d04d      	beq.n	8006978 <_printf_i+0x1b4>
 80068dc:	4615      	mov	r5, r2
 80068de:	fbb6 f1f3 	udiv	r1, r6, r3
 80068e2:	fb03 6711 	mls	r7, r3, r1, r6
 80068e6:	5dc7      	ldrb	r7, [r0, r7]
 80068e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068ec:	4637      	mov	r7, r6
 80068ee:	42bb      	cmp	r3, r7
 80068f0:	460e      	mov	r6, r1
 80068f2:	d9f4      	bls.n	80068de <_printf_i+0x11a>
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	d10b      	bne.n	8006910 <_printf_i+0x14c>
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	07de      	lsls	r6, r3, #31
 80068fc:	d508      	bpl.n	8006910 <_printf_i+0x14c>
 80068fe:	6923      	ldr	r3, [r4, #16]
 8006900:	6861      	ldr	r1, [r4, #4]
 8006902:	4299      	cmp	r1, r3
 8006904:	bfde      	ittt	le
 8006906:	2330      	movle	r3, #48	; 0x30
 8006908:	f805 3c01 	strble.w	r3, [r5, #-1]
 800690c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006910:	1b52      	subs	r2, r2, r5
 8006912:	6122      	str	r2, [r4, #16]
 8006914:	f8cd a000 	str.w	sl, [sp]
 8006918:	464b      	mov	r3, r9
 800691a:	aa03      	add	r2, sp, #12
 800691c:	4621      	mov	r1, r4
 800691e:	4640      	mov	r0, r8
 8006920:	f7ff fee2 	bl	80066e8 <_printf_common>
 8006924:	3001      	adds	r0, #1
 8006926:	d14c      	bne.n	80069c2 <_printf_i+0x1fe>
 8006928:	f04f 30ff 	mov.w	r0, #4294967295
 800692c:	b004      	add	sp, #16
 800692e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006932:	4835      	ldr	r0, [pc, #212]	; (8006a08 <_printf_i+0x244>)
 8006934:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006938:	6829      	ldr	r1, [r5, #0]
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006940:	6029      	str	r1, [r5, #0]
 8006942:	061d      	lsls	r5, r3, #24
 8006944:	d514      	bpl.n	8006970 <_printf_i+0x1ac>
 8006946:	07df      	lsls	r7, r3, #31
 8006948:	bf44      	itt	mi
 800694a:	f043 0320 	orrmi.w	r3, r3, #32
 800694e:	6023      	strmi	r3, [r4, #0]
 8006950:	b91e      	cbnz	r6, 800695a <_printf_i+0x196>
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	f023 0320 	bic.w	r3, r3, #32
 8006958:	6023      	str	r3, [r4, #0]
 800695a:	2310      	movs	r3, #16
 800695c:	e7b0      	b.n	80068c0 <_printf_i+0xfc>
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	f043 0320 	orr.w	r3, r3, #32
 8006964:	6023      	str	r3, [r4, #0]
 8006966:	2378      	movs	r3, #120	; 0x78
 8006968:	4828      	ldr	r0, [pc, #160]	; (8006a0c <_printf_i+0x248>)
 800696a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800696e:	e7e3      	b.n	8006938 <_printf_i+0x174>
 8006970:	0659      	lsls	r1, r3, #25
 8006972:	bf48      	it	mi
 8006974:	b2b6      	uxthmi	r6, r6
 8006976:	e7e6      	b.n	8006946 <_printf_i+0x182>
 8006978:	4615      	mov	r5, r2
 800697a:	e7bb      	b.n	80068f4 <_printf_i+0x130>
 800697c:	682b      	ldr	r3, [r5, #0]
 800697e:	6826      	ldr	r6, [r4, #0]
 8006980:	6961      	ldr	r1, [r4, #20]
 8006982:	1d18      	adds	r0, r3, #4
 8006984:	6028      	str	r0, [r5, #0]
 8006986:	0635      	lsls	r5, r6, #24
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	d501      	bpl.n	8006990 <_printf_i+0x1cc>
 800698c:	6019      	str	r1, [r3, #0]
 800698e:	e002      	b.n	8006996 <_printf_i+0x1d2>
 8006990:	0670      	lsls	r0, r6, #25
 8006992:	d5fb      	bpl.n	800698c <_printf_i+0x1c8>
 8006994:	8019      	strh	r1, [r3, #0]
 8006996:	2300      	movs	r3, #0
 8006998:	6123      	str	r3, [r4, #16]
 800699a:	4615      	mov	r5, r2
 800699c:	e7ba      	b.n	8006914 <_printf_i+0x150>
 800699e:	682b      	ldr	r3, [r5, #0]
 80069a0:	1d1a      	adds	r2, r3, #4
 80069a2:	602a      	str	r2, [r5, #0]
 80069a4:	681d      	ldr	r5, [r3, #0]
 80069a6:	6862      	ldr	r2, [r4, #4]
 80069a8:	2100      	movs	r1, #0
 80069aa:	4628      	mov	r0, r5
 80069ac:	f7f9 fc20 	bl	80001f0 <memchr>
 80069b0:	b108      	cbz	r0, 80069b6 <_printf_i+0x1f2>
 80069b2:	1b40      	subs	r0, r0, r5
 80069b4:	6060      	str	r0, [r4, #4]
 80069b6:	6863      	ldr	r3, [r4, #4]
 80069b8:	6123      	str	r3, [r4, #16]
 80069ba:	2300      	movs	r3, #0
 80069bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c0:	e7a8      	b.n	8006914 <_printf_i+0x150>
 80069c2:	6923      	ldr	r3, [r4, #16]
 80069c4:	462a      	mov	r2, r5
 80069c6:	4649      	mov	r1, r9
 80069c8:	4640      	mov	r0, r8
 80069ca:	47d0      	blx	sl
 80069cc:	3001      	adds	r0, #1
 80069ce:	d0ab      	beq.n	8006928 <_printf_i+0x164>
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	079b      	lsls	r3, r3, #30
 80069d4:	d413      	bmi.n	80069fe <_printf_i+0x23a>
 80069d6:	68e0      	ldr	r0, [r4, #12]
 80069d8:	9b03      	ldr	r3, [sp, #12]
 80069da:	4298      	cmp	r0, r3
 80069dc:	bfb8      	it	lt
 80069de:	4618      	movlt	r0, r3
 80069e0:	e7a4      	b.n	800692c <_printf_i+0x168>
 80069e2:	2301      	movs	r3, #1
 80069e4:	4632      	mov	r2, r6
 80069e6:	4649      	mov	r1, r9
 80069e8:	4640      	mov	r0, r8
 80069ea:	47d0      	blx	sl
 80069ec:	3001      	adds	r0, #1
 80069ee:	d09b      	beq.n	8006928 <_printf_i+0x164>
 80069f0:	3501      	adds	r5, #1
 80069f2:	68e3      	ldr	r3, [r4, #12]
 80069f4:	9903      	ldr	r1, [sp, #12]
 80069f6:	1a5b      	subs	r3, r3, r1
 80069f8:	42ab      	cmp	r3, r5
 80069fa:	dcf2      	bgt.n	80069e2 <_printf_i+0x21e>
 80069fc:	e7eb      	b.n	80069d6 <_printf_i+0x212>
 80069fe:	2500      	movs	r5, #0
 8006a00:	f104 0619 	add.w	r6, r4, #25
 8006a04:	e7f5      	b.n	80069f2 <_printf_i+0x22e>
 8006a06:	bf00      	nop
 8006a08:	0800911e 	.word	0x0800911e
 8006a0c:	0800912f 	.word	0x0800912f

08006a10 <siprintf>:
 8006a10:	b40e      	push	{r1, r2, r3}
 8006a12:	b500      	push	{lr}
 8006a14:	b09c      	sub	sp, #112	; 0x70
 8006a16:	ab1d      	add	r3, sp, #116	; 0x74
 8006a18:	9002      	str	r0, [sp, #8]
 8006a1a:	9006      	str	r0, [sp, #24]
 8006a1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a20:	4809      	ldr	r0, [pc, #36]	; (8006a48 <siprintf+0x38>)
 8006a22:	9107      	str	r1, [sp, #28]
 8006a24:	9104      	str	r1, [sp, #16]
 8006a26:	4909      	ldr	r1, [pc, #36]	; (8006a4c <siprintf+0x3c>)
 8006a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a2c:	9105      	str	r1, [sp, #20]
 8006a2e:	6800      	ldr	r0, [r0, #0]
 8006a30:	9301      	str	r3, [sp, #4]
 8006a32:	a902      	add	r1, sp, #8
 8006a34:	f001 fb76 	bl	8008124 <_svfiprintf_r>
 8006a38:	9b02      	ldr	r3, [sp, #8]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	701a      	strb	r2, [r3, #0]
 8006a3e:	b01c      	add	sp, #112	; 0x70
 8006a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a44:	b003      	add	sp, #12
 8006a46:	4770      	bx	lr
 8006a48:	2000000c 	.word	0x2000000c
 8006a4c:	ffff0208 	.word	0xffff0208

08006a50 <quorem>:
 8006a50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a54:	6903      	ldr	r3, [r0, #16]
 8006a56:	690c      	ldr	r4, [r1, #16]
 8006a58:	42a3      	cmp	r3, r4
 8006a5a:	4607      	mov	r7, r0
 8006a5c:	f2c0 8081 	blt.w	8006b62 <quorem+0x112>
 8006a60:	3c01      	subs	r4, #1
 8006a62:	f101 0814 	add.w	r8, r1, #20
 8006a66:	f100 0514 	add.w	r5, r0, #20
 8006a6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a6e:	9301      	str	r3, [sp, #4]
 8006a70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a84:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a88:	d331      	bcc.n	8006aee <quorem+0x9e>
 8006a8a:	f04f 0e00 	mov.w	lr, #0
 8006a8e:	4640      	mov	r0, r8
 8006a90:	46ac      	mov	ip, r5
 8006a92:	46f2      	mov	sl, lr
 8006a94:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a98:	b293      	uxth	r3, r2
 8006a9a:	fb06 e303 	mla	r3, r6, r3, lr
 8006a9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	ebaa 0303 	sub.w	r3, sl, r3
 8006aa8:	f8dc a000 	ldr.w	sl, [ip]
 8006aac:	0c12      	lsrs	r2, r2, #16
 8006aae:	fa13 f38a 	uxtah	r3, r3, sl
 8006ab2:	fb06 e202 	mla	r2, r6, r2, lr
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	9b00      	ldr	r3, [sp, #0]
 8006aba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006abe:	b292      	uxth	r2, r2
 8006ac0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006ac4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ac8:	f8bd 3000 	ldrh.w	r3, [sp]
 8006acc:	4581      	cmp	r9, r0
 8006ace:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ad2:	f84c 3b04 	str.w	r3, [ip], #4
 8006ad6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006ada:	d2db      	bcs.n	8006a94 <quorem+0x44>
 8006adc:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ae0:	b92b      	cbnz	r3, 8006aee <quorem+0x9e>
 8006ae2:	9b01      	ldr	r3, [sp, #4]
 8006ae4:	3b04      	subs	r3, #4
 8006ae6:	429d      	cmp	r5, r3
 8006ae8:	461a      	mov	r2, r3
 8006aea:	d32e      	bcc.n	8006b4a <quorem+0xfa>
 8006aec:	613c      	str	r4, [r7, #16]
 8006aee:	4638      	mov	r0, r7
 8006af0:	f001 f8c4 	bl	8007c7c <__mcmp>
 8006af4:	2800      	cmp	r0, #0
 8006af6:	db24      	blt.n	8006b42 <quorem+0xf2>
 8006af8:	3601      	adds	r6, #1
 8006afa:	4628      	mov	r0, r5
 8006afc:	f04f 0c00 	mov.w	ip, #0
 8006b00:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b04:	f8d0 e000 	ldr.w	lr, [r0]
 8006b08:	b293      	uxth	r3, r2
 8006b0a:	ebac 0303 	sub.w	r3, ip, r3
 8006b0e:	0c12      	lsrs	r2, r2, #16
 8006b10:	fa13 f38e 	uxtah	r3, r3, lr
 8006b14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b22:	45c1      	cmp	r9, r8
 8006b24:	f840 3b04 	str.w	r3, [r0], #4
 8006b28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b2c:	d2e8      	bcs.n	8006b00 <quorem+0xb0>
 8006b2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b36:	b922      	cbnz	r2, 8006b42 <quorem+0xf2>
 8006b38:	3b04      	subs	r3, #4
 8006b3a:	429d      	cmp	r5, r3
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	d30a      	bcc.n	8006b56 <quorem+0x106>
 8006b40:	613c      	str	r4, [r7, #16]
 8006b42:	4630      	mov	r0, r6
 8006b44:	b003      	add	sp, #12
 8006b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b4a:	6812      	ldr	r2, [r2, #0]
 8006b4c:	3b04      	subs	r3, #4
 8006b4e:	2a00      	cmp	r2, #0
 8006b50:	d1cc      	bne.n	8006aec <quorem+0x9c>
 8006b52:	3c01      	subs	r4, #1
 8006b54:	e7c7      	b.n	8006ae6 <quorem+0x96>
 8006b56:	6812      	ldr	r2, [r2, #0]
 8006b58:	3b04      	subs	r3, #4
 8006b5a:	2a00      	cmp	r2, #0
 8006b5c:	d1f0      	bne.n	8006b40 <quorem+0xf0>
 8006b5e:	3c01      	subs	r4, #1
 8006b60:	e7eb      	b.n	8006b3a <quorem+0xea>
 8006b62:	2000      	movs	r0, #0
 8006b64:	e7ee      	b.n	8006b44 <quorem+0xf4>
	...

08006b68 <_dtoa_r>:
 8006b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6c:	ed2d 8b04 	vpush	{d8-d9}
 8006b70:	ec57 6b10 	vmov	r6, r7, d0
 8006b74:	b093      	sub	sp, #76	; 0x4c
 8006b76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b7c:	9106      	str	r1, [sp, #24]
 8006b7e:	ee10 aa10 	vmov	sl, s0
 8006b82:	4604      	mov	r4, r0
 8006b84:	9209      	str	r2, [sp, #36]	; 0x24
 8006b86:	930c      	str	r3, [sp, #48]	; 0x30
 8006b88:	46bb      	mov	fp, r7
 8006b8a:	b975      	cbnz	r5, 8006baa <_dtoa_r+0x42>
 8006b8c:	2010      	movs	r0, #16
 8006b8e:	f000 fddd 	bl	800774c <malloc>
 8006b92:	4602      	mov	r2, r0
 8006b94:	6260      	str	r0, [r4, #36]	; 0x24
 8006b96:	b920      	cbnz	r0, 8006ba2 <_dtoa_r+0x3a>
 8006b98:	4ba7      	ldr	r3, [pc, #668]	; (8006e38 <_dtoa_r+0x2d0>)
 8006b9a:	21ea      	movs	r1, #234	; 0xea
 8006b9c:	48a7      	ldr	r0, [pc, #668]	; (8006e3c <_dtoa_r+0x2d4>)
 8006b9e:	f001 fbd1 	bl	8008344 <__assert_func>
 8006ba2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006ba6:	6005      	str	r5, [r0, #0]
 8006ba8:	60c5      	str	r5, [r0, #12]
 8006baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bac:	6819      	ldr	r1, [r3, #0]
 8006bae:	b151      	cbz	r1, 8006bc6 <_dtoa_r+0x5e>
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	604a      	str	r2, [r1, #4]
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	4093      	lsls	r3, r2
 8006bb8:	608b      	str	r3, [r1, #8]
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f000 fe1c 	bl	80077f8 <_Bfree>
 8006bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	1e3b      	subs	r3, r7, #0
 8006bc8:	bfaa      	itet	ge
 8006bca:	2300      	movge	r3, #0
 8006bcc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006bd0:	f8c8 3000 	strge.w	r3, [r8]
 8006bd4:	4b9a      	ldr	r3, [pc, #616]	; (8006e40 <_dtoa_r+0x2d8>)
 8006bd6:	bfbc      	itt	lt
 8006bd8:	2201      	movlt	r2, #1
 8006bda:	f8c8 2000 	strlt.w	r2, [r8]
 8006bde:	ea33 030b 	bics.w	r3, r3, fp
 8006be2:	d11b      	bne.n	8006c1c <_dtoa_r+0xb4>
 8006be4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006be6:	f242 730f 	movw	r3, #9999	; 0x270f
 8006bea:	6013      	str	r3, [r2, #0]
 8006bec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006bf0:	4333      	orrs	r3, r6
 8006bf2:	f000 8592 	beq.w	800771a <_dtoa_r+0xbb2>
 8006bf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bf8:	b963      	cbnz	r3, 8006c14 <_dtoa_r+0xac>
 8006bfa:	4b92      	ldr	r3, [pc, #584]	; (8006e44 <_dtoa_r+0x2dc>)
 8006bfc:	e022      	b.n	8006c44 <_dtoa_r+0xdc>
 8006bfe:	4b92      	ldr	r3, [pc, #584]	; (8006e48 <_dtoa_r+0x2e0>)
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	3308      	adds	r3, #8
 8006c04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c06:	6013      	str	r3, [r2, #0]
 8006c08:	9801      	ldr	r0, [sp, #4]
 8006c0a:	b013      	add	sp, #76	; 0x4c
 8006c0c:	ecbd 8b04 	vpop	{d8-d9}
 8006c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c14:	4b8b      	ldr	r3, [pc, #556]	; (8006e44 <_dtoa_r+0x2dc>)
 8006c16:	9301      	str	r3, [sp, #4]
 8006c18:	3303      	adds	r3, #3
 8006c1a:	e7f3      	b.n	8006c04 <_dtoa_r+0x9c>
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	2300      	movs	r3, #0
 8006c20:	4650      	mov	r0, sl
 8006c22:	4659      	mov	r1, fp
 8006c24:	f7f9 ff58 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c28:	ec4b ab19 	vmov	d9, sl, fp
 8006c2c:	4680      	mov	r8, r0
 8006c2e:	b158      	cbz	r0, 8006c48 <_dtoa_r+0xe0>
 8006c30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c32:	2301      	movs	r3, #1
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 856b 	beq.w	8007714 <_dtoa_r+0xbac>
 8006c3e:	4883      	ldr	r0, [pc, #524]	; (8006e4c <_dtoa_r+0x2e4>)
 8006c40:	6018      	str	r0, [r3, #0]
 8006c42:	1e43      	subs	r3, r0, #1
 8006c44:	9301      	str	r3, [sp, #4]
 8006c46:	e7df      	b.n	8006c08 <_dtoa_r+0xa0>
 8006c48:	ec4b ab10 	vmov	d0, sl, fp
 8006c4c:	aa10      	add	r2, sp, #64	; 0x40
 8006c4e:	a911      	add	r1, sp, #68	; 0x44
 8006c50:	4620      	mov	r0, r4
 8006c52:	f001 f8b9 	bl	8007dc8 <__d2b>
 8006c56:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006c5a:	ee08 0a10 	vmov	s16, r0
 8006c5e:	2d00      	cmp	r5, #0
 8006c60:	f000 8084 	beq.w	8006d6c <_dtoa_r+0x204>
 8006c64:	ee19 3a90 	vmov	r3, s19
 8006c68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c6c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006c70:	4656      	mov	r6, sl
 8006c72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006c76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c7a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006c7e:	4b74      	ldr	r3, [pc, #464]	; (8006e50 <_dtoa_r+0x2e8>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	4630      	mov	r0, r6
 8006c84:	4639      	mov	r1, r7
 8006c86:	f7f9 fb07 	bl	8000298 <__aeabi_dsub>
 8006c8a:	a365      	add	r3, pc, #404	; (adr r3, 8006e20 <_dtoa_r+0x2b8>)
 8006c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c90:	f7f9 fcba 	bl	8000608 <__aeabi_dmul>
 8006c94:	a364      	add	r3, pc, #400	; (adr r3, 8006e28 <_dtoa_r+0x2c0>)
 8006c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9a:	f7f9 faff 	bl	800029c <__adddf3>
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	460f      	mov	r7, r1
 8006ca4:	f7f9 fc46 	bl	8000534 <__aeabi_i2d>
 8006ca8:	a361      	add	r3, pc, #388	; (adr r3, 8006e30 <_dtoa_r+0x2c8>)
 8006caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cae:	f7f9 fcab 	bl	8000608 <__aeabi_dmul>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	4639      	mov	r1, r7
 8006cba:	f7f9 faef 	bl	800029c <__adddf3>
 8006cbe:	4606      	mov	r6, r0
 8006cc0:	460f      	mov	r7, r1
 8006cc2:	f7f9 ff51 	bl	8000b68 <__aeabi_d2iz>
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	9000      	str	r0, [sp, #0]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	4630      	mov	r0, r6
 8006cce:	4639      	mov	r1, r7
 8006cd0:	f7f9 ff0c 	bl	8000aec <__aeabi_dcmplt>
 8006cd4:	b150      	cbz	r0, 8006cec <_dtoa_r+0x184>
 8006cd6:	9800      	ldr	r0, [sp, #0]
 8006cd8:	f7f9 fc2c 	bl	8000534 <__aeabi_i2d>
 8006cdc:	4632      	mov	r2, r6
 8006cde:	463b      	mov	r3, r7
 8006ce0:	f7f9 fefa 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ce4:	b910      	cbnz	r0, 8006cec <_dtoa_r+0x184>
 8006ce6:	9b00      	ldr	r3, [sp, #0]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	9b00      	ldr	r3, [sp, #0]
 8006cee:	2b16      	cmp	r3, #22
 8006cf0:	d85a      	bhi.n	8006da8 <_dtoa_r+0x240>
 8006cf2:	9a00      	ldr	r2, [sp, #0]
 8006cf4:	4b57      	ldr	r3, [pc, #348]	; (8006e54 <_dtoa_r+0x2ec>)
 8006cf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	ec51 0b19 	vmov	r0, r1, d9
 8006d02:	f7f9 fef3 	bl	8000aec <__aeabi_dcmplt>
 8006d06:	2800      	cmp	r0, #0
 8006d08:	d050      	beq.n	8006dac <_dtoa_r+0x244>
 8006d0a:	9b00      	ldr	r3, [sp, #0]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	2300      	movs	r3, #0
 8006d12:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d16:	1b5d      	subs	r5, r3, r5
 8006d18:	1e6b      	subs	r3, r5, #1
 8006d1a:	9305      	str	r3, [sp, #20]
 8006d1c:	bf45      	ittet	mi
 8006d1e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006d22:	9304      	strmi	r3, [sp, #16]
 8006d24:	2300      	movpl	r3, #0
 8006d26:	2300      	movmi	r3, #0
 8006d28:	bf4c      	ite	mi
 8006d2a:	9305      	strmi	r3, [sp, #20]
 8006d2c:	9304      	strpl	r3, [sp, #16]
 8006d2e:	9b00      	ldr	r3, [sp, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	db3d      	blt.n	8006db0 <_dtoa_r+0x248>
 8006d34:	9b05      	ldr	r3, [sp, #20]
 8006d36:	9a00      	ldr	r2, [sp, #0]
 8006d38:	920a      	str	r2, [sp, #40]	; 0x28
 8006d3a:	4413      	add	r3, r2
 8006d3c:	9305      	str	r3, [sp, #20]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	9307      	str	r3, [sp, #28]
 8006d42:	9b06      	ldr	r3, [sp, #24]
 8006d44:	2b09      	cmp	r3, #9
 8006d46:	f200 8089 	bhi.w	8006e5c <_dtoa_r+0x2f4>
 8006d4a:	2b05      	cmp	r3, #5
 8006d4c:	bfc4      	itt	gt
 8006d4e:	3b04      	subgt	r3, #4
 8006d50:	9306      	strgt	r3, [sp, #24]
 8006d52:	9b06      	ldr	r3, [sp, #24]
 8006d54:	f1a3 0302 	sub.w	r3, r3, #2
 8006d58:	bfcc      	ite	gt
 8006d5a:	2500      	movgt	r5, #0
 8006d5c:	2501      	movle	r5, #1
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	f200 8087 	bhi.w	8006e72 <_dtoa_r+0x30a>
 8006d64:	e8df f003 	tbb	[pc, r3]
 8006d68:	59383a2d 	.word	0x59383a2d
 8006d6c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006d70:	441d      	add	r5, r3
 8006d72:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d76:	2b20      	cmp	r3, #32
 8006d78:	bfc1      	itttt	gt
 8006d7a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d7e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006d82:	fa0b f303 	lslgt.w	r3, fp, r3
 8006d86:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006d8a:	bfda      	itte	le
 8006d8c:	f1c3 0320 	rsble	r3, r3, #32
 8006d90:	fa06 f003 	lslle.w	r0, r6, r3
 8006d94:	4318      	orrgt	r0, r3
 8006d96:	f7f9 fbbd 	bl	8000514 <__aeabi_ui2d>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	4606      	mov	r6, r0
 8006d9e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006da2:	3d01      	subs	r5, #1
 8006da4:	930e      	str	r3, [sp, #56]	; 0x38
 8006da6:	e76a      	b.n	8006c7e <_dtoa_r+0x116>
 8006da8:	2301      	movs	r3, #1
 8006daa:	e7b2      	b.n	8006d12 <_dtoa_r+0x1aa>
 8006dac:	900b      	str	r0, [sp, #44]	; 0x2c
 8006dae:	e7b1      	b.n	8006d14 <_dtoa_r+0x1ac>
 8006db0:	9b04      	ldr	r3, [sp, #16]
 8006db2:	9a00      	ldr	r2, [sp, #0]
 8006db4:	1a9b      	subs	r3, r3, r2
 8006db6:	9304      	str	r3, [sp, #16]
 8006db8:	4253      	negs	r3, r2
 8006dba:	9307      	str	r3, [sp, #28]
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	930a      	str	r3, [sp, #40]	; 0x28
 8006dc0:	e7bf      	b.n	8006d42 <_dtoa_r+0x1da>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	9308      	str	r3, [sp, #32]
 8006dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	dc55      	bgt.n	8006e78 <_dtoa_r+0x310>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	9209      	str	r2, [sp, #36]	; 0x24
 8006dd6:	e00c      	b.n	8006df2 <_dtoa_r+0x28a>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e7f3      	b.n	8006dc4 <_dtoa_r+0x25c>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006de0:	9308      	str	r3, [sp, #32]
 8006de2:	9b00      	ldr	r3, [sp, #0]
 8006de4:	4413      	add	r3, r2
 8006de6:	9302      	str	r3, [sp, #8]
 8006de8:	3301      	adds	r3, #1
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	9303      	str	r3, [sp, #12]
 8006dee:	bfb8      	it	lt
 8006df0:	2301      	movlt	r3, #1
 8006df2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006df4:	2200      	movs	r2, #0
 8006df6:	6042      	str	r2, [r0, #4]
 8006df8:	2204      	movs	r2, #4
 8006dfa:	f102 0614 	add.w	r6, r2, #20
 8006dfe:	429e      	cmp	r6, r3
 8006e00:	6841      	ldr	r1, [r0, #4]
 8006e02:	d93d      	bls.n	8006e80 <_dtoa_r+0x318>
 8006e04:	4620      	mov	r0, r4
 8006e06:	f000 fcb7 	bl	8007778 <_Balloc>
 8006e0a:	9001      	str	r0, [sp, #4]
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	d13b      	bne.n	8006e88 <_dtoa_r+0x320>
 8006e10:	4b11      	ldr	r3, [pc, #68]	; (8006e58 <_dtoa_r+0x2f0>)
 8006e12:	4602      	mov	r2, r0
 8006e14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e18:	e6c0      	b.n	8006b9c <_dtoa_r+0x34>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e7df      	b.n	8006dde <_dtoa_r+0x276>
 8006e1e:	bf00      	nop
 8006e20:	636f4361 	.word	0x636f4361
 8006e24:	3fd287a7 	.word	0x3fd287a7
 8006e28:	8b60c8b3 	.word	0x8b60c8b3
 8006e2c:	3fc68a28 	.word	0x3fc68a28
 8006e30:	509f79fb 	.word	0x509f79fb
 8006e34:	3fd34413 	.word	0x3fd34413
 8006e38:	0800914d 	.word	0x0800914d
 8006e3c:	08009164 	.word	0x08009164
 8006e40:	7ff00000 	.word	0x7ff00000
 8006e44:	08009149 	.word	0x08009149
 8006e48:	08009140 	.word	0x08009140
 8006e4c:	0800911d 	.word	0x0800911d
 8006e50:	3ff80000 	.word	0x3ff80000
 8006e54:	08009258 	.word	0x08009258
 8006e58:	080091bf 	.word	0x080091bf
 8006e5c:	2501      	movs	r5, #1
 8006e5e:	2300      	movs	r3, #0
 8006e60:	9306      	str	r3, [sp, #24]
 8006e62:	9508      	str	r5, [sp, #32]
 8006e64:	f04f 33ff 	mov.w	r3, #4294967295
 8006e68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2312      	movs	r3, #18
 8006e70:	e7b0      	b.n	8006dd4 <_dtoa_r+0x26c>
 8006e72:	2301      	movs	r3, #1
 8006e74:	9308      	str	r3, [sp, #32]
 8006e76:	e7f5      	b.n	8006e64 <_dtoa_r+0x2fc>
 8006e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e7e:	e7b8      	b.n	8006df2 <_dtoa_r+0x28a>
 8006e80:	3101      	adds	r1, #1
 8006e82:	6041      	str	r1, [r0, #4]
 8006e84:	0052      	lsls	r2, r2, #1
 8006e86:	e7b8      	b.n	8006dfa <_dtoa_r+0x292>
 8006e88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e8a:	9a01      	ldr	r2, [sp, #4]
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	9b03      	ldr	r3, [sp, #12]
 8006e90:	2b0e      	cmp	r3, #14
 8006e92:	f200 809d 	bhi.w	8006fd0 <_dtoa_r+0x468>
 8006e96:	2d00      	cmp	r5, #0
 8006e98:	f000 809a 	beq.w	8006fd0 <_dtoa_r+0x468>
 8006e9c:	9b00      	ldr	r3, [sp, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	dd32      	ble.n	8006f08 <_dtoa_r+0x3a0>
 8006ea2:	4ab7      	ldr	r2, [pc, #732]	; (8007180 <_dtoa_r+0x618>)
 8006ea4:	f003 030f 	and.w	r3, r3, #15
 8006ea8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006eac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006eb0:	9b00      	ldr	r3, [sp, #0]
 8006eb2:	05d8      	lsls	r0, r3, #23
 8006eb4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006eb8:	d516      	bpl.n	8006ee8 <_dtoa_r+0x380>
 8006eba:	4bb2      	ldr	r3, [pc, #712]	; (8007184 <_dtoa_r+0x61c>)
 8006ebc:	ec51 0b19 	vmov	r0, r1, d9
 8006ec0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ec4:	f7f9 fcca 	bl	800085c <__aeabi_ddiv>
 8006ec8:	f007 070f 	and.w	r7, r7, #15
 8006ecc:	4682      	mov	sl, r0
 8006ece:	468b      	mov	fp, r1
 8006ed0:	2503      	movs	r5, #3
 8006ed2:	4eac      	ldr	r6, [pc, #688]	; (8007184 <_dtoa_r+0x61c>)
 8006ed4:	b957      	cbnz	r7, 8006eec <_dtoa_r+0x384>
 8006ed6:	4642      	mov	r2, r8
 8006ed8:	464b      	mov	r3, r9
 8006eda:	4650      	mov	r0, sl
 8006edc:	4659      	mov	r1, fp
 8006ede:	f7f9 fcbd 	bl	800085c <__aeabi_ddiv>
 8006ee2:	4682      	mov	sl, r0
 8006ee4:	468b      	mov	fp, r1
 8006ee6:	e028      	b.n	8006f3a <_dtoa_r+0x3d2>
 8006ee8:	2502      	movs	r5, #2
 8006eea:	e7f2      	b.n	8006ed2 <_dtoa_r+0x36a>
 8006eec:	07f9      	lsls	r1, r7, #31
 8006eee:	d508      	bpl.n	8006f02 <_dtoa_r+0x39a>
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	4649      	mov	r1, r9
 8006ef4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ef8:	f7f9 fb86 	bl	8000608 <__aeabi_dmul>
 8006efc:	3501      	adds	r5, #1
 8006efe:	4680      	mov	r8, r0
 8006f00:	4689      	mov	r9, r1
 8006f02:	107f      	asrs	r7, r7, #1
 8006f04:	3608      	adds	r6, #8
 8006f06:	e7e5      	b.n	8006ed4 <_dtoa_r+0x36c>
 8006f08:	f000 809b 	beq.w	8007042 <_dtoa_r+0x4da>
 8006f0c:	9b00      	ldr	r3, [sp, #0]
 8006f0e:	4f9d      	ldr	r7, [pc, #628]	; (8007184 <_dtoa_r+0x61c>)
 8006f10:	425e      	negs	r6, r3
 8006f12:	4b9b      	ldr	r3, [pc, #620]	; (8007180 <_dtoa_r+0x618>)
 8006f14:	f006 020f 	and.w	r2, r6, #15
 8006f18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f20:	ec51 0b19 	vmov	r0, r1, d9
 8006f24:	f7f9 fb70 	bl	8000608 <__aeabi_dmul>
 8006f28:	1136      	asrs	r6, r6, #4
 8006f2a:	4682      	mov	sl, r0
 8006f2c:	468b      	mov	fp, r1
 8006f2e:	2300      	movs	r3, #0
 8006f30:	2502      	movs	r5, #2
 8006f32:	2e00      	cmp	r6, #0
 8006f34:	d17a      	bne.n	800702c <_dtoa_r+0x4c4>
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1d3      	bne.n	8006ee2 <_dtoa_r+0x37a>
 8006f3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 8082 	beq.w	8007046 <_dtoa_r+0x4de>
 8006f42:	4b91      	ldr	r3, [pc, #580]	; (8007188 <_dtoa_r+0x620>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	4650      	mov	r0, sl
 8006f48:	4659      	mov	r1, fp
 8006f4a:	f7f9 fdcf 	bl	8000aec <__aeabi_dcmplt>
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	d079      	beq.n	8007046 <_dtoa_r+0x4de>
 8006f52:	9b03      	ldr	r3, [sp, #12]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d076      	beq.n	8007046 <_dtoa_r+0x4de>
 8006f58:	9b02      	ldr	r3, [sp, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	dd36      	ble.n	8006fcc <_dtoa_r+0x464>
 8006f5e:	9b00      	ldr	r3, [sp, #0]
 8006f60:	4650      	mov	r0, sl
 8006f62:	4659      	mov	r1, fp
 8006f64:	1e5f      	subs	r7, r3, #1
 8006f66:	2200      	movs	r2, #0
 8006f68:	4b88      	ldr	r3, [pc, #544]	; (800718c <_dtoa_r+0x624>)
 8006f6a:	f7f9 fb4d 	bl	8000608 <__aeabi_dmul>
 8006f6e:	9e02      	ldr	r6, [sp, #8]
 8006f70:	4682      	mov	sl, r0
 8006f72:	468b      	mov	fp, r1
 8006f74:	3501      	adds	r5, #1
 8006f76:	4628      	mov	r0, r5
 8006f78:	f7f9 fadc 	bl	8000534 <__aeabi_i2d>
 8006f7c:	4652      	mov	r2, sl
 8006f7e:	465b      	mov	r3, fp
 8006f80:	f7f9 fb42 	bl	8000608 <__aeabi_dmul>
 8006f84:	4b82      	ldr	r3, [pc, #520]	; (8007190 <_dtoa_r+0x628>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	f7f9 f988 	bl	800029c <__adddf3>
 8006f8c:	46d0      	mov	r8, sl
 8006f8e:	46d9      	mov	r9, fp
 8006f90:	4682      	mov	sl, r0
 8006f92:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006f96:	2e00      	cmp	r6, #0
 8006f98:	d158      	bne.n	800704c <_dtoa_r+0x4e4>
 8006f9a:	4b7e      	ldr	r3, [pc, #504]	; (8007194 <_dtoa_r+0x62c>)
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	4649      	mov	r1, r9
 8006fa2:	f7f9 f979 	bl	8000298 <__aeabi_dsub>
 8006fa6:	4652      	mov	r2, sl
 8006fa8:	465b      	mov	r3, fp
 8006faa:	4680      	mov	r8, r0
 8006fac:	4689      	mov	r9, r1
 8006fae:	f7f9 fdbb 	bl	8000b28 <__aeabi_dcmpgt>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	f040 8295 	bne.w	80074e2 <_dtoa_r+0x97a>
 8006fb8:	4652      	mov	r2, sl
 8006fba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006fbe:	4640      	mov	r0, r8
 8006fc0:	4649      	mov	r1, r9
 8006fc2:	f7f9 fd93 	bl	8000aec <__aeabi_dcmplt>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	f040 8289 	bne.w	80074de <_dtoa_r+0x976>
 8006fcc:	ec5b ab19 	vmov	sl, fp, d9
 8006fd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f2c0 8148 	blt.w	8007268 <_dtoa_r+0x700>
 8006fd8:	9a00      	ldr	r2, [sp, #0]
 8006fda:	2a0e      	cmp	r2, #14
 8006fdc:	f300 8144 	bgt.w	8007268 <_dtoa_r+0x700>
 8006fe0:	4b67      	ldr	r3, [pc, #412]	; (8007180 <_dtoa_r+0x618>)
 8006fe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fe6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f280 80d5 	bge.w	800719c <_dtoa_r+0x634>
 8006ff2:	9b03      	ldr	r3, [sp, #12]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f300 80d1 	bgt.w	800719c <_dtoa_r+0x634>
 8006ffa:	f040 826f 	bne.w	80074dc <_dtoa_r+0x974>
 8006ffe:	4b65      	ldr	r3, [pc, #404]	; (8007194 <_dtoa_r+0x62c>)
 8007000:	2200      	movs	r2, #0
 8007002:	4640      	mov	r0, r8
 8007004:	4649      	mov	r1, r9
 8007006:	f7f9 faff 	bl	8000608 <__aeabi_dmul>
 800700a:	4652      	mov	r2, sl
 800700c:	465b      	mov	r3, fp
 800700e:	f7f9 fd81 	bl	8000b14 <__aeabi_dcmpge>
 8007012:	9e03      	ldr	r6, [sp, #12]
 8007014:	4637      	mov	r7, r6
 8007016:	2800      	cmp	r0, #0
 8007018:	f040 8245 	bne.w	80074a6 <_dtoa_r+0x93e>
 800701c:	9d01      	ldr	r5, [sp, #4]
 800701e:	2331      	movs	r3, #49	; 0x31
 8007020:	f805 3b01 	strb.w	r3, [r5], #1
 8007024:	9b00      	ldr	r3, [sp, #0]
 8007026:	3301      	adds	r3, #1
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	e240      	b.n	80074ae <_dtoa_r+0x946>
 800702c:	07f2      	lsls	r2, r6, #31
 800702e:	d505      	bpl.n	800703c <_dtoa_r+0x4d4>
 8007030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007034:	f7f9 fae8 	bl	8000608 <__aeabi_dmul>
 8007038:	3501      	adds	r5, #1
 800703a:	2301      	movs	r3, #1
 800703c:	1076      	asrs	r6, r6, #1
 800703e:	3708      	adds	r7, #8
 8007040:	e777      	b.n	8006f32 <_dtoa_r+0x3ca>
 8007042:	2502      	movs	r5, #2
 8007044:	e779      	b.n	8006f3a <_dtoa_r+0x3d2>
 8007046:	9f00      	ldr	r7, [sp, #0]
 8007048:	9e03      	ldr	r6, [sp, #12]
 800704a:	e794      	b.n	8006f76 <_dtoa_r+0x40e>
 800704c:	9901      	ldr	r1, [sp, #4]
 800704e:	4b4c      	ldr	r3, [pc, #304]	; (8007180 <_dtoa_r+0x618>)
 8007050:	4431      	add	r1, r6
 8007052:	910d      	str	r1, [sp, #52]	; 0x34
 8007054:	9908      	ldr	r1, [sp, #32]
 8007056:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800705a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800705e:	2900      	cmp	r1, #0
 8007060:	d043      	beq.n	80070ea <_dtoa_r+0x582>
 8007062:	494d      	ldr	r1, [pc, #308]	; (8007198 <_dtoa_r+0x630>)
 8007064:	2000      	movs	r0, #0
 8007066:	f7f9 fbf9 	bl	800085c <__aeabi_ddiv>
 800706a:	4652      	mov	r2, sl
 800706c:	465b      	mov	r3, fp
 800706e:	f7f9 f913 	bl	8000298 <__aeabi_dsub>
 8007072:	9d01      	ldr	r5, [sp, #4]
 8007074:	4682      	mov	sl, r0
 8007076:	468b      	mov	fp, r1
 8007078:	4649      	mov	r1, r9
 800707a:	4640      	mov	r0, r8
 800707c:	f7f9 fd74 	bl	8000b68 <__aeabi_d2iz>
 8007080:	4606      	mov	r6, r0
 8007082:	f7f9 fa57 	bl	8000534 <__aeabi_i2d>
 8007086:	4602      	mov	r2, r0
 8007088:	460b      	mov	r3, r1
 800708a:	4640      	mov	r0, r8
 800708c:	4649      	mov	r1, r9
 800708e:	f7f9 f903 	bl	8000298 <__aeabi_dsub>
 8007092:	3630      	adds	r6, #48	; 0x30
 8007094:	f805 6b01 	strb.w	r6, [r5], #1
 8007098:	4652      	mov	r2, sl
 800709a:	465b      	mov	r3, fp
 800709c:	4680      	mov	r8, r0
 800709e:	4689      	mov	r9, r1
 80070a0:	f7f9 fd24 	bl	8000aec <__aeabi_dcmplt>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	d163      	bne.n	8007170 <_dtoa_r+0x608>
 80070a8:	4642      	mov	r2, r8
 80070aa:	464b      	mov	r3, r9
 80070ac:	4936      	ldr	r1, [pc, #216]	; (8007188 <_dtoa_r+0x620>)
 80070ae:	2000      	movs	r0, #0
 80070b0:	f7f9 f8f2 	bl	8000298 <__aeabi_dsub>
 80070b4:	4652      	mov	r2, sl
 80070b6:	465b      	mov	r3, fp
 80070b8:	f7f9 fd18 	bl	8000aec <__aeabi_dcmplt>
 80070bc:	2800      	cmp	r0, #0
 80070be:	f040 80b5 	bne.w	800722c <_dtoa_r+0x6c4>
 80070c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070c4:	429d      	cmp	r5, r3
 80070c6:	d081      	beq.n	8006fcc <_dtoa_r+0x464>
 80070c8:	4b30      	ldr	r3, [pc, #192]	; (800718c <_dtoa_r+0x624>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	4650      	mov	r0, sl
 80070ce:	4659      	mov	r1, fp
 80070d0:	f7f9 fa9a 	bl	8000608 <__aeabi_dmul>
 80070d4:	4b2d      	ldr	r3, [pc, #180]	; (800718c <_dtoa_r+0x624>)
 80070d6:	4682      	mov	sl, r0
 80070d8:	468b      	mov	fp, r1
 80070da:	4640      	mov	r0, r8
 80070dc:	4649      	mov	r1, r9
 80070de:	2200      	movs	r2, #0
 80070e0:	f7f9 fa92 	bl	8000608 <__aeabi_dmul>
 80070e4:	4680      	mov	r8, r0
 80070e6:	4689      	mov	r9, r1
 80070e8:	e7c6      	b.n	8007078 <_dtoa_r+0x510>
 80070ea:	4650      	mov	r0, sl
 80070ec:	4659      	mov	r1, fp
 80070ee:	f7f9 fa8b 	bl	8000608 <__aeabi_dmul>
 80070f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070f4:	9d01      	ldr	r5, [sp, #4]
 80070f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80070f8:	4682      	mov	sl, r0
 80070fa:	468b      	mov	fp, r1
 80070fc:	4649      	mov	r1, r9
 80070fe:	4640      	mov	r0, r8
 8007100:	f7f9 fd32 	bl	8000b68 <__aeabi_d2iz>
 8007104:	4606      	mov	r6, r0
 8007106:	f7f9 fa15 	bl	8000534 <__aeabi_i2d>
 800710a:	3630      	adds	r6, #48	; 0x30
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	4640      	mov	r0, r8
 8007112:	4649      	mov	r1, r9
 8007114:	f7f9 f8c0 	bl	8000298 <__aeabi_dsub>
 8007118:	f805 6b01 	strb.w	r6, [r5], #1
 800711c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800711e:	429d      	cmp	r5, r3
 8007120:	4680      	mov	r8, r0
 8007122:	4689      	mov	r9, r1
 8007124:	f04f 0200 	mov.w	r2, #0
 8007128:	d124      	bne.n	8007174 <_dtoa_r+0x60c>
 800712a:	4b1b      	ldr	r3, [pc, #108]	; (8007198 <_dtoa_r+0x630>)
 800712c:	4650      	mov	r0, sl
 800712e:	4659      	mov	r1, fp
 8007130:	f7f9 f8b4 	bl	800029c <__adddf3>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	4640      	mov	r0, r8
 800713a:	4649      	mov	r1, r9
 800713c:	f7f9 fcf4 	bl	8000b28 <__aeabi_dcmpgt>
 8007140:	2800      	cmp	r0, #0
 8007142:	d173      	bne.n	800722c <_dtoa_r+0x6c4>
 8007144:	4652      	mov	r2, sl
 8007146:	465b      	mov	r3, fp
 8007148:	4913      	ldr	r1, [pc, #76]	; (8007198 <_dtoa_r+0x630>)
 800714a:	2000      	movs	r0, #0
 800714c:	f7f9 f8a4 	bl	8000298 <__aeabi_dsub>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	4640      	mov	r0, r8
 8007156:	4649      	mov	r1, r9
 8007158:	f7f9 fcc8 	bl	8000aec <__aeabi_dcmplt>
 800715c:	2800      	cmp	r0, #0
 800715e:	f43f af35 	beq.w	8006fcc <_dtoa_r+0x464>
 8007162:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007164:	1e6b      	subs	r3, r5, #1
 8007166:	930f      	str	r3, [sp, #60]	; 0x3c
 8007168:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800716c:	2b30      	cmp	r3, #48	; 0x30
 800716e:	d0f8      	beq.n	8007162 <_dtoa_r+0x5fa>
 8007170:	9700      	str	r7, [sp, #0]
 8007172:	e049      	b.n	8007208 <_dtoa_r+0x6a0>
 8007174:	4b05      	ldr	r3, [pc, #20]	; (800718c <_dtoa_r+0x624>)
 8007176:	f7f9 fa47 	bl	8000608 <__aeabi_dmul>
 800717a:	4680      	mov	r8, r0
 800717c:	4689      	mov	r9, r1
 800717e:	e7bd      	b.n	80070fc <_dtoa_r+0x594>
 8007180:	08009258 	.word	0x08009258
 8007184:	08009230 	.word	0x08009230
 8007188:	3ff00000 	.word	0x3ff00000
 800718c:	40240000 	.word	0x40240000
 8007190:	401c0000 	.word	0x401c0000
 8007194:	40140000 	.word	0x40140000
 8007198:	3fe00000 	.word	0x3fe00000
 800719c:	9d01      	ldr	r5, [sp, #4]
 800719e:	4656      	mov	r6, sl
 80071a0:	465f      	mov	r7, fp
 80071a2:	4642      	mov	r2, r8
 80071a4:	464b      	mov	r3, r9
 80071a6:	4630      	mov	r0, r6
 80071a8:	4639      	mov	r1, r7
 80071aa:	f7f9 fb57 	bl	800085c <__aeabi_ddiv>
 80071ae:	f7f9 fcdb 	bl	8000b68 <__aeabi_d2iz>
 80071b2:	4682      	mov	sl, r0
 80071b4:	f7f9 f9be 	bl	8000534 <__aeabi_i2d>
 80071b8:	4642      	mov	r2, r8
 80071ba:	464b      	mov	r3, r9
 80071bc:	f7f9 fa24 	bl	8000608 <__aeabi_dmul>
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	4630      	mov	r0, r6
 80071c6:	4639      	mov	r1, r7
 80071c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80071cc:	f7f9 f864 	bl	8000298 <__aeabi_dsub>
 80071d0:	f805 6b01 	strb.w	r6, [r5], #1
 80071d4:	9e01      	ldr	r6, [sp, #4]
 80071d6:	9f03      	ldr	r7, [sp, #12]
 80071d8:	1bae      	subs	r6, r5, r6
 80071da:	42b7      	cmp	r7, r6
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	d135      	bne.n	800724e <_dtoa_r+0x6e6>
 80071e2:	f7f9 f85b 	bl	800029c <__adddf3>
 80071e6:	4642      	mov	r2, r8
 80071e8:	464b      	mov	r3, r9
 80071ea:	4606      	mov	r6, r0
 80071ec:	460f      	mov	r7, r1
 80071ee:	f7f9 fc9b 	bl	8000b28 <__aeabi_dcmpgt>
 80071f2:	b9d0      	cbnz	r0, 800722a <_dtoa_r+0x6c2>
 80071f4:	4642      	mov	r2, r8
 80071f6:	464b      	mov	r3, r9
 80071f8:	4630      	mov	r0, r6
 80071fa:	4639      	mov	r1, r7
 80071fc:	f7f9 fc6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007200:	b110      	cbz	r0, 8007208 <_dtoa_r+0x6a0>
 8007202:	f01a 0f01 	tst.w	sl, #1
 8007206:	d110      	bne.n	800722a <_dtoa_r+0x6c2>
 8007208:	4620      	mov	r0, r4
 800720a:	ee18 1a10 	vmov	r1, s16
 800720e:	f000 faf3 	bl	80077f8 <_Bfree>
 8007212:	2300      	movs	r3, #0
 8007214:	9800      	ldr	r0, [sp, #0]
 8007216:	702b      	strb	r3, [r5, #0]
 8007218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800721a:	3001      	adds	r0, #1
 800721c:	6018      	str	r0, [r3, #0]
 800721e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007220:	2b00      	cmp	r3, #0
 8007222:	f43f acf1 	beq.w	8006c08 <_dtoa_r+0xa0>
 8007226:	601d      	str	r5, [r3, #0]
 8007228:	e4ee      	b.n	8006c08 <_dtoa_r+0xa0>
 800722a:	9f00      	ldr	r7, [sp, #0]
 800722c:	462b      	mov	r3, r5
 800722e:	461d      	mov	r5, r3
 8007230:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007234:	2a39      	cmp	r2, #57	; 0x39
 8007236:	d106      	bne.n	8007246 <_dtoa_r+0x6de>
 8007238:	9a01      	ldr	r2, [sp, #4]
 800723a:	429a      	cmp	r2, r3
 800723c:	d1f7      	bne.n	800722e <_dtoa_r+0x6c6>
 800723e:	9901      	ldr	r1, [sp, #4]
 8007240:	2230      	movs	r2, #48	; 0x30
 8007242:	3701      	adds	r7, #1
 8007244:	700a      	strb	r2, [r1, #0]
 8007246:	781a      	ldrb	r2, [r3, #0]
 8007248:	3201      	adds	r2, #1
 800724a:	701a      	strb	r2, [r3, #0]
 800724c:	e790      	b.n	8007170 <_dtoa_r+0x608>
 800724e:	4ba6      	ldr	r3, [pc, #664]	; (80074e8 <_dtoa_r+0x980>)
 8007250:	2200      	movs	r2, #0
 8007252:	f7f9 f9d9 	bl	8000608 <__aeabi_dmul>
 8007256:	2200      	movs	r2, #0
 8007258:	2300      	movs	r3, #0
 800725a:	4606      	mov	r6, r0
 800725c:	460f      	mov	r7, r1
 800725e:	f7f9 fc3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007262:	2800      	cmp	r0, #0
 8007264:	d09d      	beq.n	80071a2 <_dtoa_r+0x63a>
 8007266:	e7cf      	b.n	8007208 <_dtoa_r+0x6a0>
 8007268:	9a08      	ldr	r2, [sp, #32]
 800726a:	2a00      	cmp	r2, #0
 800726c:	f000 80d7 	beq.w	800741e <_dtoa_r+0x8b6>
 8007270:	9a06      	ldr	r2, [sp, #24]
 8007272:	2a01      	cmp	r2, #1
 8007274:	f300 80ba 	bgt.w	80073ec <_dtoa_r+0x884>
 8007278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800727a:	2a00      	cmp	r2, #0
 800727c:	f000 80b2 	beq.w	80073e4 <_dtoa_r+0x87c>
 8007280:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007284:	9e07      	ldr	r6, [sp, #28]
 8007286:	9d04      	ldr	r5, [sp, #16]
 8007288:	9a04      	ldr	r2, [sp, #16]
 800728a:	441a      	add	r2, r3
 800728c:	9204      	str	r2, [sp, #16]
 800728e:	9a05      	ldr	r2, [sp, #20]
 8007290:	2101      	movs	r1, #1
 8007292:	441a      	add	r2, r3
 8007294:	4620      	mov	r0, r4
 8007296:	9205      	str	r2, [sp, #20]
 8007298:	f000 fb66 	bl	8007968 <__i2b>
 800729c:	4607      	mov	r7, r0
 800729e:	2d00      	cmp	r5, #0
 80072a0:	dd0c      	ble.n	80072bc <_dtoa_r+0x754>
 80072a2:	9b05      	ldr	r3, [sp, #20]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	dd09      	ble.n	80072bc <_dtoa_r+0x754>
 80072a8:	42ab      	cmp	r3, r5
 80072aa:	9a04      	ldr	r2, [sp, #16]
 80072ac:	bfa8      	it	ge
 80072ae:	462b      	movge	r3, r5
 80072b0:	1ad2      	subs	r2, r2, r3
 80072b2:	9204      	str	r2, [sp, #16]
 80072b4:	9a05      	ldr	r2, [sp, #20]
 80072b6:	1aed      	subs	r5, r5, r3
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	9305      	str	r3, [sp, #20]
 80072bc:	9b07      	ldr	r3, [sp, #28]
 80072be:	b31b      	cbz	r3, 8007308 <_dtoa_r+0x7a0>
 80072c0:	9b08      	ldr	r3, [sp, #32]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 80af 	beq.w	8007426 <_dtoa_r+0x8be>
 80072c8:	2e00      	cmp	r6, #0
 80072ca:	dd13      	ble.n	80072f4 <_dtoa_r+0x78c>
 80072cc:	4639      	mov	r1, r7
 80072ce:	4632      	mov	r2, r6
 80072d0:	4620      	mov	r0, r4
 80072d2:	f000 fc09 	bl	8007ae8 <__pow5mult>
 80072d6:	ee18 2a10 	vmov	r2, s16
 80072da:	4601      	mov	r1, r0
 80072dc:	4607      	mov	r7, r0
 80072de:	4620      	mov	r0, r4
 80072e0:	f000 fb58 	bl	8007994 <__multiply>
 80072e4:	ee18 1a10 	vmov	r1, s16
 80072e8:	4680      	mov	r8, r0
 80072ea:	4620      	mov	r0, r4
 80072ec:	f000 fa84 	bl	80077f8 <_Bfree>
 80072f0:	ee08 8a10 	vmov	s16, r8
 80072f4:	9b07      	ldr	r3, [sp, #28]
 80072f6:	1b9a      	subs	r2, r3, r6
 80072f8:	d006      	beq.n	8007308 <_dtoa_r+0x7a0>
 80072fa:	ee18 1a10 	vmov	r1, s16
 80072fe:	4620      	mov	r0, r4
 8007300:	f000 fbf2 	bl	8007ae8 <__pow5mult>
 8007304:	ee08 0a10 	vmov	s16, r0
 8007308:	2101      	movs	r1, #1
 800730a:	4620      	mov	r0, r4
 800730c:	f000 fb2c 	bl	8007968 <__i2b>
 8007310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007312:	2b00      	cmp	r3, #0
 8007314:	4606      	mov	r6, r0
 8007316:	f340 8088 	ble.w	800742a <_dtoa_r+0x8c2>
 800731a:	461a      	mov	r2, r3
 800731c:	4601      	mov	r1, r0
 800731e:	4620      	mov	r0, r4
 8007320:	f000 fbe2 	bl	8007ae8 <__pow5mult>
 8007324:	9b06      	ldr	r3, [sp, #24]
 8007326:	2b01      	cmp	r3, #1
 8007328:	4606      	mov	r6, r0
 800732a:	f340 8081 	ble.w	8007430 <_dtoa_r+0x8c8>
 800732e:	f04f 0800 	mov.w	r8, #0
 8007332:	6933      	ldr	r3, [r6, #16]
 8007334:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007338:	6918      	ldr	r0, [r3, #16]
 800733a:	f000 fac5 	bl	80078c8 <__hi0bits>
 800733e:	f1c0 0020 	rsb	r0, r0, #32
 8007342:	9b05      	ldr	r3, [sp, #20]
 8007344:	4418      	add	r0, r3
 8007346:	f010 001f 	ands.w	r0, r0, #31
 800734a:	f000 8092 	beq.w	8007472 <_dtoa_r+0x90a>
 800734e:	f1c0 0320 	rsb	r3, r0, #32
 8007352:	2b04      	cmp	r3, #4
 8007354:	f340 808a 	ble.w	800746c <_dtoa_r+0x904>
 8007358:	f1c0 001c 	rsb	r0, r0, #28
 800735c:	9b04      	ldr	r3, [sp, #16]
 800735e:	4403      	add	r3, r0
 8007360:	9304      	str	r3, [sp, #16]
 8007362:	9b05      	ldr	r3, [sp, #20]
 8007364:	4403      	add	r3, r0
 8007366:	4405      	add	r5, r0
 8007368:	9305      	str	r3, [sp, #20]
 800736a:	9b04      	ldr	r3, [sp, #16]
 800736c:	2b00      	cmp	r3, #0
 800736e:	dd07      	ble.n	8007380 <_dtoa_r+0x818>
 8007370:	ee18 1a10 	vmov	r1, s16
 8007374:	461a      	mov	r2, r3
 8007376:	4620      	mov	r0, r4
 8007378:	f000 fc10 	bl	8007b9c <__lshift>
 800737c:	ee08 0a10 	vmov	s16, r0
 8007380:	9b05      	ldr	r3, [sp, #20]
 8007382:	2b00      	cmp	r3, #0
 8007384:	dd05      	ble.n	8007392 <_dtoa_r+0x82a>
 8007386:	4631      	mov	r1, r6
 8007388:	461a      	mov	r2, r3
 800738a:	4620      	mov	r0, r4
 800738c:	f000 fc06 	bl	8007b9c <__lshift>
 8007390:	4606      	mov	r6, r0
 8007392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007394:	2b00      	cmp	r3, #0
 8007396:	d06e      	beq.n	8007476 <_dtoa_r+0x90e>
 8007398:	ee18 0a10 	vmov	r0, s16
 800739c:	4631      	mov	r1, r6
 800739e:	f000 fc6d 	bl	8007c7c <__mcmp>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	da67      	bge.n	8007476 <_dtoa_r+0x90e>
 80073a6:	9b00      	ldr	r3, [sp, #0]
 80073a8:	3b01      	subs	r3, #1
 80073aa:	ee18 1a10 	vmov	r1, s16
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	220a      	movs	r2, #10
 80073b2:	2300      	movs	r3, #0
 80073b4:	4620      	mov	r0, r4
 80073b6:	f000 fa41 	bl	800783c <__multadd>
 80073ba:	9b08      	ldr	r3, [sp, #32]
 80073bc:	ee08 0a10 	vmov	s16, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f000 81b1 	beq.w	8007728 <_dtoa_r+0xbc0>
 80073c6:	2300      	movs	r3, #0
 80073c8:	4639      	mov	r1, r7
 80073ca:	220a      	movs	r2, #10
 80073cc:	4620      	mov	r0, r4
 80073ce:	f000 fa35 	bl	800783c <__multadd>
 80073d2:	9b02      	ldr	r3, [sp, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	4607      	mov	r7, r0
 80073d8:	f300 808e 	bgt.w	80074f8 <_dtoa_r+0x990>
 80073dc:	9b06      	ldr	r3, [sp, #24]
 80073de:	2b02      	cmp	r3, #2
 80073e0:	dc51      	bgt.n	8007486 <_dtoa_r+0x91e>
 80073e2:	e089      	b.n	80074f8 <_dtoa_r+0x990>
 80073e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80073ea:	e74b      	b.n	8007284 <_dtoa_r+0x71c>
 80073ec:	9b03      	ldr	r3, [sp, #12]
 80073ee:	1e5e      	subs	r6, r3, #1
 80073f0:	9b07      	ldr	r3, [sp, #28]
 80073f2:	42b3      	cmp	r3, r6
 80073f4:	bfbf      	itttt	lt
 80073f6:	9b07      	ldrlt	r3, [sp, #28]
 80073f8:	9607      	strlt	r6, [sp, #28]
 80073fa:	1af2      	sublt	r2, r6, r3
 80073fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80073fe:	bfb6      	itet	lt
 8007400:	189b      	addlt	r3, r3, r2
 8007402:	1b9e      	subge	r6, r3, r6
 8007404:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007406:	9b03      	ldr	r3, [sp, #12]
 8007408:	bfb8      	it	lt
 800740a:	2600      	movlt	r6, #0
 800740c:	2b00      	cmp	r3, #0
 800740e:	bfb7      	itett	lt
 8007410:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007414:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007418:	1a9d      	sublt	r5, r3, r2
 800741a:	2300      	movlt	r3, #0
 800741c:	e734      	b.n	8007288 <_dtoa_r+0x720>
 800741e:	9e07      	ldr	r6, [sp, #28]
 8007420:	9d04      	ldr	r5, [sp, #16]
 8007422:	9f08      	ldr	r7, [sp, #32]
 8007424:	e73b      	b.n	800729e <_dtoa_r+0x736>
 8007426:	9a07      	ldr	r2, [sp, #28]
 8007428:	e767      	b.n	80072fa <_dtoa_r+0x792>
 800742a:	9b06      	ldr	r3, [sp, #24]
 800742c:	2b01      	cmp	r3, #1
 800742e:	dc18      	bgt.n	8007462 <_dtoa_r+0x8fa>
 8007430:	f1ba 0f00 	cmp.w	sl, #0
 8007434:	d115      	bne.n	8007462 <_dtoa_r+0x8fa>
 8007436:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800743a:	b993      	cbnz	r3, 8007462 <_dtoa_r+0x8fa>
 800743c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007440:	0d1b      	lsrs	r3, r3, #20
 8007442:	051b      	lsls	r3, r3, #20
 8007444:	b183      	cbz	r3, 8007468 <_dtoa_r+0x900>
 8007446:	9b04      	ldr	r3, [sp, #16]
 8007448:	3301      	adds	r3, #1
 800744a:	9304      	str	r3, [sp, #16]
 800744c:	9b05      	ldr	r3, [sp, #20]
 800744e:	3301      	adds	r3, #1
 8007450:	9305      	str	r3, [sp, #20]
 8007452:	f04f 0801 	mov.w	r8, #1
 8007456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007458:	2b00      	cmp	r3, #0
 800745a:	f47f af6a 	bne.w	8007332 <_dtoa_r+0x7ca>
 800745e:	2001      	movs	r0, #1
 8007460:	e76f      	b.n	8007342 <_dtoa_r+0x7da>
 8007462:	f04f 0800 	mov.w	r8, #0
 8007466:	e7f6      	b.n	8007456 <_dtoa_r+0x8ee>
 8007468:	4698      	mov	r8, r3
 800746a:	e7f4      	b.n	8007456 <_dtoa_r+0x8ee>
 800746c:	f43f af7d 	beq.w	800736a <_dtoa_r+0x802>
 8007470:	4618      	mov	r0, r3
 8007472:	301c      	adds	r0, #28
 8007474:	e772      	b.n	800735c <_dtoa_r+0x7f4>
 8007476:	9b03      	ldr	r3, [sp, #12]
 8007478:	2b00      	cmp	r3, #0
 800747a:	dc37      	bgt.n	80074ec <_dtoa_r+0x984>
 800747c:	9b06      	ldr	r3, [sp, #24]
 800747e:	2b02      	cmp	r3, #2
 8007480:	dd34      	ble.n	80074ec <_dtoa_r+0x984>
 8007482:	9b03      	ldr	r3, [sp, #12]
 8007484:	9302      	str	r3, [sp, #8]
 8007486:	9b02      	ldr	r3, [sp, #8]
 8007488:	b96b      	cbnz	r3, 80074a6 <_dtoa_r+0x93e>
 800748a:	4631      	mov	r1, r6
 800748c:	2205      	movs	r2, #5
 800748e:	4620      	mov	r0, r4
 8007490:	f000 f9d4 	bl	800783c <__multadd>
 8007494:	4601      	mov	r1, r0
 8007496:	4606      	mov	r6, r0
 8007498:	ee18 0a10 	vmov	r0, s16
 800749c:	f000 fbee 	bl	8007c7c <__mcmp>
 80074a0:	2800      	cmp	r0, #0
 80074a2:	f73f adbb 	bgt.w	800701c <_dtoa_r+0x4b4>
 80074a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a8:	9d01      	ldr	r5, [sp, #4]
 80074aa:	43db      	mvns	r3, r3
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	f04f 0800 	mov.w	r8, #0
 80074b2:	4631      	mov	r1, r6
 80074b4:	4620      	mov	r0, r4
 80074b6:	f000 f99f 	bl	80077f8 <_Bfree>
 80074ba:	2f00      	cmp	r7, #0
 80074bc:	f43f aea4 	beq.w	8007208 <_dtoa_r+0x6a0>
 80074c0:	f1b8 0f00 	cmp.w	r8, #0
 80074c4:	d005      	beq.n	80074d2 <_dtoa_r+0x96a>
 80074c6:	45b8      	cmp	r8, r7
 80074c8:	d003      	beq.n	80074d2 <_dtoa_r+0x96a>
 80074ca:	4641      	mov	r1, r8
 80074cc:	4620      	mov	r0, r4
 80074ce:	f000 f993 	bl	80077f8 <_Bfree>
 80074d2:	4639      	mov	r1, r7
 80074d4:	4620      	mov	r0, r4
 80074d6:	f000 f98f 	bl	80077f8 <_Bfree>
 80074da:	e695      	b.n	8007208 <_dtoa_r+0x6a0>
 80074dc:	2600      	movs	r6, #0
 80074de:	4637      	mov	r7, r6
 80074e0:	e7e1      	b.n	80074a6 <_dtoa_r+0x93e>
 80074e2:	9700      	str	r7, [sp, #0]
 80074e4:	4637      	mov	r7, r6
 80074e6:	e599      	b.n	800701c <_dtoa_r+0x4b4>
 80074e8:	40240000 	.word	0x40240000
 80074ec:	9b08      	ldr	r3, [sp, #32]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 80ca 	beq.w	8007688 <_dtoa_r+0xb20>
 80074f4:	9b03      	ldr	r3, [sp, #12]
 80074f6:	9302      	str	r3, [sp, #8]
 80074f8:	2d00      	cmp	r5, #0
 80074fa:	dd05      	ble.n	8007508 <_dtoa_r+0x9a0>
 80074fc:	4639      	mov	r1, r7
 80074fe:	462a      	mov	r2, r5
 8007500:	4620      	mov	r0, r4
 8007502:	f000 fb4b 	bl	8007b9c <__lshift>
 8007506:	4607      	mov	r7, r0
 8007508:	f1b8 0f00 	cmp.w	r8, #0
 800750c:	d05b      	beq.n	80075c6 <_dtoa_r+0xa5e>
 800750e:	6879      	ldr	r1, [r7, #4]
 8007510:	4620      	mov	r0, r4
 8007512:	f000 f931 	bl	8007778 <_Balloc>
 8007516:	4605      	mov	r5, r0
 8007518:	b928      	cbnz	r0, 8007526 <_dtoa_r+0x9be>
 800751a:	4b87      	ldr	r3, [pc, #540]	; (8007738 <_dtoa_r+0xbd0>)
 800751c:	4602      	mov	r2, r0
 800751e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007522:	f7ff bb3b 	b.w	8006b9c <_dtoa_r+0x34>
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	3202      	adds	r2, #2
 800752a:	0092      	lsls	r2, r2, #2
 800752c:	f107 010c 	add.w	r1, r7, #12
 8007530:	300c      	adds	r0, #12
 8007532:	f000 f913 	bl	800775c <memcpy>
 8007536:	2201      	movs	r2, #1
 8007538:	4629      	mov	r1, r5
 800753a:	4620      	mov	r0, r4
 800753c:	f000 fb2e 	bl	8007b9c <__lshift>
 8007540:	9b01      	ldr	r3, [sp, #4]
 8007542:	f103 0901 	add.w	r9, r3, #1
 8007546:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800754a:	4413      	add	r3, r2
 800754c:	9305      	str	r3, [sp, #20]
 800754e:	f00a 0301 	and.w	r3, sl, #1
 8007552:	46b8      	mov	r8, r7
 8007554:	9304      	str	r3, [sp, #16]
 8007556:	4607      	mov	r7, r0
 8007558:	4631      	mov	r1, r6
 800755a:	ee18 0a10 	vmov	r0, s16
 800755e:	f7ff fa77 	bl	8006a50 <quorem>
 8007562:	4641      	mov	r1, r8
 8007564:	9002      	str	r0, [sp, #8]
 8007566:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800756a:	ee18 0a10 	vmov	r0, s16
 800756e:	f000 fb85 	bl	8007c7c <__mcmp>
 8007572:	463a      	mov	r2, r7
 8007574:	9003      	str	r0, [sp, #12]
 8007576:	4631      	mov	r1, r6
 8007578:	4620      	mov	r0, r4
 800757a:	f000 fb9b 	bl	8007cb4 <__mdiff>
 800757e:	68c2      	ldr	r2, [r0, #12]
 8007580:	f109 3bff 	add.w	fp, r9, #4294967295
 8007584:	4605      	mov	r5, r0
 8007586:	bb02      	cbnz	r2, 80075ca <_dtoa_r+0xa62>
 8007588:	4601      	mov	r1, r0
 800758a:	ee18 0a10 	vmov	r0, s16
 800758e:	f000 fb75 	bl	8007c7c <__mcmp>
 8007592:	4602      	mov	r2, r0
 8007594:	4629      	mov	r1, r5
 8007596:	4620      	mov	r0, r4
 8007598:	9207      	str	r2, [sp, #28]
 800759a:	f000 f92d 	bl	80077f8 <_Bfree>
 800759e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80075a2:	ea43 0102 	orr.w	r1, r3, r2
 80075a6:	9b04      	ldr	r3, [sp, #16]
 80075a8:	430b      	orrs	r3, r1
 80075aa:	464d      	mov	r5, r9
 80075ac:	d10f      	bne.n	80075ce <_dtoa_r+0xa66>
 80075ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075b2:	d02a      	beq.n	800760a <_dtoa_r+0xaa2>
 80075b4:	9b03      	ldr	r3, [sp, #12]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	dd02      	ble.n	80075c0 <_dtoa_r+0xa58>
 80075ba:	9b02      	ldr	r3, [sp, #8]
 80075bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80075c0:	f88b a000 	strb.w	sl, [fp]
 80075c4:	e775      	b.n	80074b2 <_dtoa_r+0x94a>
 80075c6:	4638      	mov	r0, r7
 80075c8:	e7ba      	b.n	8007540 <_dtoa_r+0x9d8>
 80075ca:	2201      	movs	r2, #1
 80075cc:	e7e2      	b.n	8007594 <_dtoa_r+0xa2c>
 80075ce:	9b03      	ldr	r3, [sp, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	db04      	blt.n	80075de <_dtoa_r+0xa76>
 80075d4:	9906      	ldr	r1, [sp, #24]
 80075d6:	430b      	orrs	r3, r1
 80075d8:	9904      	ldr	r1, [sp, #16]
 80075da:	430b      	orrs	r3, r1
 80075dc:	d122      	bne.n	8007624 <_dtoa_r+0xabc>
 80075de:	2a00      	cmp	r2, #0
 80075e0:	ddee      	ble.n	80075c0 <_dtoa_r+0xa58>
 80075e2:	ee18 1a10 	vmov	r1, s16
 80075e6:	2201      	movs	r2, #1
 80075e8:	4620      	mov	r0, r4
 80075ea:	f000 fad7 	bl	8007b9c <__lshift>
 80075ee:	4631      	mov	r1, r6
 80075f0:	ee08 0a10 	vmov	s16, r0
 80075f4:	f000 fb42 	bl	8007c7c <__mcmp>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	dc03      	bgt.n	8007604 <_dtoa_r+0xa9c>
 80075fc:	d1e0      	bne.n	80075c0 <_dtoa_r+0xa58>
 80075fe:	f01a 0f01 	tst.w	sl, #1
 8007602:	d0dd      	beq.n	80075c0 <_dtoa_r+0xa58>
 8007604:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007608:	d1d7      	bne.n	80075ba <_dtoa_r+0xa52>
 800760a:	2339      	movs	r3, #57	; 0x39
 800760c:	f88b 3000 	strb.w	r3, [fp]
 8007610:	462b      	mov	r3, r5
 8007612:	461d      	mov	r5, r3
 8007614:	3b01      	subs	r3, #1
 8007616:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800761a:	2a39      	cmp	r2, #57	; 0x39
 800761c:	d071      	beq.n	8007702 <_dtoa_r+0xb9a>
 800761e:	3201      	adds	r2, #1
 8007620:	701a      	strb	r2, [r3, #0]
 8007622:	e746      	b.n	80074b2 <_dtoa_r+0x94a>
 8007624:	2a00      	cmp	r2, #0
 8007626:	dd07      	ble.n	8007638 <_dtoa_r+0xad0>
 8007628:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800762c:	d0ed      	beq.n	800760a <_dtoa_r+0xaa2>
 800762e:	f10a 0301 	add.w	r3, sl, #1
 8007632:	f88b 3000 	strb.w	r3, [fp]
 8007636:	e73c      	b.n	80074b2 <_dtoa_r+0x94a>
 8007638:	9b05      	ldr	r3, [sp, #20]
 800763a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800763e:	4599      	cmp	r9, r3
 8007640:	d047      	beq.n	80076d2 <_dtoa_r+0xb6a>
 8007642:	ee18 1a10 	vmov	r1, s16
 8007646:	2300      	movs	r3, #0
 8007648:	220a      	movs	r2, #10
 800764a:	4620      	mov	r0, r4
 800764c:	f000 f8f6 	bl	800783c <__multadd>
 8007650:	45b8      	cmp	r8, r7
 8007652:	ee08 0a10 	vmov	s16, r0
 8007656:	f04f 0300 	mov.w	r3, #0
 800765a:	f04f 020a 	mov.w	r2, #10
 800765e:	4641      	mov	r1, r8
 8007660:	4620      	mov	r0, r4
 8007662:	d106      	bne.n	8007672 <_dtoa_r+0xb0a>
 8007664:	f000 f8ea 	bl	800783c <__multadd>
 8007668:	4680      	mov	r8, r0
 800766a:	4607      	mov	r7, r0
 800766c:	f109 0901 	add.w	r9, r9, #1
 8007670:	e772      	b.n	8007558 <_dtoa_r+0x9f0>
 8007672:	f000 f8e3 	bl	800783c <__multadd>
 8007676:	4639      	mov	r1, r7
 8007678:	4680      	mov	r8, r0
 800767a:	2300      	movs	r3, #0
 800767c:	220a      	movs	r2, #10
 800767e:	4620      	mov	r0, r4
 8007680:	f000 f8dc 	bl	800783c <__multadd>
 8007684:	4607      	mov	r7, r0
 8007686:	e7f1      	b.n	800766c <_dtoa_r+0xb04>
 8007688:	9b03      	ldr	r3, [sp, #12]
 800768a:	9302      	str	r3, [sp, #8]
 800768c:	9d01      	ldr	r5, [sp, #4]
 800768e:	ee18 0a10 	vmov	r0, s16
 8007692:	4631      	mov	r1, r6
 8007694:	f7ff f9dc 	bl	8006a50 <quorem>
 8007698:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800769c:	9b01      	ldr	r3, [sp, #4]
 800769e:	f805 ab01 	strb.w	sl, [r5], #1
 80076a2:	1aea      	subs	r2, r5, r3
 80076a4:	9b02      	ldr	r3, [sp, #8]
 80076a6:	4293      	cmp	r3, r2
 80076a8:	dd09      	ble.n	80076be <_dtoa_r+0xb56>
 80076aa:	ee18 1a10 	vmov	r1, s16
 80076ae:	2300      	movs	r3, #0
 80076b0:	220a      	movs	r2, #10
 80076b2:	4620      	mov	r0, r4
 80076b4:	f000 f8c2 	bl	800783c <__multadd>
 80076b8:	ee08 0a10 	vmov	s16, r0
 80076bc:	e7e7      	b.n	800768e <_dtoa_r+0xb26>
 80076be:	9b02      	ldr	r3, [sp, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	bfc8      	it	gt
 80076c4:	461d      	movgt	r5, r3
 80076c6:	9b01      	ldr	r3, [sp, #4]
 80076c8:	bfd8      	it	le
 80076ca:	2501      	movle	r5, #1
 80076cc:	441d      	add	r5, r3
 80076ce:	f04f 0800 	mov.w	r8, #0
 80076d2:	ee18 1a10 	vmov	r1, s16
 80076d6:	2201      	movs	r2, #1
 80076d8:	4620      	mov	r0, r4
 80076da:	f000 fa5f 	bl	8007b9c <__lshift>
 80076de:	4631      	mov	r1, r6
 80076e0:	ee08 0a10 	vmov	s16, r0
 80076e4:	f000 faca 	bl	8007c7c <__mcmp>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	dc91      	bgt.n	8007610 <_dtoa_r+0xaa8>
 80076ec:	d102      	bne.n	80076f4 <_dtoa_r+0xb8c>
 80076ee:	f01a 0f01 	tst.w	sl, #1
 80076f2:	d18d      	bne.n	8007610 <_dtoa_r+0xaa8>
 80076f4:	462b      	mov	r3, r5
 80076f6:	461d      	mov	r5, r3
 80076f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076fc:	2a30      	cmp	r2, #48	; 0x30
 80076fe:	d0fa      	beq.n	80076f6 <_dtoa_r+0xb8e>
 8007700:	e6d7      	b.n	80074b2 <_dtoa_r+0x94a>
 8007702:	9a01      	ldr	r2, [sp, #4]
 8007704:	429a      	cmp	r2, r3
 8007706:	d184      	bne.n	8007612 <_dtoa_r+0xaaa>
 8007708:	9b00      	ldr	r3, [sp, #0]
 800770a:	3301      	adds	r3, #1
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	2331      	movs	r3, #49	; 0x31
 8007710:	7013      	strb	r3, [r2, #0]
 8007712:	e6ce      	b.n	80074b2 <_dtoa_r+0x94a>
 8007714:	4b09      	ldr	r3, [pc, #36]	; (800773c <_dtoa_r+0xbd4>)
 8007716:	f7ff ba95 	b.w	8006c44 <_dtoa_r+0xdc>
 800771a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800771c:	2b00      	cmp	r3, #0
 800771e:	f47f aa6e 	bne.w	8006bfe <_dtoa_r+0x96>
 8007722:	4b07      	ldr	r3, [pc, #28]	; (8007740 <_dtoa_r+0xbd8>)
 8007724:	f7ff ba8e 	b.w	8006c44 <_dtoa_r+0xdc>
 8007728:	9b02      	ldr	r3, [sp, #8]
 800772a:	2b00      	cmp	r3, #0
 800772c:	dcae      	bgt.n	800768c <_dtoa_r+0xb24>
 800772e:	9b06      	ldr	r3, [sp, #24]
 8007730:	2b02      	cmp	r3, #2
 8007732:	f73f aea8 	bgt.w	8007486 <_dtoa_r+0x91e>
 8007736:	e7a9      	b.n	800768c <_dtoa_r+0xb24>
 8007738:	080091bf 	.word	0x080091bf
 800773c:	0800911c 	.word	0x0800911c
 8007740:	08009140 	.word	0x08009140

08007744 <_localeconv_r>:
 8007744:	4800      	ldr	r0, [pc, #0]	; (8007748 <_localeconv_r+0x4>)
 8007746:	4770      	bx	lr
 8007748:	20000160 	.word	0x20000160

0800774c <malloc>:
 800774c:	4b02      	ldr	r3, [pc, #8]	; (8007758 <malloc+0xc>)
 800774e:	4601      	mov	r1, r0
 8007750:	6818      	ldr	r0, [r3, #0]
 8007752:	f000 bc17 	b.w	8007f84 <_malloc_r>
 8007756:	bf00      	nop
 8007758:	2000000c 	.word	0x2000000c

0800775c <memcpy>:
 800775c:	440a      	add	r2, r1
 800775e:	4291      	cmp	r1, r2
 8007760:	f100 33ff 	add.w	r3, r0, #4294967295
 8007764:	d100      	bne.n	8007768 <memcpy+0xc>
 8007766:	4770      	bx	lr
 8007768:	b510      	push	{r4, lr}
 800776a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800776e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007772:	4291      	cmp	r1, r2
 8007774:	d1f9      	bne.n	800776a <memcpy+0xe>
 8007776:	bd10      	pop	{r4, pc}

08007778 <_Balloc>:
 8007778:	b570      	push	{r4, r5, r6, lr}
 800777a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800777c:	4604      	mov	r4, r0
 800777e:	460d      	mov	r5, r1
 8007780:	b976      	cbnz	r6, 80077a0 <_Balloc+0x28>
 8007782:	2010      	movs	r0, #16
 8007784:	f7ff ffe2 	bl	800774c <malloc>
 8007788:	4602      	mov	r2, r0
 800778a:	6260      	str	r0, [r4, #36]	; 0x24
 800778c:	b920      	cbnz	r0, 8007798 <_Balloc+0x20>
 800778e:	4b18      	ldr	r3, [pc, #96]	; (80077f0 <_Balloc+0x78>)
 8007790:	4818      	ldr	r0, [pc, #96]	; (80077f4 <_Balloc+0x7c>)
 8007792:	2166      	movs	r1, #102	; 0x66
 8007794:	f000 fdd6 	bl	8008344 <__assert_func>
 8007798:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800779c:	6006      	str	r6, [r0, #0]
 800779e:	60c6      	str	r6, [r0, #12]
 80077a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80077a2:	68f3      	ldr	r3, [r6, #12]
 80077a4:	b183      	cbz	r3, 80077c8 <_Balloc+0x50>
 80077a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077ae:	b9b8      	cbnz	r0, 80077e0 <_Balloc+0x68>
 80077b0:	2101      	movs	r1, #1
 80077b2:	fa01 f605 	lsl.w	r6, r1, r5
 80077b6:	1d72      	adds	r2, r6, #5
 80077b8:	0092      	lsls	r2, r2, #2
 80077ba:	4620      	mov	r0, r4
 80077bc:	f000 fb60 	bl	8007e80 <_calloc_r>
 80077c0:	b160      	cbz	r0, 80077dc <_Balloc+0x64>
 80077c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077c6:	e00e      	b.n	80077e6 <_Balloc+0x6e>
 80077c8:	2221      	movs	r2, #33	; 0x21
 80077ca:	2104      	movs	r1, #4
 80077cc:	4620      	mov	r0, r4
 80077ce:	f000 fb57 	bl	8007e80 <_calloc_r>
 80077d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077d4:	60f0      	str	r0, [r6, #12]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e4      	bne.n	80077a6 <_Balloc+0x2e>
 80077dc:	2000      	movs	r0, #0
 80077de:	bd70      	pop	{r4, r5, r6, pc}
 80077e0:	6802      	ldr	r2, [r0, #0]
 80077e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077e6:	2300      	movs	r3, #0
 80077e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077ec:	e7f7      	b.n	80077de <_Balloc+0x66>
 80077ee:	bf00      	nop
 80077f0:	0800914d 	.word	0x0800914d
 80077f4:	080091d0 	.word	0x080091d0

080077f8 <_Bfree>:
 80077f8:	b570      	push	{r4, r5, r6, lr}
 80077fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077fc:	4605      	mov	r5, r0
 80077fe:	460c      	mov	r4, r1
 8007800:	b976      	cbnz	r6, 8007820 <_Bfree+0x28>
 8007802:	2010      	movs	r0, #16
 8007804:	f7ff ffa2 	bl	800774c <malloc>
 8007808:	4602      	mov	r2, r0
 800780a:	6268      	str	r0, [r5, #36]	; 0x24
 800780c:	b920      	cbnz	r0, 8007818 <_Bfree+0x20>
 800780e:	4b09      	ldr	r3, [pc, #36]	; (8007834 <_Bfree+0x3c>)
 8007810:	4809      	ldr	r0, [pc, #36]	; (8007838 <_Bfree+0x40>)
 8007812:	218a      	movs	r1, #138	; 0x8a
 8007814:	f000 fd96 	bl	8008344 <__assert_func>
 8007818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800781c:	6006      	str	r6, [r0, #0]
 800781e:	60c6      	str	r6, [r0, #12]
 8007820:	b13c      	cbz	r4, 8007832 <_Bfree+0x3a>
 8007822:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007824:	6862      	ldr	r2, [r4, #4]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800782c:	6021      	str	r1, [r4, #0]
 800782e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007832:	bd70      	pop	{r4, r5, r6, pc}
 8007834:	0800914d 	.word	0x0800914d
 8007838:	080091d0 	.word	0x080091d0

0800783c <__multadd>:
 800783c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007840:	690d      	ldr	r5, [r1, #16]
 8007842:	4607      	mov	r7, r0
 8007844:	460c      	mov	r4, r1
 8007846:	461e      	mov	r6, r3
 8007848:	f101 0c14 	add.w	ip, r1, #20
 800784c:	2000      	movs	r0, #0
 800784e:	f8dc 3000 	ldr.w	r3, [ip]
 8007852:	b299      	uxth	r1, r3
 8007854:	fb02 6101 	mla	r1, r2, r1, r6
 8007858:	0c1e      	lsrs	r6, r3, #16
 800785a:	0c0b      	lsrs	r3, r1, #16
 800785c:	fb02 3306 	mla	r3, r2, r6, r3
 8007860:	b289      	uxth	r1, r1
 8007862:	3001      	adds	r0, #1
 8007864:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007868:	4285      	cmp	r5, r0
 800786a:	f84c 1b04 	str.w	r1, [ip], #4
 800786e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007872:	dcec      	bgt.n	800784e <__multadd+0x12>
 8007874:	b30e      	cbz	r6, 80078ba <__multadd+0x7e>
 8007876:	68a3      	ldr	r3, [r4, #8]
 8007878:	42ab      	cmp	r3, r5
 800787a:	dc19      	bgt.n	80078b0 <__multadd+0x74>
 800787c:	6861      	ldr	r1, [r4, #4]
 800787e:	4638      	mov	r0, r7
 8007880:	3101      	adds	r1, #1
 8007882:	f7ff ff79 	bl	8007778 <_Balloc>
 8007886:	4680      	mov	r8, r0
 8007888:	b928      	cbnz	r0, 8007896 <__multadd+0x5a>
 800788a:	4602      	mov	r2, r0
 800788c:	4b0c      	ldr	r3, [pc, #48]	; (80078c0 <__multadd+0x84>)
 800788e:	480d      	ldr	r0, [pc, #52]	; (80078c4 <__multadd+0x88>)
 8007890:	21b5      	movs	r1, #181	; 0xb5
 8007892:	f000 fd57 	bl	8008344 <__assert_func>
 8007896:	6922      	ldr	r2, [r4, #16]
 8007898:	3202      	adds	r2, #2
 800789a:	f104 010c 	add.w	r1, r4, #12
 800789e:	0092      	lsls	r2, r2, #2
 80078a0:	300c      	adds	r0, #12
 80078a2:	f7ff ff5b 	bl	800775c <memcpy>
 80078a6:	4621      	mov	r1, r4
 80078a8:	4638      	mov	r0, r7
 80078aa:	f7ff ffa5 	bl	80077f8 <_Bfree>
 80078ae:	4644      	mov	r4, r8
 80078b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078b4:	3501      	adds	r5, #1
 80078b6:	615e      	str	r6, [r3, #20]
 80078b8:	6125      	str	r5, [r4, #16]
 80078ba:	4620      	mov	r0, r4
 80078bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078c0:	080091bf 	.word	0x080091bf
 80078c4:	080091d0 	.word	0x080091d0

080078c8 <__hi0bits>:
 80078c8:	0c03      	lsrs	r3, r0, #16
 80078ca:	041b      	lsls	r3, r3, #16
 80078cc:	b9d3      	cbnz	r3, 8007904 <__hi0bits+0x3c>
 80078ce:	0400      	lsls	r0, r0, #16
 80078d0:	2310      	movs	r3, #16
 80078d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80078d6:	bf04      	itt	eq
 80078d8:	0200      	lsleq	r0, r0, #8
 80078da:	3308      	addeq	r3, #8
 80078dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80078e0:	bf04      	itt	eq
 80078e2:	0100      	lsleq	r0, r0, #4
 80078e4:	3304      	addeq	r3, #4
 80078e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80078ea:	bf04      	itt	eq
 80078ec:	0080      	lsleq	r0, r0, #2
 80078ee:	3302      	addeq	r3, #2
 80078f0:	2800      	cmp	r0, #0
 80078f2:	db05      	blt.n	8007900 <__hi0bits+0x38>
 80078f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80078f8:	f103 0301 	add.w	r3, r3, #1
 80078fc:	bf08      	it	eq
 80078fe:	2320      	moveq	r3, #32
 8007900:	4618      	mov	r0, r3
 8007902:	4770      	bx	lr
 8007904:	2300      	movs	r3, #0
 8007906:	e7e4      	b.n	80078d2 <__hi0bits+0xa>

08007908 <__lo0bits>:
 8007908:	6803      	ldr	r3, [r0, #0]
 800790a:	f013 0207 	ands.w	r2, r3, #7
 800790e:	4601      	mov	r1, r0
 8007910:	d00b      	beq.n	800792a <__lo0bits+0x22>
 8007912:	07da      	lsls	r2, r3, #31
 8007914:	d423      	bmi.n	800795e <__lo0bits+0x56>
 8007916:	0798      	lsls	r0, r3, #30
 8007918:	bf49      	itett	mi
 800791a:	085b      	lsrmi	r3, r3, #1
 800791c:	089b      	lsrpl	r3, r3, #2
 800791e:	2001      	movmi	r0, #1
 8007920:	600b      	strmi	r3, [r1, #0]
 8007922:	bf5c      	itt	pl
 8007924:	600b      	strpl	r3, [r1, #0]
 8007926:	2002      	movpl	r0, #2
 8007928:	4770      	bx	lr
 800792a:	b298      	uxth	r0, r3
 800792c:	b9a8      	cbnz	r0, 800795a <__lo0bits+0x52>
 800792e:	0c1b      	lsrs	r3, r3, #16
 8007930:	2010      	movs	r0, #16
 8007932:	b2da      	uxtb	r2, r3
 8007934:	b90a      	cbnz	r2, 800793a <__lo0bits+0x32>
 8007936:	3008      	adds	r0, #8
 8007938:	0a1b      	lsrs	r3, r3, #8
 800793a:	071a      	lsls	r2, r3, #28
 800793c:	bf04      	itt	eq
 800793e:	091b      	lsreq	r3, r3, #4
 8007940:	3004      	addeq	r0, #4
 8007942:	079a      	lsls	r2, r3, #30
 8007944:	bf04      	itt	eq
 8007946:	089b      	lsreq	r3, r3, #2
 8007948:	3002      	addeq	r0, #2
 800794a:	07da      	lsls	r2, r3, #31
 800794c:	d403      	bmi.n	8007956 <__lo0bits+0x4e>
 800794e:	085b      	lsrs	r3, r3, #1
 8007950:	f100 0001 	add.w	r0, r0, #1
 8007954:	d005      	beq.n	8007962 <__lo0bits+0x5a>
 8007956:	600b      	str	r3, [r1, #0]
 8007958:	4770      	bx	lr
 800795a:	4610      	mov	r0, r2
 800795c:	e7e9      	b.n	8007932 <__lo0bits+0x2a>
 800795e:	2000      	movs	r0, #0
 8007960:	4770      	bx	lr
 8007962:	2020      	movs	r0, #32
 8007964:	4770      	bx	lr
	...

08007968 <__i2b>:
 8007968:	b510      	push	{r4, lr}
 800796a:	460c      	mov	r4, r1
 800796c:	2101      	movs	r1, #1
 800796e:	f7ff ff03 	bl	8007778 <_Balloc>
 8007972:	4602      	mov	r2, r0
 8007974:	b928      	cbnz	r0, 8007982 <__i2b+0x1a>
 8007976:	4b05      	ldr	r3, [pc, #20]	; (800798c <__i2b+0x24>)
 8007978:	4805      	ldr	r0, [pc, #20]	; (8007990 <__i2b+0x28>)
 800797a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800797e:	f000 fce1 	bl	8008344 <__assert_func>
 8007982:	2301      	movs	r3, #1
 8007984:	6144      	str	r4, [r0, #20]
 8007986:	6103      	str	r3, [r0, #16]
 8007988:	bd10      	pop	{r4, pc}
 800798a:	bf00      	nop
 800798c:	080091bf 	.word	0x080091bf
 8007990:	080091d0 	.word	0x080091d0

08007994 <__multiply>:
 8007994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007998:	4691      	mov	r9, r2
 800799a:	690a      	ldr	r2, [r1, #16]
 800799c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	bfb8      	it	lt
 80079a4:	460b      	movlt	r3, r1
 80079a6:	460c      	mov	r4, r1
 80079a8:	bfbc      	itt	lt
 80079aa:	464c      	movlt	r4, r9
 80079ac:	4699      	movlt	r9, r3
 80079ae:	6927      	ldr	r7, [r4, #16]
 80079b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079b4:	68a3      	ldr	r3, [r4, #8]
 80079b6:	6861      	ldr	r1, [r4, #4]
 80079b8:	eb07 060a 	add.w	r6, r7, sl
 80079bc:	42b3      	cmp	r3, r6
 80079be:	b085      	sub	sp, #20
 80079c0:	bfb8      	it	lt
 80079c2:	3101      	addlt	r1, #1
 80079c4:	f7ff fed8 	bl	8007778 <_Balloc>
 80079c8:	b930      	cbnz	r0, 80079d8 <__multiply+0x44>
 80079ca:	4602      	mov	r2, r0
 80079cc:	4b44      	ldr	r3, [pc, #272]	; (8007ae0 <__multiply+0x14c>)
 80079ce:	4845      	ldr	r0, [pc, #276]	; (8007ae4 <__multiply+0x150>)
 80079d0:	f240 115d 	movw	r1, #349	; 0x15d
 80079d4:	f000 fcb6 	bl	8008344 <__assert_func>
 80079d8:	f100 0514 	add.w	r5, r0, #20
 80079dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079e0:	462b      	mov	r3, r5
 80079e2:	2200      	movs	r2, #0
 80079e4:	4543      	cmp	r3, r8
 80079e6:	d321      	bcc.n	8007a2c <__multiply+0x98>
 80079e8:	f104 0314 	add.w	r3, r4, #20
 80079ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079f0:	f109 0314 	add.w	r3, r9, #20
 80079f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079f8:	9202      	str	r2, [sp, #8]
 80079fa:	1b3a      	subs	r2, r7, r4
 80079fc:	3a15      	subs	r2, #21
 80079fe:	f022 0203 	bic.w	r2, r2, #3
 8007a02:	3204      	adds	r2, #4
 8007a04:	f104 0115 	add.w	r1, r4, #21
 8007a08:	428f      	cmp	r7, r1
 8007a0a:	bf38      	it	cc
 8007a0c:	2204      	movcc	r2, #4
 8007a0e:	9201      	str	r2, [sp, #4]
 8007a10:	9a02      	ldr	r2, [sp, #8]
 8007a12:	9303      	str	r3, [sp, #12]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d80c      	bhi.n	8007a32 <__multiply+0x9e>
 8007a18:	2e00      	cmp	r6, #0
 8007a1a:	dd03      	ble.n	8007a24 <__multiply+0x90>
 8007a1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d05a      	beq.n	8007ada <__multiply+0x146>
 8007a24:	6106      	str	r6, [r0, #16]
 8007a26:	b005      	add	sp, #20
 8007a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2c:	f843 2b04 	str.w	r2, [r3], #4
 8007a30:	e7d8      	b.n	80079e4 <__multiply+0x50>
 8007a32:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a36:	f1ba 0f00 	cmp.w	sl, #0
 8007a3a:	d024      	beq.n	8007a86 <__multiply+0xf2>
 8007a3c:	f104 0e14 	add.w	lr, r4, #20
 8007a40:	46a9      	mov	r9, r5
 8007a42:	f04f 0c00 	mov.w	ip, #0
 8007a46:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a4a:	f8d9 1000 	ldr.w	r1, [r9]
 8007a4e:	fa1f fb82 	uxth.w	fp, r2
 8007a52:	b289      	uxth	r1, r1
 8007a54:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007a5c:	f8d9 2000 	ldr.w	r2, [r9]
 8007a60:	4461      	add	r1, ip
 8007a62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a66:	fb0a c20b 	mla	r2, sl, fp, ip
 8007a6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a6e:	b289      	uxth	r1, r1
 8007a70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a74:	4577      	cmp	r7, lr
 8007a76:	f849 1b04 	str.w	r1, [r9], #4
 8007a7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a7e:	d8e2      	bhi.n	8007a46 <__multiply+0xb2>
 8007a80:	9a01      	ldr	r2, [sp, #4]
 8007a82:	f845 c002 	str.w	ip, [r5, r2]
 8007a86:	9a03      	ldr	r2, [sp, #12]
 8007a88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	f1b9 0f00 	cmp.w	r9, #0
 8007a92:	d020      	beq.n	8007ad6 <__multiply+0x142>
 8007a94:	6829      	ldr	r1, [r5, #0]
 8007a96:	f104 0c14 	add.w	ip, r4, #20
 8007a9a:	46ae      	mov	lr, r5
 8007a9c:	f04f 0a00 	mov.w	sl, #0
 8007aa0:	f8bc b000 	ldrh.w	fp, [ip]
 8007aa4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007aa8:	fb09 220b 	mla	r2, r9, fp, r2
 8007aac:	4492      	add	sl, r2
 8007aae:	b289      	uxth	r1, r1
 8007ab0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007ab4:	f84e 1b04 	str.w	r1, [lr], #4
 8007ab8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007abc:	f8be 1000 	ldrh.w	r1, [lr]
 8007ac0:	0c12      	lsrs	r2, r2, #16
 8007ac2:	fb09 1102 	mla	r1, r9, r2, r1
 8007ac6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007aca:	4567      	cmp	r7, ip
 8007acc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ad0:	d8e6      	bhi.n	8007aa0 <__multiply+0x10c>
 8007ad2:	9a01      	ldr	r2, [sp, #4]
 8007ad4:	50a9      	str	r1, [r5, r2]
 8007ad6:	3504      	adds	r5, #4
 8007ad8:	e79a      	b.n	8007a10 <__multiply+0x7c>
 8007ada:	3e01      	subs	r6, #1
 8007adc:	e79c      	b.n	8007a18 <__multiply+0x84>
 8007ade:	bf00      	nop
 8007ae0:	080091bf 	.word	0x080091bf
 8007ae4:	080091d0 	.word	0x080091d0

08007ae8 <__pow5mult>:
 8007ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aec:	4615      	mov	r5, r2
 8007aee:	f012 0203 	ands.w	r2, r2, #3
 8007af2:	4606      	mov	r6, r0
 8007af4:	460f      	mov	r7, r1
 8007af6:	d007      	beq.n	8007b08 <__pow5mult+0x20>
 8007af8:	4c25      	ldr	r4, [pc, #148]	; (8007b90 <__pow5mult+0xa8>)
 8007afa:	3a01      	subs	r2, #1
 8007afc:	2300      	movs	r3, #0
 8007afe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b02:	f7ff fe9b 	bl	800783c <__multadd>
 8007b06:	4607      	mov	r7, r0
 8007b08:	10ad      	asrs	r5, r5, #2
 8007b0a:	d03d      	beq.n	8007b88 <__pow5mult+0xa0>
 8007b0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007b0e:	b97c      	cbnz	r4, 8007b30 <__pow5mult+0x48>
 8007b10:	2010      	movs	r0, #16
 8007b12:	f7ff fe1b 	bl	800774c <malloc>
 8007b16:	4602      	mov	r2, r0
 8007b18:	6270      	str	r0, [r6, #36]	; 0x24
 8007b1a:	b928      	cbnz	r0, 8007b28 <__pow5mult+0x40>
 8007b1c:	4b1d      	ldr	r3, [pc, #116]	; (8007b94 <__pow5mult+0xac>)
 8007b1e:	481e      	ldr	r0, [pc, #120]	; (8007b98 <__pow5mult+0xb0>)
 8007b20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007b24:	f000 fc0e 	bl	8008344 <__assert_func>
 8007b28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b2c:	6004      	str	r4, [r0, #0]
 8007b2e:	60c4      	str	r4, [r0, #12]
 8007b30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b38:	b94c      	cbnz	r4, 8007b4e <__pow5mult+0x66>
 8007b3a:	f240 2171 	movw	r1, #625	; 0x271
 8007b3e:	4630      	mov	r0, r6
 8007b40:	f7ff ff12 	bl	8007968 <__i2b>
 8007b44:	2300      	movs	r3, #0
 8007b46:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	6003      	str	r3, [r0, #0]
 8007b4e:	f04f 0900 	mov.w	r9, #0
 8007b52:	07eb      	lsls	r3, r5, #31
 8007b54:	d50a      	bpl.n	8007b6c <__pow5mult+0x84>
 8007b56:	4639      	mov	r1, r7
 8007b58:	4622      	mov	r2, r4
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f7ff ff1a 	bl	8007994 <__multiply>
 8007b60:	4639      	mov	r1, r7
 8007b62:	4680      	mov	r8, r0
 8007b64:	4630      	mov	r0, r6
 8007b66:	f7ff fe47 	bl	80077f8 <_Bfree>
 8007b6a:	4647      	mov	r7, r8
 8007b6c:	106d      	asrs	r5, r5, #1
 8007b6e:	d00b      	beq.n	8007b88 <__pow5mult+0xa0>
 8007b70:	6820      	ldr	r0, [r4, #0]
 8007b72:	b938      	cbnz	r0, 8007b84 <__pow5mult+0x9c>
 8007b74:	4622      	mov	r2, r4
 8007b76:	4621      	mov	r1, r4
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f7ff ff0b 	bl	8007994 <__multiply>
 8007b7e:	6020      	str	r0, [r4, #0]
 8007b80:	f8c0 9000 	str.w	r9, [r0]
 8007b84:	4604      	mov	r4, r0
 8007b86:	e7e4      	b.n	8007b52 <__pow5mult+0x6a>
 8007b88:	4638      	mov	r0, r7
 8007b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b8e:	bf00      	nop
 8007b90:	08009320 	.word	0x08009320
 8007b94:	0800914d 	.word	0x0800914d
 8007b98:	080091d0 	.word	0x080091d0

08007b9c <__lshift>:
 8007b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba0:	460c      	mov	r4, r1
 8007ba2:	6849      	ldr	r1, [r1, #4]
 8007ba4:	6923      	ldr	r3, [r4, #16]
 8007ba6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007baa:	68a3      	ldr	r3, [r4, #8]
 8007bac:	4607      	mov	r7, r0
 8007bae:	4691      	mov	r9, r2
 8007bb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bb4:	f108 0601 	add.w	r6, r8, #1
 8007bb8:	42b3      	cmp	r3, r6
 8007bba:	db0b      	blt.n	8007bd4 <__lshift+0x38>
 8007bbc:	4638      	mov	r0, r7
 8007bbe:	f7ff fddb 	bl	8007778 <_Balloc>
 8007bc2:	4605      	mov	r5, r0
 8007bc4:	b948      	cbnz	r0, 8007bda <__lshift+0x3e>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	4b2a      	ldr	r3, [pc, #168]	; (8007c74 <__lshift+0xd8>)
 8007bca:	482b      	ldr	r0, [pc, #172]	; (8007c78 <__lshift+0xdc>)
 8007bcc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007bd0:	f000 fbb8 	bl	8008344 <__assert_func>
 8007bd4:	3101      	adds	r1, #1
 8007bd6:	005b      	lsls	r3, r3, #1
 8007bd8:	e7ee      	b.n	8007bb8 <__lshift+0x1c>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f100 0114 	add.w	r1, r0, #20
 8007be0:	f100 0210 	add.w	r2, r0, #16
 8007be4:	4618      	mov	r0, r3
 8007be6:	4553      	cmp	r3, sl
 8007be8:	db37      	blt.n	8007c5a <__lshift+0xbe>
 8007bea:	6920      	ldr	r0, [r4, #16]
 8007bec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bf0:	f104 0314 	add.w	r3, r4, #20
 8007bf4:	f019 091f 	ands.w	r9, r9, #31
 8007bf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bfc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007c00:	d02f      	beq.n	8007c62 <__lshift+0xc6>
 8007c02:	f1c9 0e20 	rsb	lr, r9, #32
 8007c06:	468a      	mov	sl, r1
 8007c08:	f04f 0c00 	mov.w	ip, #0
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	fa02 f209 	lsl.w	r2, r2, r9
 8007c12:	ea42 020c 	orr.w	r2, r2, ip
 8007c16:	f84a 2b04 	str.w	r2, [sl], #4
 8007c1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c1e:	4298      	cmp	r0, r3
 8007c20:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007c24:	d8f2      	bhi.n	8007c0c <__lshift+0x70>
 8007c26:	1b03      	subs	r3, r0, r4
 8007c28:	3b15      	subs	r3, #21
 8007c2a:	f023 0303 	bic.w	r3, r3, #3
 8007c2e:	3304      	adds	r3, #4
 8007c30:	f104 0215 	add.w	r2, r4, #21
 8007c34:	4290      	cmp	r0, r2
 8007c36:	bf38      	it	cc
 8007c38:	2304      	movcc	r3, #4
 8007c3a:	f841 c003 	str.w	ip, [r1, r3]
 8007c3e:	f1bc 0f00 	cmp.w	ip, #0
 8007c42:	d001      	beq.n	8007c48 <__lshift+0xac>
 8007c44:	f108 0602 	add.w	r6, r8, #2
 8007c48:	3e01      	subs	r6, #1
 8007c4a:	4638      	mov	r0, r7
 8007c4c:	612e      	str	r6, [r5, #16]
 8007c4e:	4621      	mov	r1, r4
 8007c50:	f7ff fdd2 	bl	80077f8 <_Bfree>
 8007c54:	4628      	mov	r0, r5
 8007c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c5e:	3301      	adds	r3, #1
 8007c60:	e7c1      	b.n	8007be6 <__lshift+0x4a>
 8007c62:	3904      	subs	r1, #4
 8007c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c68:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c6c:	4298      	cmp	r0, r3
 8007c6e:	d8f9      	bhi.n	8007c64 <__lshift+0xc8>
 8007c70:	e7ea      	b.n	8007c48 <__lshift+0xac>
 8007c72:	bf00      	nop
 8007c74:	080091bf 	.word	0x080091bf
 8007c78:	080091d0 	.word	0x080091d0

08007c7c <__mcmp>:
 8007c7c:	b530      	push	{r4, r5, lr}
 8007c7e:	6902      	ldr	r2, [r0, #16]
 8007c80:	690c      	ldr	r4, [r1, #16]
 8007c82:	1b12      	subs	r2, r2, r4
 8007c84:	d10e      	bne.n	8007ca4 <__mcmp+0x28>
 8007c86:	f100 0314 	add.w	r3, r0, #20
 8007c8a:	3114      	adds	r1, #20
 8007c8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c9c:	42a5      	cmp	r5, r4
 8007c9e:	d003      	beq.n	8007ca8 <__mcmp+0x2c>
 8007ca0:	d305      	bcc.n	8007cae <__mcmp+0x32>
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	4610      	mov	r0, r2
 8007ca6:	bd30      	pop	{r4, r5, pc}
 8007ca8:	4283      	cmp	r3, r0
 8007caa:	d3f3      	bcc.n	8007c94 <__mcmp+0x18>
 8007cac:	e7fa      	b.n	8007ca4 <__mcmp+0x28>
 8007cae:	f04f 32ff 	mov.w	r2, #4294967295
 8007cb2:	e7f7      	b.n	8007ca4 <__mcmp+0x28>

08007cb4 <__mdiff>:
 8007cb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb8:	460c      	mov	r4, r1
 8007cba:	4606      	mov	r6, r0
 8007cbc:	4611      	mov	r1, r2
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	4690      	mov	r8, r2
 8007cc2:	f7ff ffdb 	bl	8007c7c <__mcmp>
 8007cc6:	1e05      	subs	r5, r0, #0
 8007cc8:	d110      	bne.n	8007cec <__mdiff+0x38>
 8007cca:	4629      	mov	r1, r5
 8007ccc:	4630      	mov	r0, r6
 8007cce:	f7ff fd53 	bl	8007778 <_Balloc>
 8007cd2:	b930      	cbnz	r0, 8007ce2 <__mdiff+0x2e>
 8007cd4:	4b3a      	ldr	r3, [pc, #232]	; (8007dc0 <__mdiff+0x10c>)
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	f240 2132 	movw	r1, #562	; 0x232
 8007cdc:	4839      	ldr	r0, [pc, #228]	; (8007dc4 <__mdiff+0x110>)
 8007cde:	f000 fb31 	bl	8008344 <__assert_func>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ce8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cec:	bfa4      	itt	ge
 8007cee:	4643      	movge	r3, r8
 8007cf0:	46a0      	movge	r8, r4
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007cf8:	bfa6      	itte	ge
 8007cfa:	461c      	movge	r4, r3
 8007cfc:	2500      	movge	r5, #0
 8007cfe:	2501      	movlt	r5, #1
 8007d00:	f7ff fd3a 	bl	8007778 <_Balloc>
 8007d04:	b920      	cbnz	r0, 8007d10 <__mdiff+0x5c>
 8007d06:	4b2e      	ldr	r3, [pc, #184]	; (8007dc0 <__mdiff+0x10c>)
 8007d08:	4602      	mov	r2, r0
 8007d0a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007d0e:	e7e5      	b.n	8007cdc <__mdiff+0x28>
 8007d10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d14:	6926      	ldr	r6, [r4, #16]
 8007d16:	60c5      	str	r5, [r0, #12]
 8007d18:	f104 0914 	add.w	r9, r4, #20
 8007d1c:	f108 0514 	add.w	r5, r8, #20
 8007d20:	f100 0e14 	add.w	lr, r0, #20
 8007d24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007d28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d2c:	f108 0210 	add.w	r2, r8, #16
 8007d30:	46f2      	mov	sl, lr
 8007d32:	2100      	movs	r1, #0
 8007d34:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d3c:	fa1f f883 	uxth.w	r8, r3
 8007d40:	fa11 f18b 	uxtah	r1, r1, fp
 8007d44:	0c1b      	lsrs	r3, r3, #16
 8007d46:	eba1 0808 	sub.w	r8, r1, r8
 8007d4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d4e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d52:	fa1f f888 	uxth.w	r8, r8
 8007d56:	1419      	asrs	r1, r3, #16
 8007d58:	454e      	cmp	r6, r9
 8007d5a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d5e:	f84a 3b04 	str.w	r3, [sl], #4
 8007d62:	d8e7      	bhi.n	8007d34 <__mdiff+0x80>
 8007d64:	1b33      	subs	r3, r6, r4
 8007d66:	3b15      	subs	r3, #21
 8007d68:	f023 0303 	bic.w	r3, r3, #3
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	3415      	adds	r4, #21
 8007d70:	42a6      	cmp	r6, r4
 8007d72:	bf38      	it	cc
 8007d74:	2304      	movcc	r3, #4
 8007d76:	441d      	add	r5, r3
 8007d78:	4473      	add	r3, lr
 8007d7a:	469e      	mov	lr, r3
 8007d7c:	462e      	mov	r6, r5
 8007d7e:	4566      	cmp	r6, ip
 8007d80:	d30e      	bcc.n	8007da0 <__mdiff+0xec>
 8007d82:	f10c 0203 	add.w	r2, ip, #3
 8007d86:	1b52      	subs	r2, r2, r5
 8007d88:	f022 0203 	bic.w	r2, r2, #3
 8007d8c:	3d03      	subs	r5, #3
 8007d8e:	45ac      	cmp	ip, r5
 8007d90:	bf38      	it	cc
 8007d92:	2200      	movcc	r2, #0
 8007d94:	441a      	add	r2, r3
 8007d96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007d9a:	b17b      	cbz	r3, 8007dbc <__mdiff+0x108>
 8007d9c:	6107      	str	r7, [r0, #16]
 8007d9e:	e7a3      	b.n	8007ce8 <__mdiff+0x34>
 8007da0:	f856 8b04 	ldr.w	r8, [r6], #4
 8007da4:	fa11 f288 	uxtah	r2, r1, r8
 8007da8:	1414      	asrs	r4, r2, #16
 8007daa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007dae:	b292      	uxth	r2, r2
 8007db0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007db4:	f84e 2b04 	str.w	r2, [lr], #4
 8007db8:	1421      	asrs	r1, r4, #16
 8007dba:	e7e0      	b.n	8007d7e <__mdiff+0xca>
 8007dbc:	3f01      	subs	r7, #1
 8007dbe:	e7ea      	b.n	8007d96 <__mdiff+0xe2>
 8007dc0:	080091bf 	.word	0x080091bf
 8007dc4:	080091d0 	.word	0x080091d0

08007dc8 <__d2b>:
 8007dc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007dcc:	4689      	mov	r9, r1
 8007dce:	2101      	movs	r1, #1
 8007dd0:	ec57 6b10 	vmov	r6, r7, d0
 8007dd4:	4690      	mov	r8, r2
 8007dd6:	f7ff fccf 	bl	8007778 <_Balloc>
 8007dda:	4604      	mov	r4, r0
 8007ddc:	b930      	cbnz	r0, 8007dec <__d2b+0x24>
 8007dde:	4602      	mov	r2, r0
 8007de0:	4b25      	ldr	r3, [pc, #148]	; (8007e78 <__d2b+0xb0>)
 8007de2:	4826      	ldr	r0, [pc, #152]	; (8007e7c <__d2b+0xb4>)
 8007de4:	f240 310a 	movw	r1, #778	; 0x30a
 8007de8:	f000 faac 	bl	8008344 <__assert_func>
 8007dec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007df0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007df4:	bb35      	cbnz	r5, 8007e44 <__d2b+0x7c>
 8007df6:	2e00      	cmp	r6, #0
 8007df8:	9301      	str	r3, [sp, #4]
 8007dfa:	d028      	beq.n	8007e4e <__d2b+0x86>
 8007dfc:	4668      	mov	r0, sp
 8007dfe:	9600      	str	r6, [sp, #0]
 8007e00:	f7ff fd82 	bl	8007908 <__lo0bits>
 8007e04:	9900      	ldr	r1, [sp, #0]
 8007e06:	b300      	cbz	r0, 8007e4a <__d2b+0x82>
 8007e08:	9a01      	ldr	r2, [sp, #4]
 8007e0a:	f1c0 0320 	rsb	r3, r0, #32
 8007e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e12:	430b      	orrs	r3, r1
 8007e14:	40c2      	lsrs	r2, r0
 8007e16:	6163      	str	r3, [r4, #20]
 8007e18:	9201      	str	r2, [sp, #4]
 8007e1a:	9b01      	ldr	r3, [sp, #4]
 8007e1c:	61a3      	str	r3, [r4, #24]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	bf14      	ite	ne
 8007e22:	2202      	movne	r2, #2
 8007e24:	2201      	moveq	r2, #1
 8007e26:	6122      	str	r2, [r4, #16]
 8007e28:	b1d5      	cbz	r5, 8007e60 <__d2b+0x98>
 8007e2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e2e:	4405      	add	r5, r0
 8007e30:	f8c9 5000 	str.w	r5, [r9]
 8007e34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e38:	f8c8 0000 	str.w	r0, [r8]
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	b003      	add	sp, #12
 8007e40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e48:	e7d5      	b.n	8007df6 <__d2b+0x2e>
 8007e4a:	6161      	str	r1, [r4, #20]
 8007e4c:	e7e5      	b.n	8007e1a <__d2b+0x52>
 8007e4e:	a801      	add	r0, sp, #4
 8007e50:	f7ff fd5a 	bl	8007908 <__lo0bits>
 8007e54:	9b01      	ldr	r3, [sp, #4]
 8007e56:	6163      	str	r3, [r4, #20]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	6122      	str	r2, [r4, #16]
 8007e5c:	3020      	adds	r0, #32
 8007e5e:	e7e3      	b.n	8007e28 <__d2b+0x60>
 8007e60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e68:	f8c9 0000 	str.w	r0, [r9]
 8007e6c:	6918      	ldr	r0, [r3, #16]
 8007e6e:	f7ff fd2b 	bl	80078c8 <__hi0bits>
 8007e72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e76:	e7df      	b.n	8007e38 <__d2b+0x70>
 8007e78:	080091bf 	.word	0x080091bf
 8007e7c:	080091d0 	.word	0x080091d0

08007e80 <_calloc_r>:
 8007e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e82:	fba1 2402 	umull	r2, r4, r1, r2
 8007e86:	b94c      	cbnz	r4, 8007e9c <_calloc_r+0x1c>
 8007e88:	4611      	mov	r1, r2
 8007e8a:	9201      	str	r2, [sp, #4]
 8007e8c:	f000 f87a 	bl	8007f84 <_malloc_r>
 8007e90:	9a01      	ldr	r2, [sp, #4]
 8007e92:	4605      	mov	r5, r0
 8007e94:	b930      	cbnz	r0, 8007ea4 <_calloc_r+0x24>
 8007e96:	4628      	mov	r0, r5
 8007e98:	b003      	add	sp, #12
 8007e9a:	bd30      	pop	{r4, r5, pc}
 8007e9c:	220c      	movs	r2, #12
 8007e9e:	6002      	str	r2, [r0, #0]
 8007ea0:	2500      	movs	r5, #0
 8007ea2:	e7f8      	b.n	8007e96 <_calloc_r+0x16>
 8007ea4:	4621      	mov	r1, r4
 8007ea6:	f7fe f941 	bl	800612c <memset>
 8007eaa:	e7f4      	b.n	8007e96 <_calloc_r+0x16>

08007eac <_free_r>:
 8007eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007eae:	2900      	cmp	r1, #0
 8007eb0:	d044      	beq.n	8007f3c <_free_r+0x90>
 8007eb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eb6:	9001      	str	r0, [sp, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f1a1 0404 	sub.w	r4, r1, #4
 8007ebe:	bfb8      	it	lt
 8007ec0:	18e4      	addlt	r4, r4, r3
 8007ec2:	f000 fa9b 	bl	80083fc <__malloc_lock>
 8007ec6:	4a1e      	ldr	r2, [pc, #120]	; (8007f40 <_free_r+0x94>)
 8007ec8:	9801      	ldr	r0, [sp, #4]
 8007eca:	6813      	ldr	r3, [r2, #0]
 8007ecc:	b933      	cbnz	r3, 8007edc <_free_r+0x30>
 8007ece:	6063      	str	r3, [r4, #4]
 8007ed0:	6014      	str	r4, [r2, #0]
 8007ed2:	b003      	add	sp, #12
 8007ed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ed8:	f000 ba96 	b.w	8008408 <__malloc_unlock>
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	d908      	bls.n	8007ef2 <_free_r+0x46>
 8007ee0:	6825      	ldr	r5, [r4, #0]
 8007ee2:	1961      	adds	r1, r4, r5
 8007ee4:	428b      	cmp	r3, r1
 8007ee6:	bf01      	itttt	eq
 8007ee8:	6819      	ldreq	r1, [r3, #0]
 8007eea:	685b      	ldreq	r3, [r3, #4]
 8007eec:	1949      	addeq	r1, r1, r5
 8007eee:	6021      	streq	r1, [r4, #0]
 8007ef0:	e7ed      	b.n	8007ece <_free_r+0x22>
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	b10b      	cbz	r3, 8007efc <_free_r+0x50>
 8007ef8:	42a3      	cmp	r3, r4
 8007efa:	d9fa      	bls.n	8007ef2 <_free_r+0x46>
 8007efc:	6811      	ldr	r1, [r2, #0]
 8007efe:	1855      	adds	r5, r2, r1
 8007f00:	42a5      	cmp	r5, r4
 8007f02:	d10b      	bne.n	8007f1c <_free_r+0x70>
 8007f04:	6824      	ldr	r4, [r4, #0]
 8007f06:	4421      	add	r1, r4
 8007f08:	1854      	adds	r4, r2, r1
 8007f0a:	42a3      	cmp	r3, r4
 8007f0c:	6011      	str	r1, [r2, #0]
 8007f0e:	d1e0      	bne.n	8007ed2 <_free_r+0x26>
 8007f10:	681c      	ldr	r4, [r3, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	6053      	str	r3, [r2, #4]
 8007f16:	4421      	add	r1, r4
 8007f18:	6011      	str	r1, [r2, #0]
 8007f1a:	e7da      	b.n	8007ed2 <_free_r+0x26>
 8007f1c:	d902      	bls.n	8007f24 <_free_r+0x78>
 8007f1e:	230c      	movs	r3, #12
 8007f20:	6003      	str	r3, [r0, #0]
 8007f22:	e7d6      	b.n	8007ed2 <_free_r+0x26>
 8007f24:	6825      	ldr	r5, [r4, #0]
 8007f26:	1961      	adds	r1, r4, r5
 8007f28:	428b      	cmp	r3, r1
 8007f2a:	bf04      	itt	eq
 8007f2c:	6819      	ldreq	r1, [r3, #0]
 8007f2e:	685b      	ldreq	r3, [r3, #4]
 8007f30:	6063      	str	r3, [r4, #4]
 8007f32:	bf04      	itt	eq
 8007f34:	1949      	addeq	r1, r1, r5
 8007f36:	6021      	streq	r1, [r4, #0]
 8007f38:	6054      	str	r4, [r2, #4]
 8007f3a:	e7ca      	b.n	8007ed2 <_free_r+0x26>
 8007f3c:	b003      	add	sp, #12
 8007f3e:	bd30      	pop	{r4, r5, pc}
 8007f40:	20000334 	.word	0x20000334

08007f44 <sbrk_aligned>:
 8007f44:	b570      	push	{r4, r5, r6, lr}
 8007f46:	4e0e      	ldr	r6, [pc, #56]	; (8007f80 <sbrk_aligned+0x3c>)
 8007f48:	460c      	mov	r4, r1
 8007f4a:	6831      	ldr	r1, [r6, #0]
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	b911      	cbnz	r1, 8007f56 <sbrk_aligned+0x12>
 8007f50:	f000 f9e8 	bl	8008324 <_sbrk_r>
 8007f54:	6030      	str	r0, [r6, #0]
 8007f56:	4621      	mov	r1, r4
 8007f58:	4628      	mov	r0, r5
 8007f5a:	f000 f9e3 	bl	8008324 <_sbrk_r>
 8007f5e:	1c43      	adds	r3, r0, #1
 8007f60:	d00a      	beq.n	8007f78 <sbrk_aligned+0x34>
 8007f62:	1cc4      	adds	r4, r0, #3
 8007f64:	f024 0403 	bic.w	r4, r4, #3
 8007f68:	42a0      	cmp	r0, r4
 8007f6a:	d007      	beq.n	8007f7c <sbrk_aligned+0x38>
 8007f6c:	1a21      	subs	r1, r4, r0
 8007f6e:	4628      	mov	r0, r5
 8007f70:	f000 f9d8 	bl	8008324 <_sbrk_r>
 8007f74:	3001      	adds	r0, #1
 8007f76:	d101      	bne.n	8007f7c <sbrk_aligned+0x38>
 8007f78:	f04f 34ff 	mov.w	r4, #4294967295
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	bd70      	pop	{r4, r5, r6, pc}
 8007f80:	20000338 	.word	0x20000338

08007f84 <_malloc_r>:
 8007f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f88:	1ccd      	adds	r5, r1, #3
 8007f8a:	f025 0503 	bic.w	r5, r5, #3
 8007f8e:	3508      	adds	r5, #8
 8007f90:	2d0c      	cmp	r5, #12
 8007f92:	bf38      	it	cc
 8007f94:	250c      	movcc	r5, #12
 8007f96:	2d00      	cmp	r5, #0
 8007f98:	4607      	mov	r7, r0
 8007f9a:	db01      	blt.n	8007fa0 <_malloc_r+0x1c>
 8007f9c:	42a9      	cmp	r1, r5
 8007f9e:	d905      	bls.n	8007fac <_malloc_r+0x28>
 8007fa0:	230c      	movs	r3, #12
 8007fa2:	603b      	str	r3, [r7, #0]
 8007fa4:	2600      	movs	r6, #0
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fac:	4e2e      	ldr	r6, [pc, #184]	; (8008068 <_malloc_r+0xe4>)
 8007fae:	f000 fa25 	bl	80083fc <__malloc_lock>
 8007fb2:	6833      	ldr	r3, [r6, #0]
 8007fb4:	461c      	mov	r4, r3
 8007fb6:	bb34      	cbnz	r4, 8008006 <_malloc_r+0x82>
 8007fb8:	4629      	mov	r1, r5
 8007fba:	4638      	mov	r0, r7
 8007fbc:	f7ff ffc2 	bl	8007f44 <sbrk_aligned>
 8007fc0:	1c43      	adds	r3, r0, #1
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	d14d      	bne.n	8008062 <_malloc_r+0xde>
 8007fc6:	6834      	ldr	r4, [r6, #0]
 8007fc8:	4626      	mov	r6, r4
 8007fca:	2e00      	cmp	r6, #0
 8007fcc:	d140      	bne.n	8008050 <_malloc_r+0xcc>
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	4631      	mov	r1, r6
 8007fd2:	4638      	mov	r0, r7
 8007fd4:	eb04 0803 	add.w	r8, r4, r3
 8007fd8:	f000 f9a4 	bl	8008324 <_sbrk_r>
 8007fdc:	4580      	cmp	r8, r0
 8007fde:	d13a      	bne.n	8008056 <_malloc_r+0xd2>
 8007fe0:	6821      	ldr	r1, [r4, #0]
 8007fe2:	3503      	adds	r5, #3
 8007fe4:	1a6d      	subs	r5, r5, r1
 8007fe6:	f025 0503 	bic.w	r5, r5, #3
 8007fea:	3508      	adds	r5, #8
 8007fec:	2d0c      	cmp	r5, #12
 8007fee:	bf38      	it	cc
 8007ff0:	250c      	movcc	r5, #12
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	f7ff ffa5 	bl	8007f44 <sbrk_aligned>
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	d02b      	beq.n	8008056 <_malloc_r+0xd2>
 8007ffe:	6823      	ldr	r3, [r4, #0]
 8008000:	442b      	add	r3, r5
 8008002:	6023      	str	r3, [r4, #0]
 8008004:	e00e      	b.n	8008024 <_malloc_r+0xa0>
 8008006:	6822      	ldr	r2, [r4, #0]
 8008008:	1b52      	subs	r2, r2, r5
 800800a:	d41e      	bmi.n	800804a <_malloc_r+0xc6>
 800800c:	2a0b      	cmp	r2, #11
 800800e:	d916      	bls.n	800803e <_malloc_r+0xba>
 8008010:	1961      	adds	r1, r4, r5
 8008012:	42a3      	cmp	r3, r4
 8008014:	6025      	str	r5, [r4, #0]
 8008016:	bf18      	it	ne
 8008018:	6059      	strne	r1, [r3, #4]
 800801a:	6863      	ldr	r3, [r4, #4]
 800801c:	bf08      	it	eq
 800801e:	6031      	streq	r1, [r6, #0]
 8008020:	5162      	str	r2, [r4, r5]
 8008022:	604b      	str	r3, [r1, #4]
 8008024:	4638      	mov	r0, r7
 8008026:	f104 060b 	add.w	r6, r4, #11
 800802a:	f000 f9ed 	bl	8008408 <__malloc_unlock>
 800802e:	f026 0607 	bic.w	r6, r6, #7
 8008032:	1d23      	adds	r3, r4, #4
 8008034:	1af2      	subs	r2, r6, r3
 8008036:	d0b6      	beq.n	8007fa6 <_malloc_r+0x22>
 8008038:	1b9b      	subs	r3, r3, r6
 800803a:	50a3      	str	r3, [r4, r2]
 800803c:	e7b3      	b.n	8007fa6 <_malloc_r+0x22>
 800803e:	6862      	ldr	r2, [r4, #4]
 8008040:	42a3      	cmp	r3, r4
 8008042:	bf0c      	ite	eq
 8008044:	6032      	streq	r2, [r6, #0]
 8008046:	605a      	strne	r2, [r3, #4]
 8008048:	e7ec      	b.n	8008024 <_malloc_r+0xa0>
 800804a:	4623      	mov	r3, r4
 800804c:	6864      	ldr	r4, [r4, #4]
 800804e:	e7b2      	b.n	8007fb6 <_malloc_r+0x32>
 8008050:	4634      	mov	r4, r6
 8008052:	6876      	ldr	r6, [r6, #4]
 8008054:	e7b9      	b.n	8007fca <_malloc_r+0x46>
 8008056:	230c      	movs	r3, #12
 8008058:	603b      	str	r3, [r7, #0]
 800805a:	4638      	mov	r0, r7
 800805c:	f000 f9d4 	bl	8008408 <__malloc_unlock>
 8008060:	e7a1      	b.n	8007fa6 <_malloc_r+0x22>
 8008062:	6025      	str	r5, [r4, #0]
 8008064:	e7de      	b.n	8008024 <_malloc_r+0xa0>
 8008066:	bf00      	nop
 8008068:	20000334 	.word	0x20000334

0800806c <__ssputs_r>:
 800806c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008070:	688e      	ldr	r6, [r1, #8]
 8008072:	429e      	cmp	r6, r3
 8008074:	4682      	mov	sl, r0
 8008076:	460c      	mov	r4, r1
 8008078:	4690      	mov	r8, r2
 800807a:	461f      	mov	r7, r3
 800807c:	d838      	bhi.n	80080f0 <__ssputs_r+0x84>
 800807e:	898a      	ldrh	r2, [r1, #12]
 8008080:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008084:	d032      	beq.n	80080ec <__ssputs_r+0x80>
 8008086:	6825      	ldr	r5, [r4, #0]
 8008088:	6909      	ldr	r1, [r1, #16]
 800808a:	eba5 0901 	sub.w	r9, r5, r1
 800808e:	6965      	ldr	r5, [r4, #20]
 8008090:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008094:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008098:	3301      	adds	r3, #1
 800809a:	444b      	add	r3, r9
 800809c:	106d      	asrs	r5, r5, #1
 800809e:	429d      	cmp	r5, r3
 80080a0:	bf38      	it	cc
 80080a2:	461d      	movcc	r5, r3
 80080a4:	0553      	lsls	r3, r2, #21
 80080a6:	d531      	bpl.n	800810c <__ssputs_r+0xa0>
 80080a8:	4629      	mov	r1, r5
 80080aa:	f7ff ff6b 	bl	8007f84 <_malloc_r>
 80080ae:	4606      	mov	r6, r0
 80080b0:	b950      	cbnz	r0, 80080c8 <__ssputs_r+0x5c>
 80080b2:	230c      	movs	r3, #12
 80080b4:	f8ca 3000 	str.w	r3, [sl]
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080be:	81a3      	strh	r3, [r4, #12]
 80080c0:	f04f 30ff 	mov.w	r0, #4294967295
 80080c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080c8:	6921      	ldr	r1, [r4, #16]
 80080ca:	464a      	mov	r2, r9
 80080cc:	f7ff fb46 	bl	800775c <memcpy>
 80080d0:	89a3      	ldrh	r3, [r4, #12]
 80080d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080da:	81a3      	strh	r3, [r4, #12]
 80080dc:	6126      	str	r6, [r4, #16]
 80080de:	6165      	str	r5, [r4, #20]
 80080e0:	444e      	add	r6, r9
 80080e2:	eba5 0509 	sub.w	r5, r5, r9
 80080e6:	6026      	str	r6, [r4, #0]
 80080e8:	60a5      	str	r5, [r4, #8]
 80080ea:	463e      	mov	r6, r7
 80080ec:	42be      	cmp	r6, r7
 80080ee:	d900      	bls.n	80080f2 <__ssputs_r+0x86>
 80080f0:	463e      	mov	r6, r7
 80080f2:	6820      	ldr	r0, [r4, #0]
 80080f4:	4632      	mov	r2, r6
 80080f6:	4641      	mov	r1, r8
 80080f8:	f000 f966 	bl	80083c8 <memmove>
 80080fc:	68a3      	ldr	r3, [r4, #8]
 80080fe:	1b9b      	subs	r3, r3, r6
 8008100:	60a3      	str	r3, [r4, #8]
 8008102:	6823      	ldr	r3, [r4, #0]
 8008104:	4433      	add	r3, r6
 8008106:	6023      	str	r3, [r4, #0]
 8008108:	2000      	movs	r0, #0
 800810a:	e7db      	b.n	80080c4 <__ssputs_r+0x58>
 800810c:	462a      	mov	r2, r5
 800810e:	f000 f981 	bl	8008414 <_realloc_r>
 8008112:	4606      	mov	r6, r0
 8008114:	2800      	cmp	r0, #0
 8008116:	d1e1      	bne.n	80080dc <__ssputs_r+0x70>
 8008118:	6921      	ldr	r1, [r4, #16]
 800811a:	4650      	mov	r0, sl
 800811c:	f7ff fec6 	bl	8007eac <_free_r>
 8008120:	e7c7      	b.n	80080b2 <__ssputs_r+0x46>
	...

08008124 <_svfiprintf_r>:
 8008124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008128:	4698      	mov	r8, r3
 800812a:	898b      	ldrh	r3, [r1, #12]
 800812c:	061b      	lsls	r3, r3, #24
 800812e:	b09d      	sub	sp, #116	; 0x74
 8008130:	4607      	mov	r7, r0
 8008132:	460d      	mov	r5, r1
 8008134:	4614      	mov	r4, r2
 8008136:	d50e      	bpl.n	8008156 <_svfiprintf_r+0x32>
 8008138:	690b      	ldr	r3, [r1, #16]
 800813a:	b963      	cbnz	r3, 8008156 <_svfiprintf_r+0x32>
 800813c:	2140      	movs	r1, #64	; 0x40
 800813e:	f7ff ff21 	bl	8007f84 <_malloc_r>
 8008142:	6028      	str	r0, [r5, #0]
 8008144:	6128      	str	r0, [r5, #16]
 8008146:	b920      	cbnz	r0, 8008152 <_svfiprintf_r+0x2e>
 8008148:	230c      	movs	r3, #12
 800814a:	603b      	str	r3, [r7, #0]
 800814c:	f04f 30ff 	mov.w	r0, #4294967295
 8008150:	e0d1      	b.n	80082f6 <_svfiprintf_r+0x1d2>
 8008152:	2340      	movs	r3, #64	; 0x40
 8008154:	616b      	str	r3, [r5, #20]
 8008156:	2300      	movs	r3, #0
 8008158:	9309      	str	r3, [sp, #36]	; 0x24
 800815a:	2320      	movs	r3, #32
 800815c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008160:	f8cd 800c 	str.w	r8, [sp, #12]
 8008164:	2330      	movs	r3, #48	; 0x30
 8008166:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008310 <_svfiprintf_r+0x1ec>
 800816a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800816e:	f04f 0901 	mov.w	r9, #1
 8008172:	4623      	mov	r3, r4
 8008174:	469a      	mov	sl, r3
 8008176:	f813 2b01 	ldrb.w	r2, [r3], #1
 800817a:	b10a      	cbz	r2, 8008180 <_svfiprintf_r+0x5c>
 800817c:	2a25      	cmp	r2, #37	; 0x25
 800817e:	d1f9      	bne.n	8008174 <_svfiprintf_r+0x50>
 8008180:	ebba 0b04 	subs.w	fp, sl, r4
 8008184:	d00b      	beq.n	800819e <_svfiprintf_r+0x7a>
 8008186:	465b      	mov	r3, fp
 8008188:	4622      	mov	r2, r4
 800818a:	4629      	mov	r1, r5
 800818c:	4638      	mov	r0, r7
 800818e:	f7ff ff6d 	bl	800806c <__ssputs_r>
 8008192:	3001      	adds	r0, #1
 8008194:	f000 80aa 	beq.w	80082ec <_svfiprintf_r+0x1c8>
 8008198:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800819a:	445a      	add	r2, fp
 800819c:	9209      	str	r2, [sp, #36]	; 0x24
 800819e:	f89a 3000 	ldrb.w	r3, [sl]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f000 80a2 	beq.w	80082ec <_svfiprintf_r+0x1c8>
 80081a8:	2300      	movs	r3, #0
 80081aa:	f04f 32ff 	mov.w	r2, #4294967295
 80081ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081b2:	f10a 0a01 	add.w	sl, sl, #1
 80081b6:	9304      	str	r3, [sp, #16]
 80081b8:	9307      	str	r3, [sp, #28]
 80081ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081be:	931a      	str	r3, [sp, #104]	; 0x68
 80081c0:	4654      	mov	r4, sl
 80081c2:	2205      	movs	r2, #5
 80081c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081c8:	4851      	ldr	r0, [pc, #324]	; (8008310 <_svfiprintf_r+0x1ec>)
 80081ca:	f7f8 f811 	bl	80001f0 <memchr>
 80081ce:	9a04      	ldr	r2, [sp, #16]
 80081d0:	b9d8      	cbnz	r0, 800820a <_svfiprintf_r+0xe6>
 80081d2:	06d0      	lsls	r0, r2, #27
 80081d4:	bf44      	itt	mi
 80081d6:	2320      	movmi	r3, #32
 80081d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081dc:	0711      	lsls	r1, r2, #28
 80081de:	bf44      	itt	mi
 80081e0:	232b      	movmi	r3, #43	; 0x2b
 80081e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081e6:	f89a 3000 	ldrb.w	r3, [sl]
 80081ea:	2b2a      	cmp	r3, #42	; 0x2a
 80081ec:	d015      	beq.n	800821a <_svfiprintf_r+0xf6>
 80081ee:	9a07      	ldr	r2, [sp, #28]
 80081f0:	4654      	mov	r4, sl
 80081f2:	2000      	movs	r0, #0
 80081f4:	f04f 0c0a 	mov.w	ip, #10
 80081f8:	4621      	mov	r1, r4
 80081fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081fe:	3b30      	subs	r3, #48	; 0x30
 8008200:	2b09      	cmp	r3, #9
 8008202:	d94e      	bls.n	80082a2 <_svfiprintf_r+0x17e>
 8008204:	b1b0      	cbz	r0, 8008234 <_svfiprintf_r+0x110>
 8008206:	9207      	str	r2, [sp, #28]
 8008208:	e014      	b.n	8008234 <_svfiprintf_r+0x110>
 800820a:	eba0 0308 	sub.w	r3, r0, r8
 800820e:	fa09 f303 	lsl.w	r3, r9, r3
 8008212:	4313      	orrs	r3, r2
 8008214:	9304      	str	r3, [sp, #16]
 8008216:	46a2      	mov	sl, r4
 8008218:	e7d2      	b.n	80081c0 <_svfiprintf_r+0x9c>
 800821a:	9b03      	ldr	r3, [sp, #12]
 800821c:	1d19      	adds	r1, r3, #4
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	9103      	str	r1, [sp, #12]
 8008222:	2b00      	cmp	r3, #0
 8008224:	bfbb      	ittet	lt
 8008226:	425b      	neglt	r3, r3
 8008228:	f042 0202 	orrlt.w	r2, r2, #2
 800822c:	9307      	strge	r3, [sp, #28]
 800822e:	9307      	strlt	r3, [sp, #28]
 8008230:	bfb8      	it	lt
 8008232:	9204      	strlt	r2, [sp, #16]
 8008234:	7823      	ldrb	r3, [r4, #0]
 8008236:	2b2e      	cmp	r3, #46	; 0x2e
 8008238:	d10c      	bne.n	8008254 <_svfiprintf_r+0x130>
 800823a:	7863      	ldrb	r3, [r4, #1]
 800823c:	2b2a      	cmp	r3, #42	; 0x2a
 800823e:	d135      	bne.n	80082ac <_svfiprintf_r+0x188>
 8008240:	9b03      	ldr	r3, [sp, #12]
 8008242:	1d1a      	adds	r2, r3, #4
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	9203      	str	r2, [sp, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	bfb8      	it	lt
 800824c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008250:	3402      	adds	r4, #2
 8008252:	9305      	str	r3, [sp, #20]
 8008254:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008320 <_svfiprintf_r+0x1fc>
 8008258:	7821      	ldrb	r1, [r4, #0]
 800825a:	2203      	movs	r2, #3
 800825c:	4650      	mov	r0, sl
 800825e:	f7f7 ffc7 	bl	80001f0 <memchr>
 8008262:	b140      	cbz	r0, 8008276 <_svfiprintf_r+0x152>
 8008264:	2340      	movs	r3, #64	; 0x40
 8008266:	eba0 000a 	sub.w	r0, r0, sl
 800826a:	fa03 f000 	lsl.w	r0, r3, r0
 800826e:	9b04      	ldr	r3, [sp, #16]
 8008270:	4303      	orrs	r3, r0
 8008272:	3401      	adds	r4, #1
 8008274:	9304      	str	r3, [sp, #16]
 8008276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800827a:	4826      	ldr	r0, [pc, #152]	; (8008314 <_svfiprintf_r+0x1f0>)
 800827c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008280:	2206      	movs	r2, #6
 8008282:	f7f7 ffb5 	bl	80001f0 <memchr>
 8008286:	2800      	cmp	r0, #0
 8008288:	d038      	beq.n	80082fc <_svfiprintf_r+0x1d8>
 800828a:	4b23      	ldr	r3, [pc, #140]	; (8008318 <_svfiprintf_r+0x1f4>)
 800828c:	bb1b      	cbnz	r3, 80082d6 <_svfiprintf_r+0x1b2>
 800828e:	9b03      	ldr	r3, [sp, #12]
 8008290:	3307      	adds	r3, #7
 8008292:	f023 0307 	bic.w	r3, r3, #7
 8008296:	3308      	adds	r3, #8
 8008298:	9303      	str	r3, [sp, #12]
 800829a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800829c:	4433      	add	r3, r6
 800829e:	9309      	str	r3, [sp, #36]	; 0x24
 80082a0:	e767      	b.n	8008172 <_svfiprintf_r+0x4e>
 80082a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80082a6:	460c      	mov	r4, r1
 80082a8:	2001      	movs	r0, #1
 80082aa:	e7a5      	b.n	80081f8 <_svfiprintf_r+0xd4>
 80082ac:	2300      	movs	r3, #0
 80082ae:	3401      	adds	r4, #1
 80082b0:	9305      	str	r3, [sp, #20]
 80082b2:	4619      	mov	r1, r3
 80082b4:	f04f 0c0a 	mov.w	ip, #10
 80082b8:	4620      	mov	r0, r4
 80082ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082be:	3a30      	subs	r2, #48	; 0x30
 80082c0:	2a09      	cmp	r2, #9
 80082c2:	d903      	bls.n	80082cc <_svfiprintf_r+0x1a8>
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d0c5      	beq.n	8008254 <_svfiprintf_r+0x130>
 80082c8:	9105      	str	r1, [sp, #20]
 80082ca:	e7c3      	b.n	8008254 <_svfiprintf_r+0x130>
 80082cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80082d0:	4604      	mov	r4, r0
 80082d2:	2301      	movs	r3, #1
 80082d4:	e7f0      	b.n	80082b8 <_svfiprintf_r+0x194>
 80082d6:	ab03      	add	r3, sp, #12
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	462a      	mov	r2, r5
 80082dc:	4b0f      	ldr	r3, [pc, #60]	; (800831c <_svfiprintf_r+0x1f8>)
 80082de:	a904      	add	r1, sp, #16
 80082e0:	4638      	mov	r0, r7
 80082e2:	f7fd ffcb 	bl	800627c <_printf_float>
 80082e6:	1c42      	adds	r2, r0, #1
 80082e8:	4606      	mov	r6, r0
 80082ea:	d1d6      	bne.n	800829a <_svfiprintf_r+0x176>
 80082ec:	89ab      	ldrh	r3, [r5, #12]
 80082ee:	065b      	lsls	r3, r3, #25
 80082f0:	f53f af2c 	bmi.w	800814c <_svfiprintf_r+0x28>
 80082f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082f6:	b01d      	add	sp, #116	; 0x74
 80082f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fc:	ab03      	add	r3, sp, #12
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	462a      	mov	r2, r5
 8008302:	4b06      	ldr	r3, [pc, #24]	; (800831c <_svfiprintf_r+0x1f8>)
 8008304:	a904      	add	r1, sp, #16
 8008306:	4638      	mov	r0, r7
 8008308:	f7fe fa5c 	bl	80067c4 <_printf_i>
 800830c:	e7eb      	b.n	80082e6 <_svfiprintf_r+0x1c2>
 800830e:	bf00      	nop
 8008310:	0800932c 	.word	0x0800932c
 8008314:	08009336 	.word	0x08009336
 8008318:	0800627d 	.word	0x0800627d
 800831c:	0800806d 	.word	0x0800806d
 8008320:	08009332 	.word	0x08009332

08008324 <_sbrk_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	4d06      	ldr	r5, [pc, #24]	; (8008340 <_sbrk_r+0x1c>)
 8008328:	2300      	movs	r3, #0
 800832a:	4604      	mov	r4, r0
 800832c:	4608      	mov	r0, r1
 800832e:	602b      	str	r3, [r5, #0]
 8008330:	f7f9 fbfa 	bl	8001b28 <_sbrk>
 8008334:	1c43      	adds	r3, r0, #1
 8008336:	d102      	bne.n	800833e <_sbrk_r+0x1a>
 8008338:	682b      	ldr	r3, [r5, #0]
 800833a:	b103      	cbz	r3, 800833e <_sbrk_r+0x1a>
 800833c:	6023      	str	r3, [r4, #0]
 800833e:	bd38      	pop	{r3, r4, r5, pc}
 8008340:	2000033c 	.word	0x2000033c

08008344 <__assert_func>:
 8008344:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008346:	4614      	mov	r4, r2
 8008348:	461a      	mov	r2, r3
 800834a:	4b09      	ldr	r3, [pc, #36]	; (8008370 <__assert_func+0x2c>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4605      	mov	r5, r0
 8008350:	68d8      	ldr	r0, [r3, #12]
 8008352:	b14c      	cbz	r4, 8008368 <__assert_func+0x24>
 8008354:	4b07      	ldr	r3, [pc, #28]	; (8008374 <__assert_func+0x30>)
 8008356:	9100      	str	r1, [sp, #0]
 8008358:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800835c:	4906      	ldr	r1, [pc, #24]	; (8008378 <__assert_func+0x34>)
 800835e:	462b      	mov	r3, r5
 8008360:	f000 f80e 	bl	8008380 <fiprintf>
 8008364:	f000 faac 	bl	80088c0 <abort>
 8008368:	4b04      	ldr	r3, [pc, #16]	; (800837c <__assert_func+0x38>)
 800836a:	461c      	mov	r4, r3
 800836c:	e7f3      	b.n	8008356 <__assert_func+0x12>
 800836e:	bf00      	nop
 8008370:	2000000c 	.word	0x2000000c
 8008374:	0800933d 	.word	0x0800933d
 8008378:	0800934a 	.word	0x0800934a
 800837c:	08009378 	.word	0x08009378

08008380 <fiprintf>:
 8008380:	b40e      	push	{r1, r2, r3}
 8008382:	b503      	push	{r0, r1, lr}
 8008384:	4601      	mov	r1, r0
 8008386:	ab03      	add	r3, sp, #12
 8008388:	4805      	ldr	r0, [pc, #20]	; (80083a0 <fiprintf+0x20>)
 800838a:	f853 2b04 	ldr.w	r2, [r3], #4
 800838e:	6800      	ldr	r0, [r0, #0]
 8008390:	9301      	str	r3, [sp, #4]
 8008392:	f000 f897 	bl	80084c4 <_vfiprintf_r>
 8008396:	b002      	add	sp, #8
 8008398:	f85d eb04 	ldr.w	lr, [sp], #4
 800839c:	b003      	add	sp, #12
 800839e:	4770      	bx	lr
 80083a0:	2000000c 	.word	0x2000000c

080083a4 <__ascii_mbtowc>:
 80083a4:	b082      	sub	sp, #8
 80083a6:	b901      	cbnz	r1, 80083aa <__ascii_mbtowc+0x6>
 80083a8:	a901      	add	r1, sp, #4
 80083aa:	b142      	cbz	r2, 80083be <__ascii_mbtowc+0x1a>
 80083ac:	b14b      	cbz	r3, 80083c2 <__ascii_mbtowc+0x1e>
 80083ae:	7813      	ldrb	r3, [r2, #0]
 80083b0:	600b      	str	r3, [r1, #0]
 80083b2:	7812      	ldrb	r2, [r2, #0]
 80083b4:	1e10      	subs	r0, r2, #0
 80083b6:	bf18      	it	ne
 80083b8:	2001      	movne	r0, #1
 80083ba:	b002      	add	sp, #8
 80083bc:	4770      	bx	lr
 80083be:	4610      	mov	r0, r2
 80083c0:	e7fb      	b.n	80083ba <__ascii_mbtowc+0x16>
 80083c2:	f06f 0001 	mvn.w	r0, #1
 80083c6:	e7f8      	b.n	80083ba <__ascii_mbtowc+0x16>

080083c8 <memmove>:
 80083c8:	4288      	cmp	r0, r1
 80083ca:	b510      	push	{r4, lr}
 80083cc:	eb01 0402 	add.w	r4, r1, r2
 80083d0:	d902      	bls.n	80083d8 <memmove+0x10>
 80083d2:	4284      	cmp	r4, r0
 80083d4:	4623      	mov	r3, r4
 80083d6:	d807      	bhi.n	80083e8 <memmove+0x20>
 80083d8:	1e43      	subs	r3, r0, #1
 80083da:	42a1      	cmp	r1, r4
 80083dc:	d008      	beq.n	80083f0 <memmove+0x28>
 80083de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083e6:	e7f8      	b.n	80083da <memmove+0x12>
 80083e8:	4402      	add	r2, r0
 80083ea:	4601      	mov	r1, r0
 80083ec:	428a      	cmp	r2, r1
 80083ee:	d100      	bne.n	80083f2 <memmove+0x2a>
 80083f0:	bd10      	pop	{r4, pc}
 80083f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083fa:	e7f7      	b.n	80083ec <memmove+0x24>

080083fc <__malloc_lock>:
 80083fc:	4801      	ldr	r0, [pc, #4]	; (8008404 <__malloc_lock+0x8>)
 80083fe:	f000 bc1f 	b.w	8008c40 <__retarget_lock_acquire_recursive>
 8008402:	bf00      	nop
 8008404:	20000340 	.word	0x20000340

08008408 <__malloc_unlock>:
 8008408:	4801      	ldr	r0, [pc, #4]	; (8008410 <__malloc_unlock+0x8>)
 800840a:	f000 bc1a 	b.w	8008c42 <__retarget_lock_release_recursive>
 800840e:	bf00      	nop
 8008410:	20000340 	.word	0x20000340

08008414 <_realloc_r>:
 8008414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008418:	4680      	mov	r8, r0
 800841a:	4614      	mov	r4, r2
 800841c:	460e      	mov	r6, r1
 800841e:	b921      	cbnz	r1, 800842a <_realloc_r+0x16>
 8008420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008424:	4611      	mov	r1, r2
 8008426:	f7ff bdad 	b.w	8007f84 <_malloc_r>
 800842a:	b92a      	cbnz	r2, 8008438 <_realloc_r+0x24>
 800842c:	f7ff fd3e 	bl	8007eac <_free_r>
 8008430:	4625      	mov	r5, r4
 8008432:	4628      	mov	r0, r5
 8008434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008438:	f000 fc6a 	bl	8008d10 <_malloc_usable_size_r>
 800843c:	4284      	cmp	r4, r0
 800843e:	4607      	mov	r7, r0
 8008440:	d802      	bhi.n	8008448 <_realloc_r+0x34>
 8008442:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008446:	d812      	bhi.n	800846e <_realloc_r+0x5a>
 8008448:	4621      	mov	r1, r4
 800844a:	4640      	mov	r0, r8
 800844c:	f7ff fd9a 	bl	8007f84 <_malloc_r>
 8008450:	4605      	mov	r5, r0
 8008452:	2800      	cmp	r0, #0
 8008454:	d0ed      	beq.n	8008432 <_realloc_r+0x1e>
 8008456:	42bc      	cmp	r4, r7
 8008458:	4622      	mov	r2, r4
 800845a:	4631      	mov	r1, r6
 800845c:	bf28      	it	cs
 800845e:	463a      	movcs	r2, r7
 8008460:	f7ff f97c 	bl	800775c <memcpy>
 8008464:	4631      	mov	r1, r6
 8008466:	4640      	mov	r0, r8
 8008468:	f7ff fd20 	bl	8007eac <_free_r>
 800846c:	e7e1      	b.n	8008432 <_realloc_r+0x1e>
 800846e:	4635      	mov	r5, r6
 8008470:	e7df      	b.n	8008432 <_realloc_r+0x1e>

08008472 <__sfputc_r>:
 8008472:	6893      	ldr	r3, [r2, #8]
 8008474:	3b01      	subs	r3, #1
 8008476:	2b00      	cmp	r3, #0
 8008478:	b410      	push	{r4}
 800847a:	6093      	str	r3, [r2, #8]
 800847c:	da08      	bge.n	8008490 <__sfputc_r+0x1e>
 800847e:	6994      	ldr	r4, [r2, #24]
 8008480:	42a3      	cmp	r3, r4
 8008482:	db01      	blt.n	8008488 <__sfputc_r+0x16>
 8008484:	290a      	cmp	r1, #10
 8008486:	d103      	bne.n	8008490 <__sfputc_r+0x1e>
 8008488:	f85d 4b04 	ldr.w	r4, [sp], #4
 800848c:	f000 b94a 	b.w	8008724 <__swbuf_r>
 8008490:	6813      	ldr	r3, [r2, #0]
 8008492:	1c58      	adds	r0, r3, #1
 8008494:	6010      	str	r0, [r2, #0]
 8008496:	7019      	strb	r1, [r3, #0]
 8008498:	4608      	mov	r0, r1
 800849a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <__sfputs_r>:
 80084a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a2:	4606      	mov	r6, r0
 80084a4:	460f      	mov	r7, r1
 80084a6:	4614      	mov	r4, r2
 80084a8:	18d5      	adds	r5, r2, r3
 80084aa:	42ac      	cmp	r4, r5
 80084ac:	d101      	bne.n	80084b2 <__sfputs_r+0x12>
 80084ae:	2000      	movs	r0, #0
 80084b0:	e007      	b.n	80084c2 <__sfputs_r+0x22>
 80084b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084b6:	463a      	mov	r2, r7
 80084b8:	4630      	mov	r0, r6
 80084ba:	f7ff ffda 	bl	8008472 <__sfputc_r>
 80084be:	1c43      	adds	r3, r0, #1
 80084c0:	d1f3      	bne.n	80084aa <__sfputs_r+0xa>
 80084c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084c4 <_vfiprintf_r>:
 80084c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c8:	460d      	mov	r5, r1
 80084ca:	b09d      	sub	sp, #116	; 0x74
 80084cc:	4614      	mov	r4, r2
 80084ce:	4698      	mov	r8, r3
 80084d0:	4606      	mov	r6, r0
 80084d2:	b118      	cbz	r0, 80084dc <_vfiprintf_r+0x18>
 80084d4:	6983      	ldr	r3, [r0, #24]
 80084d6:	b90b      	cbnz	r3, 80084dc <_vfiprintf_r+0x18>
 80084d8:	f000 fb14 	bl	8008b04 <__sinit>
 80084dc:	4b89      	ldr	r3, [pc, #548]	; (8008704 <_vfiprintf_r+0x240>)
 80084de:	429d      	cmp	r5, r3
 80084e0:	d11b      	bne.n	800851a <_vfiprintf_r+0x56>
 80084e2:	6875      	ldr	r5, [r6, #4]
 80084e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084e6:	07d9      	lsls	r1, r3, #31
 80084e8:	d405      	bmi.n	80084f6 <_vfiprintf_r+0x32>
 80084ea:	89ab      	ldrh	r3, [r5, #12]
 80084ec:	059a      	lsls	r2, r3, #22
 80084ee:	d402      	bmi.n	80084f6 <_vfiprintf_r+0x32>
 80084f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084f2:	f000 fba5 	bl	8008c40 <__retarget_lock_acquire_recursive>
 80084f6:	89ab      	ldrh	r3, [r5, #12]
 80084f8:	071b      	lsls	r3, r3, #28
 80084fa:	d501      	bpl.n	8008500 <_vfiprintf_r+0x3c>
 80084fc:	692b      	ldr	r3, [r5, #16]
 80084fe:	b9eb      	cbnz	r3, 800853c <_vfiprintf_r+0x78>
 8008500:	4629      	mov	r1, r5
 8008502:	4630      	mov	r0, r6
 8008504:	f000 f96e 	bl	80087e4 <__swsetup_r>
 8008508:	b1c0      	cbz	r0, 800853c <_vfiprintf_r+0x78>
 800850a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800850c:	07dc      	lsls	r4, r3, #31
 800850e:	d50e      	bpl.n	800852e <_vfiprintf_r+0x6a>
 8008510:	f04f 30ff 	mov.w	r0, #4294967295
 8008514:	b01d      	add	sp, #116	; 0x74
 8008516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800851a:	4b7b      	ldr	r3, [pc, #492]	; (8008708 <_vfiprintf_r+0x244>)
 800851c:	429d      	cmp	r5, r3
 800851e:	d101      	bne.n	8008524 <_vfiprintf_r+0x60>
 8008520:	68b5      	ldr	r5, [r6, #8]
 8008522:	e7df      	b.n	80084e4 <_vfiprintf_r+0x20>
 8008524:	4b79      	ldr	r3, [pc, #484]	; (800870c <_vfiprintf_r+0x248>)
 8008526:	429d      	cmp	r5, r3
 8008528:	bf08      	it	eq
 800852a:	68f5      	ldreq	r5, [r6, #12]
 800852c:	e7da      	b.n	80084e4 <_vfiprintf_r+0x20>
 800852e:	89ab      	ldrh	r3, [r5, #12]
 8008530:	0598      	lsls	r0, r3, #22
 8008532:	d4ed      	bmi.n	8008510 <_vfiprintf_r+0x4c>
 8008534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008536:	f000 fb84 	bl	8008c42 <__retarget_lock_release_recursive>
 800853a:	e7e9      	b.n	8008510 <_vfiprintf_r+0x4c>
 800853c:	2300      	movs	r3, #0
 800853e:	9309      	str	r3, [sp, #36]	; 0x24
 8008540:	2320      	movs	r3, #32
 8008542:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008546:	f8cd 800c 	str.w	r8, [sp, #12]
 800854a:	2330      	movs	r3, #48	; 0x30
 800854c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008710 <_vfiprintf_r+0x24c>
 8008550:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008554:	f04f 0901 	mov.w	r9, #1
 8008558:	4623      	mov	r3, r4
 800855a:	469a      	mov	sl, r3
 800855c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008560:	b10a      	cbz	r2, 8008566 <_vfiprintf_r+0xa2>
 8008562:	2a25      	cmp	r2, #37	; 0x25
 8008564:	d1f9      	bne.n	800855a <_vfiprintf_r+0x96>
 8008566:	ebba 0b04 	subs.w	fp, sl, r4
 800856a:	d00b      	beq.n	8008584 <_vfiprintf_r+0xc0>
 800856c:	465b      	mov	r3, fp
 800856e:	4622      	mov	r2, r4
 8008570:	4629      	mov	r1, r5
 8008572:	4630      	mov	r0, r6
 8008574:	f7ff ff94 	bl	80084a0 <__sfputs_r>
 8008578:	3001      	adds	r0, #1
 800857a:	f000 80aa 	beq.w	80086d2 <_vfiprintf_r+0x20e>
 800857e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008580:	445a      	add	r2, fp
 8008582:	9209      	str	r2, [sp, #36]	; 0x24
 8008584:	f89a 3000 	ldrb.w	r3, [sl]
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 80a2 	beq.w	80086d2 <_vfiprintf_r+0x20e>
 800858e:	2300      	movs	r3, #0
 8008590:	f04f 32ff 	mov.w	r2, #4294967295
 8008594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008598:	f10a 0a01 	add.w	sl, sl, #1
 800859c:	9304      	str	r3, [sp, #16]
 800859e:	9307      	str	r3, [sp, #28]
 80085a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085a4:	931a      	str	r3, [sp, #104]	; 0x68
 80085a6:	4654      	mov	r4, sl
 80085a8:	2205      	movs	r2, #5
 80085aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ae:	4858      	ldr	r0, [pc, #352]	; (8008710 <_vfiprintf_r+0x24c>)
 80085b0:	f7f7 fe1e 	bl	80001f0 <memchr>
 80085b4:	9a04      	ldr	r2, [sp, #16]
 80085b6:	b9d8      	cbnz	r0, 80085f0 <_vfiprintf_r+0x12c>
 80085b8:	06d1      	lsls	r1, r2, #27
 80085ba:	bf44      	itt	mi
 80085bc:	2320      	movmi	r3, #32
 80085be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085c2:	0713      	lsls	r3, r2, #28
 80085c4:	bf44      	itt	mi
 80085c6:	232b      	movmi	r3, #43	; 0x2b
 80085c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085cc:	f89a 3000 	ldrb.w	r3, [sl]
 80085d0:	2b2a      	cmp	r3, #42	; 0x2a
 80085d2:	d015      	beq.n	8008600 <_vfiprintf_r+0x13c>
 80085d4:	9a07      	ldr	r2, [sp, #28]
 80085d6:	4654      	mov	r4, sl
 80085d8:	2000      	movs	r0, #0
 80085da:	f04f 0c0a 	mov.w	ip, #10
 80085de:	4621      	mov	r1, r4
 80085e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085e4:	3b30      	subs	r3, #48	; 0x30
 80085e6:	2b09      	cmp	r3, #9
 80085e8:	d94e      	bls.n	8008688 <_vfiprintf_r+0x1c4>
 80085ea:	b1b0      	cbz	r0, 800861a <_vfiprintf_r+0x156>
 80085ec:	9207      	str	r2, [sp, #28]
 80085ee:	e014      	b.n	800861a <_vfiprintf_r+0x156>
 80085f0:	eba0 0308 	sub.w	r3, r0, r8
 80085f4:	fa09 f303 	lsl.w	r3, r9, r3
 80085f8:	4313      	orrs	r3, r2
 80085fa:	9304      	str	r3, [sp, #16]
 80085fc:	46a2      	mov	sl, r4
 80085fe:	e7d2      	b.n	80085a6 <_vfiprintf_r+0xe2>
 8008600:	9b03      	ldr	r3, [sp, #12]
 8008602:	1d19      	adds	r1, r3, #4
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	9103      	str	r1, [sp, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	bfbb      	ittet	lt
 800860c:	425b      	neglt	r3, r3
 800860e:	f042 0202 	orrlt.w	r2, r2, #2
 8008612:	9307      	strge	r3, [sp, #28]
 8008614:	9307      	strlt	r3, [sp, #28]
 8008616:	bfb8      	it	lt
 8008618:	9204      	strlt	r2, [sp, #16]
 800861a:	7823      	ldrb	r3, [r4, #0]
 800861c:	2b2e      	cmp	r3, #46	; 0x2e
 800861e:	d10c      	bne.n	800863a <_vfiprintf_r+0x176>
 8008620:	7863      	ldrb	r3, [r4, #1]
 8008622:	2b2a      	cmp	r3, #42	; 0x2a
 8008624:	d135      	bne.n	8008692 <_vfiprintf_r+0x1ce>
 8008626:	9b03      	ldr	r3, [sp, #12]
 8008628:	1d1a      	adds	r2, r3, #4
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	9203      	str	r2, [sp, #12]
 800862e:	2b00      	cmp	r3, #0
 8008630:	bfb8      	it	lt
 8008632:	f04f 33ff 	movlt.w	r3, #4294967295
 8008636:	3402      	adds	r4, #2
 8008638:	9305      	str	r3, [sp, #20]
 800863a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008720 <_vfiprintf_r+0x25c>
 800863e:	7821      	ldrb	r1, [r4, #0]
 8008640:	2203      	movs	r2, #3
 8008642:	4650      	mov	r0, sl
 8008644:	f7f7 fdd4 	bl	80001f0 <memchr>
 8008648:	b140      	cbz	r0, 800865c <_vfiprintf_r+0x198>
 800864a:	2340      	movs	r3, #64	; 0x40
 800864c:	eba0 000a 	sub.w	r0, r0, sl
 8008650:	fa03 f000 	lsl.w	r0, r3, r0
 8008654:	9b04      	ldr	r3, [sp, #16]
 8008656:	4303      	orrs	r3, r0
 8008658:	3401      	adds	r4, #1
 800865a:	9304      	str	r3, [sp, #16]
 800865c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008660:	482c      	ldr	r0, [pc, #176]	; (8008714 <_vfiprintf_r+0x250>)
 8008662:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008666:	2206      	movs	r2, #6
 8008668:	f7f7 fdc2 	bl	80001f0 <memchr>
 800866c:	2800      	cmp	r0, #0
 800866e:	d03f      	beq.n	80086f0 <_vfiprintf_r+0x22c>
 8008670:	4b29      	ldr	r3, [pc, #164]	; (8008718 <_vfiprintf_r+0x254>)
 8008672:	bb1b      	cbnz	r3, 80086bc <_vfiprintf_r+0x1f8>
 8008674:	9b03      	ldr	r3, [sp, #12]
 8008676:	3307      	adds	r3, #7
 8008678:	f023 0307 	bic.w	r3, r3, #7
 800867c:	3308      	adds	r3, #8
 800867e:	9303      	str	r3, [sp, #12]
 8008680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008682:	443b      	add	r3, r7
 8008684:	9309      	str	r3, [sp, #36]	; 0x24
 8008686:	e767      	b.n	8008558 <_vfiprintf_r+0x94>
 8008688:	fb0c 3202 	mla	r2, ip, r2, r3
 800868c:	460c      	mov	r4, r1
 800868e:	2001      	movs	r0, #1
 8008690:	e7a5      	b.n	80085de <_vfiprintf_r+0x11a>
 8008692:	2300      	movs	r3, #0
 8008694:	3401      	adds	r4, #1
 8008696:	9305      	str	r3, [sp, #20]
 8008698:	4619      	mov	r1, r3
 800869a:	f04f 0c0a 	mov.w	ip, #10
 800869e:	4620      	mov	r0, r4
 80086a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086a4:	3a30      	subs	r2, #48	; 0x30
 80086a6:	2a09      	cmp	r2, #9
 80086a8:	d903      	bls.n	80086b2 <_vfiprintf_r+0x1ee>
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d0c5      	beq.n	800863a <_vfiprintf_r+0x176>
 80086ae:	9105      	str	r1, [sp, #20]
 80086b0:	e7c3      	b.n	800863a <_vfiprintf_r+0x176>
 80086b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80086b6:	4604      	mov	r4, r0
 80086b8:	2301      	movs	r3, #1
 80086ba:	e7f0      	b.n	800869e <_vfiprintf_r+0x1da>
 80086bc:	ab03      	add	r3, sp, #12
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	462a      	mov	r2, r5
 80086c2:	4b16      	ldr	r3, [pc, #88]	; (800871c <_vfiprintf_r+0x258>)
 80086c4:	a904      	add	r1, sp, #16
 80086c6:	4630      	mov	r0, r6
 80086c8:	f7fd fdd8 	bl	800627c <_printf_float>
 80086cc:	4607      	mov	r7, r0
 80086ce:	1c78      	adds	r0, r7, #1
 80086d0:	d1d6      	bne.n	8008680 <_vfiprintf_r+0x1bc>
 80086d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086d4:	07d9      	lsls	r1, r3, #31
 80086d6:	d405      	bmi.n	80086e4 <_vfiprintf_r+0x220>
 80086d8:	89ab      	ldrh	r3, [r5, #12]
 80086da:	059a      	lsls	r2, r3, #22
 80086dc:	d402      	bmi.n	80086e4 <_vfiprintf_r+0x220>
 80086de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086e0:	f000 faaf 	bl	8008c42 <__retarget_lock_release_recursive>
 80086e4:	89ab      	ldrh	r3, [r5, #12]
 80086e6:	065b      	lsls	r3, r3, #25
 80086e8:	f53f af12 	bmi.w	8008510 <_vfiprintf_r+0x4c>
 80086ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086ee:	e711      	b.n	8008514 <_vfiprintf_r+0x50>
 80086f0:	ab03      	add	r3, sp, #12
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	462a      	mov	r2, r5
 80086f6:	4b09      	ldr	r3, [pc, #36]	; (800871c <_vfiprintf_r+0x258>)
 80086f8:	a904      	add	r1, sp, #16
 80086fa:	4630      	mov	r0, r6
 80086fc:	f7fe f862 	bl	80067c4 <_printf_i>
 8008700:	e7e4      	b.n	80086cc <_vfiprintf_r+0x208>
 8008702:	bf00      	nop
 8008704:	080094a4 	.word	0x080094a4
 8008708:	080094c4 	.word	0x080094c4
 800870c:	08009484 	.word	0x08009484
 8008710:	0800932c 	.word	0x0800932c
 8008714:	08009336 	.word	0x08009336
 8008718:	0800627d 	.word	0x0800627d
 800871c:	080084a1 	.word	0x080084a1
 8008720:	08009332 	.word	0x08009332

08008724 <__swbuf_r>:
 8008724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008726:	460e      	mov	r6, r1
 8008728:	4614      	mov	r4, r2
 800872a:	4605      	mov	r5, r0
 800872c:	b118      	cbz	r0, 8008736 <__swbuf_r+0x12>
 800872e:	6983      	ldr	r3, [r0, #24]
 8008730:	b90b      	cbnz	r3, 8008736 <__swbuf_r+0x12>
 8008732:	f000 f9e7 	bl	8008b04 <__sinit>
 8008736:	4b21      	ldr	r3, [pc, #132]	; (80087bc <__swbuf_r+0x98>)
 8008738:	429c      	cmp	r4, r3
 800873a:	d12b      	bne.n	8008794 <__swbuf_r+0x70>
 800873c:	686c      	ldr	r4, [r5, #4]
 800873e:	69a3      	ldr	r3, [r4, #24]
 8008740:	60a3      	str	r3, [r4, #8]
 8008742:	89a3      	ldrh	r3, [r4, #12]
 8008744:	071a      	lsls	r2, r3, #28
 8008746:	d52f      	bpl.n	80087a8 <__swbuf_r+0x84>
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	b36b      	cbz	r3, 80087a8 <__swbuf_r+0x84>
 800874c:	6923      	ldr	r3, [r4, #16]
 800874e:	6820      	ldr	r0, [r4, #0]
 8008750:	1ac0      	subs	r0, r0, r3
 8008752:	6963      	ldr	r3, [r4, #20]
 8008754:	b2f6      	uxtb	r6, r6
 8008756:	4283      	cmp	r3, r0
 8008758:	4637      	mov	r7, r6
 800875a:	dc04      	bgt.n	8008766 <__swbuf_r+0x42>
 800875c:	4621      	mov	r1, r4
 800875e:	4628      	mov	r0, r5
 8008760:	f000 f93c 	bl	80089dc <_fflush_r>
 8008764:	bb30      	cbnz	r0, 80087b4 <__swbuf_r+0x90>
 8008766:	68a3      	ldr	r3, [r4, #8]
 8008768:	3b01      	subs	r3, #1
 800876a:	60a3      	str	r3, [r4, #8]
 800876c:	6823      	ldr	r3, [r4, #0]
 800876e:	1c5a      	adds	r2, r3, #1
 8008770:	6022      	str	r2, [r4, #0]
 8008772:	701e      	strb	r6, [r3, #0]
 8008774:	6963      	ldr	r3, [r4, #20]
 8008776:	3001      	adds	r0, #1
 8008778:	4283      	cmp	r3, r0
 800877a:	d004      	beq.n	8008786 <__swbuf_r+0x62>
 800877c:	89a3      	ldrh	r3, [r4, #12]
 800877e:	07db      	lsls	r3, r3, #31
 8008780:	d506      	bpl.n	8008790 <__swbuf_r+0x6c>
 8008782:	2e0a      	cmp	r6, #10
 8008784:	d104      	bne.n	8008790 <__swbuf_r+0x6c>
 8008786:	4621      	mov	r1, r4
 8008788:	4628      	mov	r0, r5
 800878a:	f000 f927 	bl	80089dc <_fflush_r>
 800878e:	b988      	cbnz	r0, 80087b4 <__swbuf_r+0x90>
 8008790:	4638      	mov	r0, r7
 8008792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008794:	4b0a      	ldr	r3, [pc, #40]	; (80087c0 <__swbuf_r+0x9c>)
 8008796:	429c      	cmp	r4, r3
 8008798:	d101      	bne.n	800879e <__swbuf_r+0x7a>
 800879a:	68ac      	ldr	r4, [r5, #8]
 800879c:	e7cf      	b.n	800873e <__swbuf_r+0x1a>
 800879e:	4b09      	ldr	r3, [pc, #36]	; (80087c4 <__swbuf_r+0xa0>)
 80087a0:	429c      	cmp	r4, r3
 80087a2:	bf08      	it	eq
 80087a4:	68ec      	ldreq	r4, [r5, #12]
 80087a6:	e7ca      	b.n	800873e <__swbuf_r+0x1a>
 80087a8:	4621      	mov	r1, r4
 80087aa:	4628      	mov	r0, r5
 80087ac:	f000 f81a 	bl	80087e4 <__swsetup_r>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d0cb      	beq.n	800874c <__swbuf_r+0x28>
 80087b4:	f04f 37ff 	mov.w	r7, #4294967295
 80087b8:	e7ea      	b.n	8008790 <__swbuf_r+0x6c>
 80087ba:	bf00      	nop
 80087bc:	080094a4 	.word	0x080094a4
 80087c0:	080094c4 	.word	0x080094c4
 80087c4:	08009484 	.word	0x08009484

080087c8 <__ascii_wctomb>:
 80087c8:	b149      	cbz	r1, 80087de <__ascii_wctomb+0x16>
 80087ca:	2aff      	cmp	r2, #255	; 0xff
 80087cc:	bf85      	ittet	hi
 80087ce:	238a      	movhi	r3, #138	; 0x8a
 80087d0:	6003      	strhi	r3, [r0, #0]
 80087d2:	700a      	strbls	r2, [r1, #0]
 80087d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80087d8:	bf98      	it	ls
 80087da:	2001      	movls	r0, #1
 80087dc:	4770      	bx	lr
 80087de:	4608      	mov	r0, r1
 80087e0:	4770      	bx	lr
	...

080087e4 <__swsetup_r>:
 80087e4:	4b32      	ldr	r3, [pc, #200]	; (80088b0 <__swsetup_r+0xcc>)
 80087e6:	b570      	push	{r4, r5, r6, lr}
 80087e8:	681d      	ldr	r5, [r3, #0]
 80087ea:	4606      	mov	r6, r0
 80087ec:	460c      	mov	r4, r1
 80087ee:	b125      	cbz	r5, 80087fa <__swsetup_r+0x16>
 80087f0:	69ab      	ldr	r3, [r5, #24]
 80087f2:	b913      	cbnz	r3, 80087fa <__swsetup_r+0x16>
 80087f4:	4628      	mov	r0, r5
 80087f6:	f000 f985 	bl	8008b04 <__sinit>
 80087fa:	4b2e      	ldr	r3, [pc, #184]	; (80088b4 <__swsetup_r+0xd0>)
 80087fc:	429c      	cmp	r4, r3
 80087fe:	d10f      	bne.n	8008820 <__swsetup_r+0x3c>
 8008800:	686c      	ldr	r4, [r5, #4]
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008808:	0719      	lsls	r1, r3, #28
 800880a:	d42c      	bmi.n	8008866 <__swsetup_r+0x82>
 800880c:	06dd      	lsls	r5, r3, #27
 800880e:	d411      	bmi.n	8008834 <__swsetup_r+0x50>
 8008810:	2309      	movs	r3, #9
 8008812:	6033      	str	r3, [r6, #0]
 8008814:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008818:	81a3      	strh	r3, [r4, #12]
 800881a:	f04f 30ff 	mov.w	r0, #4294967295
 800881e:	e03e      	b.n	800889e <__swsetup_r+0xba>
 8008820:	4b25      	ldr	r3, [pc, #148]	; (80088b8 <__swsetup_r+0xd4>)
 8008822:	429c      	cmp	r4, r3
 8008824:	d101      	bne.n	800882a <__swsetup_r+0x46>
 8008826:	68ac      	ldr	r4, [r5, #8]
 8008828:	e7eb      	b.n	8008802 <__swsetup_r+0x1e>
 800882a:	4b24      	ldr	r3, [pc, #144]	; (80088bc <__swsetup_r+0xd8>)
 800882c:	429c      	cmp	r4, r3
 800882e:	bf08      	it	eq
 8008830:	68ec      	ldreq	r4, [r5, #12]
 8008832:	e7e6      	b.n	8008802 <__swsetup_r+0x1e>
 8008834:	0758      	lsls	r0, r3, #29
 8008836:	d512      	bpl.n	800885e <__swsetup_r+0x7a>
 8008838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800883a:	b141      	cbz	r1, 800884e <__swsetup_r+0x6a>
 800883c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008840:	4299      	cmp	r1, r3
 8008842:	d002      	beq.n	800884a <__swsetup_r+0x66>
 8008844:	4630      	mov	r0, r6
 8008846:	f7ff fb31 	bl	8007eac <_free_r>
 800884a:	2300      	movs	r3, #0
 800884c:	6363      	str	r3, [r4, #52]	; 0x34
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008854:	81a3      	strh	r3, [r4, #12]
 8008856:	2300      	movs	r3, #0
 8008858:	6063      	str	r3, [r4, #4]
 800885a:	6923      	ldr	r3, [r4, #16]
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	89a3      	ldrh	r3, [r4, #12]
 8008860:	f043 0308 	orr.w	r3, r3, #8
 8008864:	81a3      	strh	r3, [r4, #12]
 8008866:	6923      	ldr	r3, [r4, #16]
 8008868:	b94b      	cbnz	r3, 800887e <__swsetup_r+0x9a>
 800886a:	89a3      	ldrh	r3, [r4, #12]
 800886c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008874:	d003      	beq.n	800887e <__swsetup_r+0x9a>
 8008876:	4621      	mov	r1, r4
 8008878:	4630      	mov	r0, r6
 800887a:	f000 fa09 	bl	8008c90 <__smakebuf_r>
 800887e:	89a0      	ldrh	r0, [r4, #12]
 8008880:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008884:	f010 0301 	ands.w	r3, r0, #1
 8008888:	d00a      	beq.n	80088a0 <__swsetup_r+0xbc>
 800888a:	2300      	movs	r3, #0
 800888c:	60a3      	str	r3, [r4, #8]
 800888e:	6963      	ldr	r3, [r4, #20]
 8008890:	425b      	negs	r3, r3
 8008892:	61a3      	str	r3, [r4, #24]
 8008894:	6923      	ldr	r3, [r4, #16]
 8008896:	b943      	cbnz	r3, 80088aa <__swsetup_r+0xc6>
 8008898:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800889c:	d1ba      	bne.n	8008814 <__swsetup_r+0x30>
 800889e:	bd70      	pop	{r4, r5, r6, pc}
 80088a0:	0781      	lsls	r1, r0, #30
 80088a2:	bf58      	it	pl
 80088a4:	6963      	ldrpl	r3, [r4, #20]
 80088a6:	60a3      	str	r3, [r4, #8]
 80088a8:	e7f4      	b.n	8008894 <__swsetup_r+0xb0>
 80088aa:	2000      	movs	r0, #0
 80088ac:	e7f7      	b.n	800889e <__swsetup_r+0xba>
 80088ae:	bf00      	nop
 80088b0:	2000000c 	.word	0x2000000c
 80088b4:	080094a4 	.word	0x080094a4
 80088b8:	080094c4 	.word	0x080094c4
 80088bc:	08009484 	.word	0x08009484

080088c0 <abort>:
 80088c0:	b508      	push	{r3, lr}
 80088c2:	2006      	movs	r0, #6
 80088c4:	f000 fa54 	bl	8008d70 <raise>
 80088c8:	2001      	movs	r0, #1
 80088ca:	f7f9 f8b5 	bl	8001a38 <_exit>
	...

080088d0 <__sflush_r>:
 80088d0:	898a      	ldrh	r2, [r1, #12]
 80088d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d6:	4605      	mov	r5, r0
 80088d8:	0710      	lsls	r0, r2, #28
 80088da:	460c      	mov	r4, r1
 80088dc:	d458      	bmi.n	8008990 <__sflush_r+0xc0>
 80088de:	684b      	ldr	r3, [r1, #4]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	dc05      	bgt.n	80088f0 <__sflush_r+0x20>
 80088e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	dc02      	bgt.n	80088f0 <__sflush_r+0x20>
 80088ea:	2000      	movs	r0, #0
 80088ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088f2:	2e00      	cmp	r6, #0
 80088f4:	d0f9      	beq.n	80088ea <__sflush_r+0x1a>
 80088f6:	2300      	movs	r3, #0
 80088f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088fc:	682f      	ldr	r7, [r5, #0]
 80088fe:	602b      	str	r3, [r5, #0]
 8008900:	d032      	beq.n	8008968 <__sflush_r+0x98>
 8008902:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008904:	89a3      	ldrh	r3, [r4, #12]
 8008906:	075a      	lsls	r2, r3, #29
 8008908:	d505      	bpl.n	8008916 <__sflush_r+0x46>
 800890a:	6863      	ldr	r3, [r4, #4]
 800890c:	1ac0      	subs	r0, r0, r3
 800890e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008910:	b10b      	cbz	r3, 8008916 <__sflush_r+0x46>
 8008912:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008914:	1ac0      	subs	r0, r0, r3
 8008916:	2300      	movs	r3, #0
 8008918:	4602      	mov	r2, r0
 800891a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800891c:	6a21      	ldr	r1, [r4, #32]
 800891e:	4628      	mov	r0, r5
 8008920:	47b0      	blx	r6
 8008922:	1c43      	adds	r3, r0, #1
 8008924:	89a3      	ldrh	r3, [r4, #12]
 8008926:	d106      	bne.n	8008936 <__sflush_r+0x66>
 8008928:	6829      	ldr	r1, [r5, #0]
 800892a:	291d      	cmp	r1, #29
 800892c:	d82c      	bhi.n	8008988 <__sflush_r+0xb8>
 800892e:	4a2a      	ldr	r2, [pc, #168]	; (80089d8 <__sflush_r+0x108>)
 8008930:	40ca      	lsrs	r2, r1
 8008932:	07d6      	lsls	r6, r2, #31
 8008934:	d528      	bpl.n	8008988 <__sflush_r+0xb8>
 8008936:	2200      	movs	r2, #0
 8008938:	6062      	str	r2, [r4, #4]
 800893a:	04d9      	lsls	r1, r3, #19
 800893c:	6922      	ldr	r2, [r4, #16]
 800893e:	6022      	str	r2, [r4, #0]
 8008940:	d504      	bpl.n	800894c <__sflush_r+0x7c>
 8008942:	1c42      	adds	r2, r0, #1
 8008944:	d101      	bne.n	800894a <__sflush_r+0x7a>
 8008946:	682b      	ldr	r3, [r5, #0]
 8008948:	b903      	cbnz	r3, 800894c <__sflush_r+0x7c>
 800894a:	6560      	str	r0, [r4, #84]	; 0x54
 800894c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800894e:	602f      	str	r7, [r5, #0]
 8008950:	2900      	cmp	r1, #0
 8008952:	d0ca      	beq.n	80088ea <__sflush_r+0x1a>
 8008954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008958:	4299      	cmp	r1, r3
 800895a:	d002      	beq.n	8008962 <__sflush_r+0x92>
 800895c:	4628      	mov	r0, r5
 800895e:	f7ff faa5 	bl	8007eac <_free_r>
 8008962:	2000      	movs	r0, #0
 8008964:	6360      	str	r0, [r4, #52]	; 0x34
 8008966:	e7c1      	b.n	80088ec <__sflush_r+0x1c>
 8008968:	6a21      	ldr	r1, [r4, #32]
 800896a:	2301      	movs	r3, #1
 800896c:	4628      	mov	r0, r5
 800896e:	47b0      	blx	r6
 8008970:	1c41      	adds	r1, r0, #1
 8008972:	d1c7      	bne.n	8008904 <__sflush_r+0x34>
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d0c4      	beq.n	8008904 <__sflush_r+0x34>
 800897a:	2b1d      	cmp	r3, #29
 800897c:	d001      	beq.n	8008982 <__sflush_r+0xb2>
 800897e:	2b16      	cmp	r3, #22
 8008980:	d101      	bne.n	8008986 <__sflush_r+0xb6>
 8008982:	602f      	str	r7, [r5, #0]
 8008984:	e7b1      	b.n	80088ea <__sflush_r+0x1a>
 8008986:	89a3      	ldrh	r3, [r4, #12]
 8008988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800898c:	81a3      	strh	r3, [r4, #12]
 800898e:	e7ad      	b.n	80088ec <__sflush_r+0x1c>
 8008990:	690f      	ldr	r7, [r1, #16]
 8008992:	2f00      	cmp	r7, #0
 8008994:	d0a9      	beq.n	80088ea <__sflush_r+0x1a>
 8008996:	0793      	lsls	r3, r2, #30
 8008998:	680e      	ldr	r6, [r1, #0]
 800899a:	bf08      	it	eq
 800899c:	694b      	ldreq	r3, [r1, #20]
 800899e:	600f      	str	r7, [r1, #0]
 80089a0:	bf18      	it	ne
 80089a2:	2300      	movne	r3, #0
 80089a4:	eba6 0807 	sub.w	r8, r6, r7
 80089a8:	608b      	str	r3, [r1, #8]
 80089aa:	f1b8 0f00 	cmp.w	r8, #0
 80089ae:	dd9c      	ble.n	80088ea <__sflush_r+0x1a>
 80089b0:	6a21      	ldr	r1, [r4, #32]
 80089b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089b4:	4643      	mov	r3, r8
 80089b6:	463a      	mov	r2, r7
 80089b8:	4628      	mov	r0, r5
 80089ba:	47b0      	blx	r6
 80089bc:	2800      	cmp	r0, #0
 80089be:	dc06      	bgt.n	80089ce <__sflush_r+0xfe>
 80089c0:	89a3      	ldrh	r3, [r4, #12]
 80089c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089c6:	81a3      	strh	r3, [r4, #12]
 80089c8:	f04f 30ff 	mov.w	r0, #4294967295
 80089cc:	e78e      	b.n	80088ec <__sflush_r+0x1c>
 80089ce:	4407      	add	r7, r0
 80089d0:	eba8 0800 	sub.w	r8, r8, r0
 80089d4:	e7e9      	b.n	80089aa <__sflush_r+0xda>
 80089d6:	bf00      	nop
 80089d8:	20400001 	.word	0x20400001

080089dc <_fflush_r>:
 80089dc:	b538      	push	{r3, r4, r5, lr}
 80089de:	690b      	ldr	r3, [r1, #16]
 80089e0:	4605      	mov	r5, r0
 80089e2:	460c      	mov	r4, r1
 80089e4:	b913      	cbnz	r3, 80089ec <_fflush_r+0x10>
 80089e6:	2500      	movs	r5, #0
 80089e8:	4628      	mov	r0, r5
 80089ea:	bd38      	pop	{r3, r4, r5, pc}
 80089ec:	b118      	cbz	r0, 80089f6 <_fflush_r+0x1a>
 80089ee:	6983      	ldr	r3, [r0, #24]
 80089f0:	b90b      	cbnz	r3, 80089f6 <_fflush_r+0x1a>
 80089f2:	f000 f887 	bl	8008b04 <__sinit>
 80089f6:	4b14      	ldr	r3, [pc, #80]	; (8008a48 <_fflush_r+0x6c>)
 80089f8:	429c      	cmp	r4, r3
 80089fa:	d11b      	bne.n	8008a34 <_fflush_r+0x58>
 80089fc:	686c      	ldr	r4, [r5, #4]
 80089fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d0ef      	beq.n	80089e6 <_fflush_r+0xa>
 8008a06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a08:	07d0      	lsls	r0, r2, #31
 8008a0a:	d404      	bmi.n	8008a16 <_fflush_r+0x3a>
 8008a0c:	0599      	lsls	r1, r3, #22
 8008a0e:	d402      	bmi.n	8008a16 <_fflush_r+0x3a>
 8008a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a12:	f000 f915 	bl	8008c40 <__retarget_lock_acquire_recursive>
 8008a16:	4628      	mov	r0, r5
 8008a18:	4621      	mov	r1, r4
 8008a1a:	f7ff ff59 	bl	80088d0 <__sflush_r>
 8008a1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a20:	07da      	lsls	r2, r3, #31
 8008a22:	4605      	mov	r5, r0
 8008a24:	d4e0      	bmi.n	80089e8 <_fflush_r+0xc>
 8008a26:	89a3      	ldrh	r3, [r4, #12]
 8008a28:	059b      	lsls	r3, r3, #22
 8008a2a:	d4dd      	bmi.n	80089e8 <_fflush_r+0xc>
 8008a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a2e:	f000 f908 	bl	8008c42 <__retarget_lock_release_recursive>
 8008a32:	e7d9      	b.n	80089e8 <_fflush_r+0xc>
 8008a34:	4b05      	ldr	r3, [pc, #20]	; (8008a4c <_fflush_r+0x70>)
 8008a36:	429c      	cmp	r4, r3
 8008a38:	d101      	bne.n	8008a3e <_fflush_r+0x62>
 8008a3a:	68ac      	ldr	r4, [r5, #8]
 8008a3c:	e7df      	b.n	80089fe <_fflush_r+0x22>
 8008a3e:	4b04      	ldr	r3, [pc, #16]	; (8008a50 <_fflush_r+0x74>)
 8008a40:	429c      	cmp	r4, r3
 8008a42:	bf08      	it	eq
 8008a44:	68ec      	ldreq	r4, [r5, #12]
 8008a46:	e7da      	b.n	80089fe <_fflush_r+0x22>
 8008a48:	080094a4 	.word	0x080094a4
 8008a4c:	080094c4 	.word	0x080094c4
 8008a50:	08009484 	.word	0x08009484

08008a54 <std>:
 8008a54:	2300      	movs	r3, #0
 8008a56:	b510      	push	{r4, lr}
 8008a58:	4604      	mov	r4, r0
 8008a5a:	e9c0 3300 	strd	r3, r3, [r0]
 8008a5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a62:	6083      	str	r3, [r0, #8]
 8008a64:	8181      	strh	r1, [r0, #12]
 8008a66:	6643      	str	r3, [r0, #100]	; 0x64
 8008a68:	81c2      	strh	r2, [r0, #14]
 8008a6a:	6183      	str	r3, [r0, #24]
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	2208      	movs	r2, #8
 8008a70:	305c      	adds	r0, #92	; 0x5c
 8008a72:	f7fd fb5b 	bl	800612c <memset>
 8008a76:	4b05      	ldr	r3, [pc, #20]	; (8008a8c <std+0x38>)
 8008a78:	6263      	str	r3, [r4, #36]	; 0x24
 8008a7a:	4b05      	ldr	r3, [pc, #20]	; (8008a90 <std+0x3c>)
 8008a7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a7e:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <std+0x40>)
 8008a80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a82:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <std+0x44>)
 8008a84:	6224      	str	r4, [r4, #32]
 8008a86:	6323      	str	r3, [r4, #48]	; 0x30
 8008a88:	bd10      	pop	{r4, pc}
 8008a8a:	bf00      	nop
 8008a8c:	08008da9 	.word	0x08008da9
 8008a90:	08008dcb 	.word	0x08008dcb
 8008a94:	08008e03 	.word	0x08008e03
 8008a98:	08008e27 	.word	0x08008e27

08008a9c <_cleanup_r>:
 8008a9c:	4901      	ldr	r1, [pc, #4]	; (8008aa4 <_cleanup_r+0x8>)
 8008a9e:	f000 b8af 	b.w	8008c00 <_fwalk_reent>
 8008aa2:	bf00      	nop
 8008aa4:	080089dd 	.word	0x080089dd

08008aa8 <__sfmoreglue>:
 8008aa8:	b570      	push	{r4, r5, r6, lr}
 8008aaa:	2268      	movs	r2, #104	; 0x68
 8008aac:	1e4d      	subs	r5, r1, #1
 8008aae:	4355      	muls	r5, r2
 8008ab0:	460e      	mov	r6, r1
 8008ab2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ab6:	f7ff fa65 	bl	8007f84 <_malloc_r>
 8008aba:	4604      	mov	r4, r0
 8008abc:	b140      	cbz	r0, 8008ad0 <__sfmoreglue+0x28>
 8008abe:	2100      	movs	r1, #0
 8008ac0:	e9c0 1600 	strd	r1, r6, [r0]
 8008ac4:	300c      	adds	r0, #12
 8008ac6:	60a0      	str	r0, [r4, #8]
 8008ac8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008acc:	f7fd fb2e 	bl	800612c <memset>
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	bd70      	pop	{r4, r5, r6, pc}

08008ad4 <__sfp_lock_acquire>:
 8008ad4:	4801      	ldr	r0, [pc, #4]	; (8008adc <__sfp_lock_acquire+0x8>)
 8008ad6:	f000 b8b3 	b.w	8008c40 <__retarget_lock_acquire_recursive>
 8008ada:	bf00      	nop
 8008adc:	20000341 	.word	0x20000341

08008ae0 <__sfp_lock_release>:
 8008ae0:	4801      	ldr	r0, [pc, #4]	; (8008ae8 <__sfp_lock_release+0x8>)
 8008ae2:	f000 b8ae 	b.w	8008c42 <__retarget_lock_release_recursive>
 8008ae6:	bf00      	nop
 8008ae8:	20000341 	.word	0x20000341

08008aec <__sinit_lock_acquire>:
 8008aec:	4801      	ldr	r0, [pc, #4]	; (8008af4 <__sinit_lock_acquire+0x8>)
 8008aee:	f000 b8a7 	b.w	8008c40 <__retarget_lock_acquire_recursive>
 8008af2:	bf00      	nop
 8008af4:	20000342 	.word	0x20000342

08008af8 <__sinit_lock_release>:
 8008af8:	4801      	ldr	r0, [pc, #4]	; (8008b00 <__sinit_lock_release+0x8>)
 8008afa:	f000 b8a2 	b.w	8008c42 <__retarget_lock_release_recursive>
 8008afe:	bf00      	nop
 8008b00:	20000342 	.word	0x20000342

08008b04 <__sinit>:
 8008b04:	b510      	push	{r4, lr}
 8008b06:	4604      	mov	r4, r0
 8008b08:	f7ff fff0 	bl	8008aec <__sinit_lock_acquire>
 8008b0c:	69a3      	ldr	r3, [r4, #24]
 8008b0e:	b11b      	cbz	r3, 8008b18 <__sinit+0x14>
 8008b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b14:	f7ff bff0 	b.w	8008af8 <__sinit_lock_release>
 8008b18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b1c:	6523      	str	r3, [r4, #80]	; 0x50
 8008b1e:	4b13      	ldr	r3, [pc, #76]	; (8008b6c <__sinit+0x68>)
 8008b20:	4a13      	ldr	r2, [pc, #76]	; (8008b70 <__sinit+0x6c>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b26:	42a3      	cmp	r3, r4
 8008b28:	bf04      	itt	eq
 8008b2a:	2301      	moveq	r3, #1
 8008b2c:	61a3      	streq	r3, [r4, #24]
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 f820 	bl	8008b74 <__sfp>
 8008b34:	6060      	str	r0, [r4, #4]
 8008b36:	4620      	mov	r0, r4
 8008b38:	f000 f81c 	bl	8008b74 <__sfp>
 8008b3c:	60a0      	str	r0, [r4, #8]
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f000 f818 	bl	8008b74 <__sfp>
 8008b44:	2200      	movs	r2, #0
 8008b46:	60e0      	str	r0, [r4, #12]
 8008b48:	2104      	movs	r1, #4
 8008b4a:	6860      	ldr	r0, [r4, #4]
 8008b4c:	f7ff ff82 	bl	8008a54 <std>
 8008b50:	68a0      	ldr	r0, [r4, #8]
 8008b52:	2201      	movs	r2, #1
 8008b54:	2109      	movs	r1, #9
 8008b56:	f7ff ff7d 	bl	8008a54 <std>
 8008b5a:	68e0      	ldr	r0, [r4, #12]
 8008b5c:	2202      	movs	r2, #2
 8008b5e:	2112      	movs	r1, #18
 8008b60:	f7ff ff78 	bl	8008a54 <std>
 8008b64:	2301      	movs	r3, #1
 8008b66:	61a3      	str	r3, [r4, #24]
 8008b68:	e7d2      	b.n	8008b10 <__sinit+0xc>
 8008b6a:	bf00      	nop
 8008b6c:	08009108 	.word	0x08009108
 8008b70:	08008a9d 	.word	0x08008a9d

08008b74 <__sfp>:
 8008b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b76:	4607      	mov	r7, r0
 8008b78:	f7ff ffac 	bl	8008ad4 <__sfp_lock_acquire>
 8008b7c:	4b1e      	ldr	r3, [pc, #120]	; (8008bf8 <__sfp+0x84>)
 8008b7e:	681e      	ldr	r6, [r3, #0]
 8008b80:	69b3      	ldr	r3, [r6, #24]
 8008b82:	b913      	cbnz	r3, 8008b8a <__sfp+0x16>
 8008b84:	4630      	mov	r0, r6
 8008b86:	f7ff ffbd 	bl	8008b04 <__sinit>
 8008b8a:	3648      	adds	r6, #72	; 0x48
 8008b8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	d503      	bpl.n	8008b9c <__sfp+0x28>
 8008b94:	6833      	ldr	r3, [r6, #0]
 8008b96:	b30b      	cbz	r3, 8008bdc <__sfp+0x68>
 8008b98:	6836      	ldr	r6, [r6, #0]
 8008b9a:	e7f7      	b.n	8008b8c <__sfp+0x18>
 8008b9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ba0:	b9d5      	cbnz	r5, 8008bd8 <__sfp+0x64>
 8008ba2:	4b16      	ldr	r3, [pc, #88]	; (8008bfc <__sfp+0x88>)
 8008ba4:	60e3      	str	r3, [r4, #12]
 8008ba6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008baa:	6665      	str	r5, [r4, #100]	; 0x64
 8008bac:	f000 f847 	bl	8008c3e <__retarget_lock_init_recursive>
 8008bb0:	f7ff ff96 	bl	8008ae0 <__sfp_lock_release>
 8008bb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008bb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008bbc:	6025      	str	r5, [r4, #0]
 8008bbe:	61a5      	str	r5, [r4, #24]
 8008bc0:	2208      	movs	r2, #8
 8008bc2:	4629      	mov	r1, r5
 8008bc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bc8:	f7fd fab0 	bl	800612c <memset>
 8008bcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bd8:	3468      	adds	r4, #104	; 0x68
 8008bda:	e7d9      	b.n	8008b90 <__sfp+0x1c>
 8008bdc:	2104      	movs	r1, #4
 8008bde:	4638      	mov	r0, r7
 8008be0:	f7ff ff62 	bl	8008aa8 <__sfmoreglue>
 8008be4:	4604      	mov	r4, r0
 8008be6:	6030      	str	r0, [r6, #0]
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d1d5      	bne.n	8008b98 <__sfp+0x24>
 8008bec:	f7ff ff78 	bl	8008ae0 <__sfp_lock_release>
 8008bf0:	230c      	movs	r3, #12
 8008bf2:	603b      	str	r3, [r7, #0]
 8008bf4:	e7ee      	b.n	8008bd4 <__sfp+0x60>
 8008bf6:	bf00      	nop
 8008bf8:	08009108 	.word	0x08009108
 8008bfc:	ffff0001 	.word	0xffff0001

08008c00 <_fwalk_reent>:
 8008c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c04:	4606      	mov	r6, r0
 8008c06:	4688      	mov	r8, r1
 8008c08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c0c:	2700      	movs	r7, #0
 8008c0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c12:	f1b9 0901 	subs.w	r9, r9, #1
 8008c16:	d505      	bpl.n	8008c24 <_fwalk_reent+0x24>
 8008c18:	6824      	ldr	r4, [r4, #0]
 8008c1a:	2c00      	cmp	r4, #0
 8008c1c:	d1f7      	bne.n	8008c0e <_fwalk_reent+0xe>
 8008c1e:	4638      	mov	r0, r7
 8008c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c24:	89ab      	ldrh	r3, [r5, #12]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d907      	bls.n	8008c3a <_fwalk_reent+0x3a>
 8008c2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	d003      	beq.n	8008c3a <_fwalk_reent+0x3a>
 8008c32:	4629      	mov	r1, r5
 8008c34:	4630      	mov	r0, r6
 8008c36:	47c0      	blx	r8
 8008c38:	4307      	orrs	r7, r0
 8008c3a:	3568      	adds	r5, #104	; 0x68
 8008c3c:	e7e9      	b.n	8008c12 <_fwalk_reent+0x12>

08008c3e <__retarget_lock_init_recursive>:
 8008c3e:	4770      	bx	lr

08008c40 <__retarget_lock_acquire_recursive>:
 8008c40:	4770      	bx	lr

08008c42 <__retarget_lock_release_recursive>:
 8008c42:	4770      	bx	lr

08008c44 <__swhatbuf_r>:
 8008c44:	b570      	push	{r4, r5, r6, lr}
 8008c46:	460e      	mov	r6, r1
 8008c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	b096      	sub	sp, #88	; 0x58
 8008c50:	4614      	mov	r4, r2
 8008c52:	461d      	mov	r5, r3
 8008c54:	da08      	bge.n	8008c68 <__swhatbuf_r+0x24>
 8008c56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	602a      	str	r2, [r5, #0]
 8008c5e:	061a      	lsls	r2, r3, #24
 8008c60:	d410      	bmi.n	8008c84 <__swhatbuf_r+0x40>
 8008c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c66:	e00e      	b.n	8008c86 <__swhatbuf_r+0x42>
 8008c68:	466a      	mov	r2, sp
 8008c6a:	f000 f903 	bl	8008e74 <_fstat_r>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	dbf1      	blt.n	8008c56 <__swhatbuf_r+0x12>
 8008c72:	9a01      	ldr	r2, [sp, #4]
 8008c74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c7c:	425a      	negs	r2, r3
 8008c7e:	415a      	adcs	r2, r3
 8008c80:	602a      	str	r2, [r5, #0]
 8008c82:	e7ee      	b.n	8008c62 <__swhatbuf_r+0x1e>
 8008c84:	2340      	movs	r3, #64	; 0x40
 8008c86:	2000      	movs	r0, #0
 8008c88:	6023      	str	r3, [r4, #0]
 8008c8a:	b016      	add	sp, #88	; 0x58
 8008c8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c90 <__smakebuf_r>:
 8008c90:	898b      	ldrh	r3, [r1, #12]
 8008c92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c94:	079d      	lsls	r5, r3, #30
 8008c96:	4606      	mov	r6, r0
 8008c98:	460c      	mov	r4, r1
 8008c9a:	d507      	bpl.n	8008cac <__smakebuf_r+0x1c>
 8008c9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ca0:	6023      	str	r3, [r4, #0]
 8008ca2:	6123      	str	r3, [r4, #16]
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	6163      	str	r3, [r4, #20]
 8008ca8:	b002      	add	sp, #8
 8008caa:	bd70      	pop	{r4, r5, r6, pc}
 8008cac:	ab01      	add	r3, sp, #4
 8008cae:	466a      	mov	r2, sp
 8008cb0:	f7ff ffc8 	bl	8008c44 <__swhatbuf_r>
 8008cb4:	9900      	ldr	r1, [sp, #0]
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	4630      	mov	r0, r6
 8008cba:	f7ff f963 	bl	8007f84 <_malloc_r>
 8008cbe:	b948      	cbnz	r0, 8008cd4 <__smakebuf_r+0x44>
 8008cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cc4:	059a      	lsls	r2, r3, #22
 8008cc6:	d4ef      	bmi.n	8008ca8 <__smakebuf_r+0x18>
 8008cc8:	f023 0303 	bic.w	r3, r3, #3
 8008ccc:	f043 0302 	orr.w	r3, r3, #2
 8008cd0:	81a3      	strh	r3, [r4, #12]
 8008cd2:	e7e3      	b.n	8008c9c <__smakebuf_r+0xc>
 8008cd4:	4b0d      	ldr	r3, [pc, #52]	; (8008d0c <__smakebuf_r+0x7c>)
 8008cd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cd8:	89a3      	ldrh	r3, [r4, #12]
 8008cda:	6020      	str	r0, [r4, #0]
 8008cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ce0:	81a3      	strh	r3, [r4, #12]
 8008ce2:	9b00      	ldr	r3, [sp, #0]
 8008ce4:	6163      	str	r3, [r4, #20]
 8008ce6:	9b01      	ldr	r3, [sp, #4]
 8008ce8:	6120      	str	r0, [r4, #16]
 8008cea:	b15b      	cbz	r3, 8008d04 <__smakebuf_r+0x74>
 8008cec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f000 f8d1 	bl	8008e98 <_isatty_r>
 8008cf6:	b128      	cbz	r0, 8008d04 <__smakebuf_r+0x74>
 8008cf8:	89a3      	ldrh	r3, [r4, #12]
 8008cfa:	f023 0303 	bic.w	r3, r3, #3
 8008cfe:	f043 0301 	orr.w	r3, r3, #1
 8008d02:	81a3      	strh	r3, [r4, #12]
 8008d04:	89a0      	ldrh	r0, [r4, #12]
 8008d06:	4305      	orrs	r5, r0
 8008d08:	81a5      	strh	r5, [r4, #12]
 8008d0a:	e7cd      	b.n	8008ca8 <__smakebuf_r+0x18>
 8008d0c:	08008a9d 	.word	0x08008a9d

08008d10 <_malloc_usable_size_r>:
 8008d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d14:	1f18      	subs	r0, r3, #4
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	bfbc      	itt	lt
 8008d1a:	580b      	ldrlt	r3, [r1, r0]
 8008d1c:	18c0      	addlt	r0, r0, r3
 8008d1e:	4770      	bx	lr

08008d20 <_raise_r>:
 8008d20:	291f      	cmp	r1, #31
 8008d22:	b538      	push	{r3, r4, r5, lr}
 8008d24:	4604      	mov	r4, r0
 8008d26:	460d      	mov	r5, r1
 8008d28:	d904      	bls.n	8008d34 <_raise_r+0x14>
 8008d2a:	2316      	movs	r3, #22
 8008d2c:	6003      	str	r3, [r0, #0]
 8008d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d32:	bd38      	pop	{r3, r4, r5, pc}
 8008d34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d36:	b112      	cbz	r2, 8008d3e <_raise_r+0x1e>
 8008d38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d3c:	b94b      	cbnz	r3, 8008d52 <_raise_r+0x32>
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f000 f830 	bl	8008da4 <_getpid_r>
 8008d44:	462a      	mov	r2, r5
 8008d46:	4601      	mov	r1, r0
 8008d48:	4620      	mov	r0, r4
 8008d4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d4e:	f000 b817 	b.w	8008d80 <_kill_r>
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d00a      	beq.n	8008d6c <_raise_r+0x4c>
 8008d56:	1c59      	adds	r1, r3, #1
 8008d58:	d103      	bne.n	8008d62 <_raise_r+0x42>
 8008d5a:	2316      	movs	r3, #22
 8008d5c:	6003      	str	r3, [r0, #0]
 8008d5e:	2001      	movs	r0, #1
 8008d60:	e7e7      	b.n	8008d32 <_raise_r+0x12>
 8008d62:	2400      	movs	r4, #0
 8008d64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d68:	4628      	mov	r0, r5
 8008d6a:	4798      	blx	r3
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	e7e0      	b.n	8008d32 <_raise_r+0x12>

08008d70 <raise>:
 8008d70:	4b02      	ldr	r3, [pc, #8]	; (8008d7c <raise+0xc>)
 8008d72:	4601      	mov	r1, r0
 8008d74:	6818      	ldr	r0, [r3, #0]
 8008d76:	f7ff bfd3 	b.w	8008d20 <_raise_r>
 8008d7a:	bf00      	nop
 8008d7c:	2000000c 	.word	0x2000000c

08008d80 <_kill_r>:
 8008d80:	b538      	push	{r3, r4, r5, lr}
 8008d82:	4d07      	ldr	r5, [pc, #28]	; (8008da0 <_kill_r+0x20>)
 8008d84:	2300      	movs	r3, #0
 8008d86:	4604      	mov	r4, r0
 8008d88:	4608      	mov	r0, r1
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	602b      	str	r3, [r5, #0]
 8008d8e:	f7f8 fe43 	bl	8001a18 <_kill>
 8008d92:	1c43      	adds	r3, r0, #1
 8008d94:	d102      	bne.n	8008d9c <_kill_r+0x1c>
 8008d96:	682b      	ldr	r3, [r5, #0]
 8008d98:	b103      	cbz	r3, 8008d9c <_kill_r+0x1c>
 8008d9a:	6023      	str	r3, [r4, #0]
 8008d9c:	bd38      	pop	{r3, r4, r5, pc}
 8008d9e:	bf00      	nop
 8008da0:	2000033c 	.word	0x2000033c

08008da4 <_getpid_r>:
 8008da4:	f7f8 be30 	b.w	8001a08 <_getpid>

08008da8 <__sread>:
 8008da8:	b510      	push	{r4, lr}
 8008daa:	460c      	mov	r4, r1
 8008dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008db0:	f000 f894 	bl	8008edc <_read_r>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	bfab      	itete	ge
 8008db8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008dba:	89a3      	ldrhlt	r3, [r4, #12]
 8008dbc:	181b      	addge	r3, r3, r0
 8008dbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008dc2:	bfac      	ite	ge
 8008dc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008dc6:	81a3      	strhlt	r3, [r4, #12]
 8008dc8:	bd10      	pop	{r4, pc}

08008dca <__swrite>:
 8008dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dce:	461f      	mov	r7, r3
 8008dd0:	898b      	ldrh	r3, [r1, #12]
 8008dd2:	05db      	lsls	r3, r3, #23
 8008dd4:	4605      	mov	r5, r0
 8008dd6:	460c      	mov	r4, r1
 8008dd8:	4616      	mov	r6, r2
 8008dda:	d505      	bpl.n	8008de8 <__swrite+0x1e>
 8008ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008de0:	2302      	movs	r3, #2
 8008de2:	2200      	movs	r2, #0
 8008de4:	f000 f868 	bl	8008eb8 <_lseek_r>
 8008de8:	89a3      	ldrh	r3, [r4, #12]
 8008dea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008df2:	81a3      	strh	r3, [r4, #12]
 8008df4:	4632      	mov	r2, r6
 8008df6:	463b      	mov	r3, r7
 8008df8:	4628      	mov	r0, r5
 8008dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dfe:	f000 b817 	b.w	8008e30 <_write_r>

08008e02 <__sseek>:
 8008e02:	b510      	push	{r4, lr}
 8008e04:	460c      	mov	r4, r1
 8008e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e0a:	f000 f855 	bl	8008eb8 <_lseek_r>
 8008e0e:	1c43      	adds	r3, r0, #1
 8008e10:	89a3      	ldrh	r3, [r4, #12]
 8008e12:	bf15      	itete	ne
 8008e14:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e1e:	81a3      	strheq	r3, [r4, #12]
 8008e20:	bf18      	it	ne
 8008e22:	81a3      	strhne	r3, [r4, #12]
 8008e24:	bd10      	pop	{r4, pc}

08008e26 <__sclose>:
 8008e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e2a:	f000 b813 	b.w	8008e54 <_close_r>
	...

08008e30 <_write_r>:
 8008e30:	b538      	push	{r3, r4, r5, lr}
 8008e32:	4d07      	ldr	r5, [pc, #28]	; (8008e50 <_write_r+0x20>)
 8008e34:	4604      	mov	r4, r0
 8008e36:	4608      	mov	r0, r1
 8008e38:	4611      	mov	r1, r2
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	602a      	str	r2, [r5, #0]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	f7f8 fe21 	bl	8001a86 <_write>
 8008e44:	1c43      	adds	r3, r0, #1
 8008e46:	d102      	bne.n	8008e4e <_write_r+0x1e>
 8008e48:	682b      	ldr	r3, [r5, #0]
 8008e4a:	b103      	cbz	r3, 8008e4e <_write_r+0x1e>
 8008e4c:	6023      	str	r3, [r4, #0]
 8008e4e:	bd38      	pop	{r3, r4, r5, pc}
 8008e50:	2000033c 	.word	0x2000033c

08008e54 <_close_r>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	4d06      	ldr	r5, [pc, #24]	; (8008e70 <_close_r+0x1c>)
 8008e58:	2300      	movs	r3, #0
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	4608      	mov	r0, r1
 8008e5e:	602b      	str	r3, [r5, #0]
 8008e60:	f7f8 fe2d 	bl	8001abe <_close>
 8008e64:	1c43      	adds	r3, r0, #1
 8008e66:	d102      	bne.n	8008e6e <_close_r+0x1a>
 8008e68:	682b      	ldr	r3, [r5, #0]
 8008e6a:	b103      	cbz	r3, 8008e6e <_close_r+0x1a>
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	bd38      	pop	{r3, r4, r5, pc}
 8008e70:	2000033c 	.word	0x2000033c

08008e74 <_fstat_r>:
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	4d07      	ldr	r5, [pc, #28]	; (8008e94 <_fstat_r+0x20>)
 8008e78:	2300      	movs	r3, #0
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	4608      	mov	r0, r1
 8008e7e:	4611      	mov	r1, r2
 8008e80:	602b      	str	r3, [r5, #0]
 8008e82:	f7f8 fe28 	bl	8001ad6 <_fstat>
 8008e86:	1c43      	adds	r3, r0, #1
 8008e88:	d102      	bne.n	8008e90 <_fstat_r+0x1c>
 8008e8a:	682b      	ldr	r3, [r5, #0]
 8008e8c:	b103      	cbz	r3, 8008e90 <_fstat_r+0x1c>
 8008e8e:	6023      	str	r3, [r4, #0]
 8008e90:	bd38      	pop	{r3, r4, r5, pc}
 8008e92:	bf00      	nop
 8008e94:	2000033c 	.word	0x2000033c

08008e98 <_isatty_r>:
 8008e98:	b538      	push	{r3, r4, r5, lr}
 8008e9a:	4d06      	ldr	r5, [pc, #24]	; (8008eb4 <_isatty_r+0x1c>)
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	4608      	mov	r0, r1
 8008ea2:	602b      	str	r3, [r5, #0]
 8008ea4:	f7f8 fe27 	bl	8001af6 <_isatty>
 8008ea8:	1c43      	adds	r3, r0, #1
 8008eaa:	d102      	bne.n	8008eb2 <_isatty_r+0x1a>
 8008eac:	682b      	ldr	r3, [r5, #0]
 8008eae:	b103      	cbz	r3, 8008eb2 <_isatty_r+0x1a>
 8008eb0:	6023      	str	r3, [r4, #0]
 8008eb2:	bd38      	pop	{r3, r4, r5, pc}
 8008eb4:	2000033c 	.word	0x2000033c

08008eb8 <_lseek_r>:
 8008eb8:	b538      	push	{r3, r4, r5, lr}
 8008eba:	4d07      	ldr	r5, [pc, #28]	; (8008ed8 <_lseek_r+0x20>)
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	4608      	mov	r0, r1
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	602a      	str	r2, [r5, #0]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	f7f8 fe20 	bl	8001b0c <_lseek>
 8008ecc:	1c43      	adds	r3, r0, #1
 8008ece:	d102      	bne.n	8008ed6 <_lseek_r+0x1e>
 8008ed0:	682b      	ldr	r3, [r5, #0]
 8008ed2:	b103      	cbz	r3, 8008ed6 <_lseek_r+0x1e>
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	bd38      	pop	{r3, r4, r5, pc}
 8008ed8:	2000033c 	.word	0x2000033c

08008edc <_read_r>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4d07      	ldr	r5, [pc, #28]	; (8008efc <_read_r+0x20>)
 8008ee0:	4604      	mov	r4, r0
 8008ee2:	4608      	mov	r0, r1
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	602a      	str	r2, [r5, #0]
 8008eea:	461a      	mov	r2, r3
 8008eec:	f7f8 fdae 	bl	8001a4c <_read>
 8008ef0:	1c43      	adds	r3, r0, #1
 8008ef2:	d102      	bne.n	8008efa <_read_r+0x1e>
 8008ef4:	682b      	ldr	r3, [r5, #0]
 8008ef6:	b103      	cbz	r3, 8008efa <_read_r+0x1e>
 8008ef8:	6023      	str	r3, [r4, #0]
 8008efa:	bd38      	pop	{r3, r4, r5, pc}
 8008efc:	2000033c 	.word	0x2000033c

08008f00 <sqrt>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	ed2d 8b02 	vpush	{d8}
 8008f06:	ec55 4b10 	vmov	r4, r5, d0
 8008f0a:	f000 f825 	bl	8008f58 <__ieee754_sqrt>
 8008f0e:	4622      	mov	r2, r4
 8008f10:	462b      	mov	r3, r5
 8008f12:	4620      	mov	r0, r4
 8008f14:	4629      	mov	r1, r5
 8008f16:	eeb0 8a40 	vmov.f32	s16, s0
 8008f1a:	eef0 8a60 	vmov.f32	s17, s1
 8008f1e:	f7f7 fe0d 	bl	8000b3c <__aeabi_dcmpun>
 8008f22:	b990      	cbnz	r0, 8008f4a <sqrt+0x4a>
 8008f24:	2200      	movs	r2, #0
 8008f26:	2300      	movs	r3, #0
 8008f28:	4620      	mov	r0, r4
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	f7f7 fdde 	bl	8000aec <__aeabi_dcmplt>
 8008f30:	b158      	cbz	r0, 8008f4a <sqrt+0x4a>
 8008f32:	f7fd f8d1 	bl	80060d8 <__errno>
 8008f36:	2321      	movs	r3, #33	; 0x21
 8008f38:	6003      	str	r3, [r0, #0]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	4610      	mov	r0, r2
 8008f40:	4619      	mov	r1, r3
 8008f42:	f7f7 fc8b 	bl	800085c <__aeabi_ddiv>
 8008f46:	ec41 0b18 	vmov	d8, r0, r1
 8008f4a:	eeb0 0a48 	vmov.f32	s0, s16
 8008f4e:	eef0 0a68 	vmov.f32	s1, s17
 8008f52:	ecbd 8b02 	vpop	{d8}
 8008f56:	bd38      	pop	{r3, r4, r5, pc}

08008f58 <__ieee754_sqrt>:
 8008f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f5c:	ec55 4b10 	vmov	r4, r5, d0
 8008f60:	4e55      	ldr	r6, [pc, #340]	; (80090b8 <__ieee754_sqrt+0x160>)
 8008f62:	43ae      	bics	r6, r5
 8008f64:	ee10 0a10 	vmov	r0, s0
 8008f68:	ee10 3a10 	vmov	r3, s0
 8008f6c:	462a      	mov	r2, r5
 8008f6e:	4629      	mov	r1, r5
 8008f70:	d110      	bne.n	8008f94 <__ieee754_sqrt+0x3c>
 8008f72:	ee10 2a10 	vmov	r2, s0
 8008f76:	462b      	mov	r3, r5
 8008f78:	f7f7 fb46 	bl	8000608 <__aeabi_dmul>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	4620      	mov	r0, r4
 8008f82:	4629      	mov	r1, r5
 8008f84:	f7f7 f98a 	bl	800029c <__adddf3>
 8008f88:	4604      	mov	r4, r0
 8008f8a:	460d      	mov	r5, r1
 8008f8c:	ec45 4b10 	vmov	d0, r4, r5
 8008f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f94:	2d00      	cmp	r5, #0
 8008f96:	dc10      	bgt.n	8008fba <__ieee754_sqrt+0x62>
 8008f98:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008f9c:	4330      	orrs	r0, r6
 8008f9e:	d0f5      	beq.n	8008f8c <__ieee754_sqrt+0x34>
 8008fa0:	b15d      	cbz	r5, 8008fba <__ieee754_sqrt+0x62>
 8008fa2:	ee10 2a10 	vmov	r2, s0
 8008fa6:	462b      	mov	r3, r5
 8008fa8:	ee10 0a10 	vmov	r0, s0
 8008fac:	f7f7 f974 	bl	8000298 <__aeabi_dsub>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	f7f7 fc52 	bl	800085c <__aeabi_ddiv>
 8008fb8:	e7e6      	b.n	8008f88 <__ieee754_sqrt+0x30>
 8008fba:	1512      	asrs	r2, r2, #20
 8008fbc:	d074      	beq.n	80090a8 <__ieee754_sqrt+0x150>
 8008fbe:	07d4      	lsls	r4, r2, #31
 8008fc0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008fc4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008fc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008fcc:	bf5e      	ittt	pl
 8008fce:	0fda      	lsrpl	r2, r3, #31
 8008fd0:	005b      	lslpl	r3, r3, #1
 8008fd2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008fd6:	2400      	movs	r4, #0
 8008fd8:	0fda      	lsrs	r2, r3, #31
 8008fda:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008fde:	107f      	asrs	r7, r7, #1
 8008fe0:	005b      	lsls	r3, r3, #1
 8008fe2:	2516      	movs	r5, #22
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008fea:	1886      	adds	r6, r0, r2
 8008fec:	428e      	cmp	r6, r1
 8008fee:	bfde      	ittt	le
 8008ff0:	1b89      	suble	r1, r1, r6
 8008ff2:	18b0      	addle	r0, r6, r2
 8008ff4:	18a4      	addle	r4, r4, r2
 8008ff6:	0049      	lsls	r1, r1, #1
 8008ff8:	3d01      	subs	r5, #1
 8008ffa:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008ffe:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009002:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009006:	d1f0      	bne.n	8008fea <__ieee754_sqrt+0x92>
 8009008:	462a      	mov	r2, r5
 800900a:	f04f 0e20 	mov.w	lr, #32
 800900e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009012:	4281      	cmp	r1, r0
 8009014:	eb06 0c05 	add.w	ip, r6, r5
 8009018:	dc02      	bgt.n	8009020 <__ieee754_sqrt+0xc8>
 800901a:	d113      	bne.n	8009044 <__ieee754_sqrt+0xec>
 800901c:	459c      	cmp	ip, r3
 800901e:	d811      	bhi.n	8009044 <__ieee754_sqrt+0xec>
 8009020:	f1bc 0f00 	cmp.w	ip, #0
 8009024:	eb0c 0506 	add.w	r5, ip, r6
 8009028:	da43      	bge.n	80090b2 <__ieee754_sqrt+0x15a>
 800902a:	2d00      	cmp	r5, #0
 800902c:	db41      	blt.n	80090b2 <__ieee754_sqrt+0x15a>
 800902e:	f100 0801 	add.w	r8, r0, #1
 8009032:	1a09      	subs	r1, r1, r0
 8009034:	459c      	cmp	ip, r3
 8009036:	bf88      	it	hi
 8009038:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800903c:	eba3 030c 	sub.w	r3, r3, ip
 8009040:	4432      	add	r2, r6
 8009042:	4640      	mov	r0, r8
 8009044:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009048:	f1be 0e01 	subs.w	lr, lr, #1
 800904c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009050:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009054:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009058:	d1db      	bne.n	8009012 <__ieee754_sqrt+0xba>
 800905a:	430b      	orrs	r3, r1
 800905c:	d006      	beq.n	800906c <__ieee754_sqrt+0x114>
 800905e:	1c50      	adds	r0, r2, #1
 8009060:	bf13      	iteet	ne
 8009062:	3201      	addne	r2, #1
 8009064:	3401      	addeq	r4, #1
 8009066:	4672      	moveq	r2, lr
 8009068:	f022 0201 	bicne.w	r2, r2, #1
 800906c:	1063      	asrs	r3, r4, #1
 800906e:	0852      	lsrs	r2, r2, #1
 8009070:	07e1      	lsls	r1, r4, #31
 8009072:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009076:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800907a:	bf48      	it	mi
 800907c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009080:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009084:	4614      	mov	r4, r2
 8009086:	e781      	b.n	8008f8c <__ieee754_sqrt+0x34>
 8009088:	0ad9      	lsrs	r1, r3, #11
 800908a:	3815      	subs	r0, #21
 800908c:	055b      	lsls	r3, r3, #21
 800908e:	2900      	cmp	r1, #0
 8009090:	d0fa      	beq.n	8009088 <__ieee754_sqrt+0x130>
 8009092:	02cd      	lsls	r5, r1, #11
 8009094:	d50a      	bpl.n	80090ac <__ieee754_sqrt+0x154>
 8009096:	f1c2 0420 	rsb	r4, r2, #32
 800909a:	fa23 f404 	lsr.w	r4, r3, r4
 800909e:	1e55      	subs	r5, r2, #1
 80090a0:	4093      	lsls	r3, r2
 80090a2:	4321      	orrs	r1, r4
 80090a4:	1b42      	subs	r2, r0, r5
 80090a6:	e78a      	b.n	8008fbe <__ieee754_sqrt+0x66>
 80090a8:	4610      	mov	r0, r2
 80090aa:	e7f0      	b.n	800908e <__ieee754_sqrt+0x136>
 80090ac:	0049      	lsls	r1, r1, #1
 80090ae:	3201      	adds	r2, #1
 80090b0:	e7ef      	b.n	8009092 <__ieee754_sqrt+0x13a>
 80090b2:	4680      	mov	r8, r0
 80090b4:	e7bd      	b.n	8009032 <__ieee754_sqrt+0xda>
 80090b6:	bf00      	nop
 80090b8:	7ff00000 	.word	0x7ff00000

080090bc <_init>:
 80090bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090be:	bf00      	nop
 80090c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090c2:	bc08      	pop	{r3}
 80090c4:	469e      	mov	lr, r3
 80090c6:	4770      	bx	lr

080090c8 <_fini>:
 80090c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ca:	bf00      	nop
 80090cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ce:	bc08      	pop	{r3}
 80090d0:	469e      	mov	lr, r3
 80090d2:	4770      	bx	lr
